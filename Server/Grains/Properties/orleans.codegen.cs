//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#if !EXCLUDE_CODEGEN
#pragma warning disable 162
#pragma warning disable 219
#pragma warning disable 414
#pragma warning disable 649
#pragma warning disable 693
#pragma warning disable 1591
#pragma warning disable 1998

namespace Server
{
    using Orleans;
    using System;
    using System.Runtime.InteropServices;
    using System.Runtime.Serialization;
    using Shared;
    using System.Collections;
    using System.Collections.Generic;
    using Orleans.Runtime;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [SerializableAttribute()]
    [global::Orleans.CodeGeneration.GrainStateAttribute("Server.UnitImpl")]
    public class UnitImplState : global::Orleans.GrainState, UnitData
    {
        

            public Boolean @Exists { get; set; }

            public Single @PositionX { get; set; }

            public Single @PositionY { get; set; }

            public Single @PositionZ { get; set; }

            public UInt32 @MapID { get; set; }

            public UInt32 @InstanceID { get; set; }

            public ObjectType @ObjType { get; set; }

            public UpdateField[] @UpdateFields { get; set; }

            public Int32 @unit_test { get; set; }

            public override void SetAll(System.Collections.Generic.IDictionary<string,object> values)
            {   
                object value;
                if (values == null) { InitStateFields(); return; }
                if (values.TryGetValue("Exists", out value)) @Exists = (Boolean) value;
                if (values.TryGetValue("PositionX", out value)) @PositionX = (Single) value;
                if (values.TryGetValue("PositionY", out value)) @PositionY = (Single) value;
                if (values.TryGetValue("PositionZ", out value)) @PositionZ = (Single) value;
                if (values.TryGetValue("MapID", out value)) @MapID = (UInt32) value;
                if (values.TryGetValue("InstanceID", out value)) @InstanceID = (UInt32) value;
                if (values.TryGetValue("ObjType", out value)) @ObjType = (ObjectType) value;
                if (values.TryGetValue("UpdateFields", out value)) @UpdateFields = (UpdateField[]) value;
                if (values.TryGetValue("unit_test", out value)) @unit_test = value is Int64 ? (Int32)(Int64)value : (Int32)value;
            }

            public override System.String ToString()
            {
                return System.String.Format("UnitImplState( Exists={0} PositionX={1} PositionY={2} PositionZ={3} MapID={4} InstanceID={5} ObjType={6} UpdateFields={7} unit_test={8} )", @Exists, @PositionX, @PositionY, @PositionZ, @MapID, @InstanceID, @ObjType, @UpdateFields, @unit_test);
            }
        
        public UnitImplState() : 
                base("Server.UnitImpl")
        {
            this.InitStateFields();
        }
        
        public override System.Collections.Generic.IDictionary<string, object> AsDictionary()
        {
            System.Collections.Generic.Dictionary<string, object> result = new System.Collections.Generic.Dictionary<string, object>();
            result["Exists"] = this.Exists;
            result["PositionX"] = this.PositionX;
            result["PositionY"] = this.PositionY;
            result["PositionZ"] = this.PositionZ;
            result["MapID"] = this.MapID;
            result["InstanceID"] = this.InstanceID;
            result["ObjType"] = this.ObjType;
            result["UpdateFields"] = this.UpdateFields;
            result["unit_test"] = this.unit_test;
            return result;
        }
        
        private void InitStateFields()
        {
            this.Exists = default(Boolean);
            this.PositionX = default(Single);
            this.PositionY = default(Single);
            this.PositionZ = default(Single);
            this.MapID = default(UInt32);
            this.InstanceID = default(UInt32);
            this.ObjType = default(ObjectType);
            this.UpdateFields = default(UpdateField[]);
            this.unit_test = default(Int32);
        }
        
        [global::Orleans.CodeGeneration.CopierMethodAttribute()]
        public static object _Copier(object original)
        {
            UnitImplState input = ((UnitImplState)(original));
            return input.DeepCopy();
        }
        
        [global::Orleans.CodeGeneration.SerializerMethodAttribute()]
        public static void _Serializer(object original, global::Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            UnitImplState input = ((UnitImplState)(original));
            input.SerializeTo(stream);
        }
        
        [global::Orleans.CodeGeneration.DeserializerMethodAttribute()]
        public static object _Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            UnitImplState result = new UnitImplState();
            result.DeserializeFrom(stream);
            return result;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [SerializableAttribute()]
    [global::Orleans.CodeGeneration.GrainStateAttribute("Server.Player")]
    public class PlayerState : global::Orleans.GrainState, PlayerData
    {
        

            public Int32 @unit_test { get; set; }

            public Boolean @Exists { get; set; }

            public Single @PositionX { get; set; }

            public Single @PositionY { get; set; }

            public Single @PositionZ { get; set; }

            public UInt32 @MapID { get; set; }

            public UInt32 @InstanceID { get; set; }

            public ObjectType @ObjType { get; set; }

            public UpdateField[] @UpdateFields { get; set; }

            public String @Name { get; set; }

            public String @Account { get; set; }

            public Int32 @Race { get; set; }

            public Int32 @Class { get; set; }

            public Int32 @Gender { get; set; }

            public Int32 @RealmID { get; set; }

            public override void SetAll(System.Collections.Generic.IDictionary<string,object> values)
            {   
                object value;
                if (values == null) { InitStateFields(); return; }
                if (values.TryGetValue("unit_test", out value)) @unit_test = value is Int64 ? (Int32)(Int64)value : (Int32)value;
                if (values.TryGetValue("Exists", out value)) @Exists = (Boolean) value;
                if (values.TryGetValue("PositionX", out value)) @PositionX = (Single) value;
                if (values.TryGetValue("PositionY", out value)) @PositionY = (Single) value;
                if (values.TryGetValue("PositionZ", out value)) @PositionZ = (Single) value;
                if (values.TryGetValue("MapID", out value)) @MapID = (UInt32) value;
                if (values.TryGetValue("InstanceID", out value)) @InstanceID = (UInt32) value;
                if (values.TryGetValue("ObjType", out value)) @ObjType = (ObjectType) value;
                if (values.TryGetValue("UpdateFields", out value)) @UpdateFields = (UpdateField[]) value;
                if (values.TryGetValue("Name", out value)) @Name = (String) value;
                if (values.TryGetValue("Account", out value)) @Account = (String) value;
                if (values.TryGetValue("Race", out value)) @Race = value is Int64 ? (Int32)(Int64)value : (Int32)value;
                if (values.TryGetValue("Class", out value)) @Class = value is Int64 ? (Int32)(Int64)value : (Int32)value;
                if (values.TryGetValue("Gender", out value)) @Gender = value is Int64 ? (Int32)(Int64)value : (Int32)value;
                if (values.TryGetValue("RealmID", out value)) @RealmID = value is Int64 ? (Int32)(Int64)value : (Int32)value;
            }

            public override System.String ToString()
            {
                return System.String.Format("PlayerState( unit_test={0} Exists={1} PositionX={2} PositionY={3} PositionZ={4} MapID={5} InstanceID={6} ObjType={7} UpdateFields={8} Name={9} Account={10} Race={11} Class={12} Gender={13} RealmID={14} )", @unit_test, @Exists, @PositionX, @PositionY, @PositionZ, @MapID, @InstanceID, @ObjType, @UpdateFields, @Name, @Account, @Race, @Class, @Gender, @RealmID);
            }
        
        public PlayerState() : 
                base("Server.Player")
        {
            this.InitStateFields();
        }
        
        public override System.Collections.Generic.IDictionary<string, object> AsDictionary()
        {
            System.Collections.Generic.Dictionary<string, object> result = new System.Collections.Generic.Dictionary<string, object>();
            result["unit_test"] = this.unit_test;
            result["Exists"] = this.Exists;
            result["PositionX"] = this.PositionX;
            result["PositionY"] = this.PositionY;
            result["PositionZ"] = this.PositionZ;
            result["MapID"] = this.MapID;
            result["InstanceID"] = this.InstanceID;
            result["ObjType"] = this.ObjType;
            result["UpdateFields"] = this.UpdateFields;
            result["Name"] = this.Name;
            result["Account"] = this.Account;
            result["Race"] = this.Race;
            result["Class"] = this.Class;
            result["Gender"] = this.Gender;
            result["RealmID"] = this.RealmID;
            return result;
        }
        
        private void InitStateFields()
        {
            this.unit_test = default(Int32);
            this.Exists = default(Boolean);
            this.PositionX = default(Single);
            this.PositionY = default(Single);
            this.PositionZ = default(Single);
            this.MapID = default(UInt32);
            this.InstanceID = default(UInt32);
            this.ObjType = default(ObjectType);
            this.UpdateFields = default(UpdateField[]);
            this.Name = default(String);
            this.Account = default(String);
            this.Race = default(Int32);
            this.Class = default(Int32);
            this.Gender = default(Int32);
            this.RealmID = default(Int32);
        }
        
        [global::Orleans.CodeGeneration.CopierMethodAttribute()]
        public static object _Copier(object original)
        {
            PlayerState input = ((PlayerState)(original));
            return input.DeepCopy();
        }
        
        [global::Orleans.CodeGeneration.SerializerMethodAttribute()]
        public static void _Serializer(object original, global::Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            PlayerState input = ((PlayerState)(original));
            input.SerializeTo(stream);
        }
        
        [global::Orleans.CodeGeneration.DeserializerMethodAttribute()]
        public static object _Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            PlayerState result = new PlayerState();
            result.DeserializeFrom(stream);
            return result;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [SerializableAttribute()]
    [global::Orleans.CodeGeneration.GrainStateAttribute("Server.PlayerImpl")]
    public class PlayerImplState : global::Orleans.GrainState, PlayerData
    {
        

            public Int32 @unit_test { get; set; }

            public Boolean @Exists { get; set; }

            public Single @PositionX { get; set; }

            public Single @PositionY { get; set; }

            public Single @PositionZ { get; set; }

            public UInt32 @MapID { get; set; }

            public UInt32 @InstanceID { get; set; }

            public ObjectType @ObjType { get; set; }

            public UpdateField[] @UpdateFields { get; set; }

            public String @Name { get; set; }

            public String @Account { get; set; }

            public Int32 @Race { get; set; }

            public Int32 @Class { get; set; }

            public Int32 @Gender { get; set; }

            public Int32 @RealmID { get; set; }

            public override void SetAll(System.Collections.Generic.IDictionary<string,object> values)
            {   
                object value;
                if (values == null) { InitStateFields(); return; }
                if (values.TryGetValue("unit_test", out value)) @unit_test = value is Int64 ? (Int32)(Int64)value : (Int32)value;
                if (values.TryGetValue("Exists", out value)) @Exists = (Boolean) value;
                if (values.TryGetValue("PositionX", out value)) @PositionX = (Single) value;
                if (values.TryGetValue("PositionY", out value)) @PositionY = (Single) value;
                if (values.TryGetValue("PositionZ", out value)) @PositionZ = (Single) value;
                if (values.TryGetValue("MapID", out value)) @MapID = (UInt32) value;
                if (values.TryGetValue("InstanceID", out value)) @InstanceID = (UInt32) value;
                if (values.TryGetValue("ObjType", out value)) @ObjType = (ObjectType) value;
                if (values.TryGetValue("UpdateFields", out value)) @UpdateFields = (UpdateField[]) value;
                if (values.TryGetValue("Name", out value)) @Name = (String) value;
                if (values.TryGetValue("Account", out value)) @Account = (String) value;
                if (values.TryGetValue("Race", out value)) @Race = value is Int64 ? (Int32)(Int64)value : (Int32)value;
                if (values.TryGetValue("Class", out value)) @Class = value is Int64 ? (Int32)(Int64)value : (Int32)value;
                if (values.TryGetValue("Gender", out value)) @Gender = value is Int64 ? (Int32)(Int64)value : (Int32)value;
                if (values.TryGetValue("RealmID", out value)) @RealmID = value is Int64 ? (Int32)(Int64)value : (Int32)value;
            }

            public override System.String ToString()
            {
                return System.String.Format("PlayerImplState( unit_test={0} Exists={1} PositionX={2} PositionY={3} PositionZ={4} MapID={5} InstanceID={6} ObjType={7} UpdateFields={8} Name={9} Account={10} Race={11} Class={12} Gender={13} RealmID={14} )", @unit_test, @Exists, @PositionX, @PositionY, @PositionZ, @MapID, @InstanceID, @ObjType, @UpdateFields, @Name, @Account, @Race, @Class, @Gender, @RealmID);
            }
        
        public PlayerImplState() : 
                base("Server.PlayerImpl")
        {
            this.InitStateFields();
        }
        
        public override System.Collections.Generic.IDictionary<string, object> AsDictionary()
        {
            System.Collections.Generic.Dictionary<string, object> result = new System.Collections.Generic.Dictionary<string, object>();
            result["unit_test"] = this.unit_test;
            result["Exists"] = this.Exists;
            result["PositionX"] = this.PositionX;
            result["PositionY"] = this.PositionY;
            result["PositionZ"] = this.PositionZ;
            result["MapID"] = this.MapID;
            result["InstanceID"] = this.InstanceID;
            result["ObjType"] = this.ObjType;
            result["UpdateFields"] = this.UpdateFields;
            result["Name"] = this.Name;
            result["Account"] = this.Account;
            result["Race"] = this.Race;
            result["Class"] = this.Class;
            result["Gender"] = this.Gender;
            result["RealmID"] = this.RealmID;
            return result;
        }
        
        private void InitStateFields()
        {
            this.unit_test = default(Int32);
            this.Exists = default(Boolean);
            this.PositionX = default(Single);
            this.PositionY = default(Single);
            this.PositionZ = default(Single);
            this.MapID = default(UInt32);
            this.InstanceID = default(UInt32);
            this.ObjType = default(ObjectType);
            this.UpdateFields = default(UpdateField[]);
            this.Name = default(String);
            this.Account = default(String);
            this.Race = default(Int32);
            this.Class = default(Int32);
            this.Gender = default(Int32);
            this.RealmID = default(Int32);
        }
        
        [global::Orleans.CodeGeneration.CopierMethodAttribute()]
        public static object _Copier(object original)
        {
            PlayerImplState input = ((PlayerImplState)(original));
            return input.DeepCopy();
        }
        
        [global::Orleans.CodeGeneration.SerializerMethodAttribute()]
        public static void _Serializer(object original, global::Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            PlayerImplState input = ((PlayerImplState)(original));
            input.SerializeTo(stream);
        }
        
        [global::Orleans.CodeGeneration.DeserializerMethodAttribute()]
        public static object _Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            PlayerImplState result = new PlayerImplState();
            result.DeserializeFrom(stream);
            return result;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [SerializableAttribute()]
    [global::Orleans.CodeGeneration.GrainStateAttribute("Server.ObjectImpl")]
    public class ObjectImplState : global::Orleans.GrainState, ObjectData
    {
        

            public Boolean @Exists { get; set; }

            public Single @PositionX { get; set; }

            public Single @PositionY { get; set; }

            public Single @PositionZ { get; set; }

            public UInt32 @MapID { get; set; }

            public UInt32 @InstanceID { get; set; }

            public ObjectType @ObjType { get; set; }

            public UpdateField[] @UpdateFields { get; set; }

            public override void SetAll(System.Collections.Generic.IDictionary<string,object> values)
            {   
                object value;
                if (values == null) { InitStateFields(); return; }
                if (values.TryGetValue("Exists", out value)) @Exists = (Boolean) value;
                if (values.TryGetValue("PositionX", out value)) @PositionX = (Single) value;
                if (values.TryGetValue("PositionY", out value)) @PositionY = (Single) value;
                if (values.TryGetValue("PositionZ", out value)) @PositionZ = (Single) value;
                if (values.TryGetValue("MapID", out value)) @MapID = (UInt32) value;
                if (values.TryGetValue("InstanceID", out value)) @InstanceID = (UInt32) value;
                if (values.TryGetValue("ObjType", out value)) @ObjType = (ObjectType) value;
                if (values.TryGetValue("UpdateFields", out value)) @UpdateFields = (UpdateField[]) value;
            }

            public override System.String ToString()
            {
                return System.String.Format("ObjectImplState( Exists={0} PositionX={1} PositionY={2} PositionZ={3} MapID={4} InstanceID={5} ObjType={6} UpdateFields={7} )", @Exists, @PositionX, @PositionY, @PositionZ, @MapID, @InstanceID, @ObjType, @UpdateFields);
            }
        
        public ObjectImplState() : 
                base("Server.ObjectImpl")
        {
            this.InitStateFields();
        }
        
        public override System.Collections.Generic.IDictionary<string, object> AsDictionary()
        {
            System.Collections.Generic.Dictionary<string, object> result = new System.Collections.Generic.Dictionary<string, object>();
            result["Exists"] = this.Exists;
            result["PositionX"] = this.PositionX;
            result["PositionY"] = this.PositionY;
            result["PositionZ"] = this.PositionZ;
            result["MapID"] = this.MapID;
            result["InstanceID"] = this.InstanceID;
            result["ObjType"] = this.ObjType;
            result["UpdateFields"] = this.UpdateFields;
            return result;
        }
        
        private void InitStateFields()
        {
            this.Exists = default(Boolean);
            this.PositionX = default(Single);
            this.PositionY = default(Single);
            this.PositionZ = default(Single);
            this.MapID = default(UInt32);
            this.InstanceID = default(UInt32);
            this.ObjType = default(ObjectType);
            this.UpdateFields = default(UpdateField[]);
        }
        
        [global::Orleans.CodeGeneration.CopierMethodAttribute()]
        public static object _Copier(object original)
        {
            ObjectImplState input = ((ObjectImplState)(original));
            return input.DeepCopy();
        }
        
        [global::Orleans.CodeGeneration.SerializerMethodAttribute()]
        public static void _Serializer(object original, global::Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            ObjectImplState input = ((ObjectImplState)(original));
            input.SerializeTo(stream);
        }
        
        [global::Orleans.CodeGeneration.DeserializerMethodAttribute()]
        public static object _Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            ObjectImplState result = new ObjectImplState();
            result.DeserializeFrom(stream);
            return result;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [SerializableAttribute()]
    [global::Orleans.CodeGeneration.GrainStateAttribute("Server.RealmManager")]
    public class RealmManagerState : global::Orleans.GrainState, RealManagerState
    {
        

            public Dictionary<Int32,Realm> @RealmMap { get; set; }

            public override void SetAll(System.Collections.Generic.IDictionary<string,object> values)
            {   
                object value;
                if (values == null) { InitStateFields(); return; }
                if (values.TryGetValue("RealmMap", out value)) @RealmMap = (Dictionary<Int32,Realm>) value;
            }

            public override System.String ToString()
            {
                return System.String.Format("RealmManagerState( RealmMap={0} )", @RealmMap);
            }
        
        public RealmManagerState() : 
                base("Server.RealmManager")
        {
            this.InitStateFields();
        }
        
        public override System.Collections.Generic.IDictionary<string, object> AsDictionary()
        {
            System.Collections.Generic.Dictionary<string, object> result = new System.Collections.Generic.Dictionary<string, object>();
            result["RealmMap"] = this.RealmMap;
            return result;
        }
        
        private void InitStateFields()
        {
            this.RealmMap = new Dictionary<Int32,Realm>();
        }
        
        [global::Orleans.CodeGeneration.CopierMethodAttribute()]
        public static object _Copier(object original)
        {
            RealmManagerState input = ((RealmManagerState)(original));
            return input.DeepCopy();
        }
        
        [global::Orleans.CodeGeneration.SerializerMethodAttribute()]
        public static void _Serializer(object original, global::Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            RealmManagerState input = ((RealmManagerState)(original));
            input.SerializeTo(stream);
        }
        
        [global::Orleans.CodeGeneration.DeserializerMethodAttribute()]
        public static object _Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            RealmManagerState result = new RealmManagerState();
            result.DeserializeFrom(stream);
            return result;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [SerializableAttribute()]
    [global::Orleans.CodeGeneration.GrainStateAttribute("Server.Session")]
    public class SessionState : global::Orleans.GrainState, SessionData
    {
        

            public Byte[] @SessionKey { get; set; }

            public IAccount @Account { get; set; }

            public override void SetAll(System.Collections.Generic.IDictionary<string,object> values)
            {   
                object value;
                if (values == null) { InitStateFields(); return; }
                if (values.TryGetValue("SessionKey", out value)) @SessionKey = (Byte[]) value;
                if (values.TryGetValue("Account", out value)) @Account = (IAccount) value;
            }

            public override System.String ToString()
            {
                return System.String.Format("SessionState( SessionKey={0} Account={1} )", @SessionKey, @Account);
            }
        
        public SessionState() : 
                base("Server.Session")
        {
            this.InitStateFields();
        }
        
        public override System.Collections.Generic.IDictionary<string, object> AsDictionary()
        {
            System.Collections.Generic.Dictionary<string, object> result = new System.Collections.Generic.Dictionary<string, object>();
            result["SessionKey"] = this.SessionKey;
            result["Account"] = this.Account;
            return result;
        }
        
        private void InitStateFields()
        {
            this.SessionKey = default(Byte[]);
            this.Account = default(IAccount);
        }
        
        [global::Orleans.CodeGeneration.CopierMethodAttribute()]
        public static object _Copier(object original)
        {
            SessionState input = ((SessionState)(original));
            return input.DeepCopy();
        }
        
        [global::Orleans.CodeGeneration.SerializerMethodAttribute()]
        public static void _Serializer(object original, global::Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            SessionState input = ((SessionState)(original));
            input.SerializeTo(stream);
        }
        
        [global::Orleans.CodeGeneration.DeserializerMethodAttribute()]
        public static object _Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            SessionState result = new SessionState();
            result.DeserializeFrom(stream);
            return result;
        }
    }
}
#pragma warning restore 162
#pragma warning restore 219
#pragma warning restore 414
#pragma warning restore 649
#pragma warning restore 693
#pragma warning restore 1591
#pragma warning restore 1998
#endif
