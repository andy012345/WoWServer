//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#if !EXCLUDE_CODEGEN
#pragma warning disable 162
#pragma warning disable 219
#pragma warning disable 414
#pragma warning disable 649
#pragma warning disable 693
#pragma warning disable 1591
#pragma warning disable 1998

namespace Server
{
    using System;
    using System.Net;
    using System.Runtime.Serialization;
    using System.Runtime.Serialization.Formatters.Binary;
    using System.IO;
    using System.Collections.Generic;
    using Orleans;
    using Orleans.Runtime;
    using Orleans.Core;
    using Shared;
    using System.Collections;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class RealmManagerFactory
    {
        

                        [System.Obsolete("This method has been deprecated. Please use GrainFactory.GetGrain<IRealmManager> instead.")]
                        public static IRealmManager GetGrain(long primaryKey)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(IRealmManager), primaryKey));
                        }

                        [System.Obsolete("This method has been deprecated. Please use GrainFactory.GetGrain<IRealmManager> instead.")]
                        public static IRealmManager GetGrain(long primaryKey, string grainClassNamePrefix)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(IRealmManager), primaryKey, grainClassNamePrefix));
                        }

            public static IRealmManager Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return RealmManagerReference.Cast(grainRef);
            }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
        [System.SerializableAttribute()]
        [global::Orleans.CodeGeneration.GrainReferenceAttribute("Server.IRealmManager")]
        internal class RealmManagerReference : global::Orleans.Runtime.GrainReference, global::Orleans.Runtime.IAddressable, Server.IRealmManager
        {
            

            public static IRealmManager Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return (IRealmManager) global::Orleans.Runtime.GrainReference.CastInternal(typeof(IRealmManager), (global::Orleans.Runtime.GrainReference gr) => { return new RealmManagerReference(gr);}, grainRef, 742203874);
            }
            
            protected internal RealmManagerReference(global::Orleans.Runtime.GrainReference reference) : 
                    base(reference)
            {
            }
            
            protected internal RealmManagerReference(SerializationInfo info, StreamingContext context) : 
                    base(info, context)
            {
            }
            
            protected override int InterfaceId
            {
                get
                {
                    return 742203874;
                }
            }
            
            public override string InterfaceName
            {
                get
                {
                    return "Server.IRealmManager";
                }
            }
            
            [global::Orleans.CodeGeneration.CopierMethodAttribute()]
            public static object _Copier(object original)
            {
                RealmManagerReference input = ((RealmManagerReference)(original));
                return ((RealmManagerReference)(global::Orleans.Runtime.GrainReference.CopyGrainReference(input)));
            }
            
            [global::Orleans.CodeGeneration.SerializerMethodAttribute()]
            public static void _Serializer(object original, global::Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
            {
                RealmManagerReference input = ((RealmManagerReference)(original));
                global::Orleans.Runtime.GrainReference.SerializeGrainReference(input, stream, expected);
            }
            
            [global::Orleans.CodeGeneration.DeserializerMethodAttribute()]
            public static object _Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
            {
                return RealmManagerReference.Cast(((global::Orleans.Runtime.GrainReference)(global::Orleans.Runtime.GrainReference.DeserializeGrainReference(expected, stream))));
            }
            
            public override bool IsCompatible(int interfaceId)
            {
                return (interfaceId == this.InterfaceId);
            }
            
            protected override string GetMethodName(int interfaceId, int methodId)
            {
                return RealmManagerMethodInvoker.GetMethodName(interfaceId, methodId);
            }
            
            System.Threading.Tasks.Task<Shared.Realm> Server.IRealmManager.GetRealm(int @id)
            {

                return base.InvokeMethodAsync<Shared.Realm>(-637421897, new object[] {@id} );
            }
            
            System.Threading.Tasks.Task Server.IRealmManager.RemoveRealm(int @id)
            {

                return base.InvokeMethodAsync<object>(-1749235508, new object[] {@id} );
            }
            
            System.Threading.Tasks.Task Server.IRealmManager.AddRealm(Shared.RealmSettings @r)
            {

                return base.InvokeMethodAsync<object>(-130435026, new object[] {@r} );
            }
            
            System.Threading.Tasks.Task<Shared.Realm[]> Server.IRealmManager.GetRealms(int @AccountLevel)
            {

                return base.InvokeMethodAsync<Shared.Realm[]>(170842919, new object[] {@AccountLevel} );
            }
            
            System.Threading.Tasks.Task Server.IRealmManager.PingRealm(int @id)
            {

                return base.InvokeMethodAsync<object>(574707288, new object[] {@id} );
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.MethodInvokerAttribute("Server.IRealmManager", 742203874)]
    internal class RealmManagerMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        
        int global::Orleans.CodeGeneration.IGrainMethodInvoker.InterfaceId
        {
            get
            {
                return 742203874;
            }
        }
        
        global::System.Threading.Tasks.Task<object> global::Orleans.CodeGeneration.IGrainMethodInvoker.Invoke(global::Orleans.Runtime.IAddressable grain, int interfaceId, int methodId, object[] arguments)
        {

            try
            {                    if (grain == null) throw new System.ArgumentNullException("grain");
                switch (interfaceId)
                {
                    case 742203874:  // IRealmManager
                        switch (methodId)
                        {
                            case -637421897: 
                                return ((IRealmManager)grain).GetRealm((Int32)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1749235508: 
                                return ((IRealmManager)grain).RemoveRealm((Int32)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -130435026: 
                                return ((IRealmManager)grain).AddRealm((Shared.RealmSettings)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 170842919: 
                                return ((IRealmManager)grain).GetRealms((Int32)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 574707288: 
                                return ((IRealmManager)grain).PingRealm((Int32)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }
                    default:
                        throw new System.InvalidCastException("interfaceId="+interfaceId);
                }
            }
            catch(Exception ex)
            {
                var t = new System.Threading.Tasks.TaskCompletionSource<object>();
                t.SetException(ex);
                return t.Task;
            }
        }
        
        public static string GetMethodName(int interfaceId, int methodId)
        {

            switch (interfaceId)
            {
                
                case 742203874:  // IRealmManager
                    switch (methodId)
                    {
                        case -637421897:
                            return "GetRealm";
                    case -1749235508:
                            return "RemoveRealm";
                    case -130435026:
                            return "AddRealm";
                    case 170842919:
                            return "GetRealms";
                    case 574707288:
                            return "PingRealm";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }

                default:
                    throw new System.InvalidCastException("interfaceId="+interfaceId);
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class ObjectTestFactory
    {
        

                        [System.Obsolete("This method has been deprecated. Please use GrainFactory.GetGrain<IObjectTest> instead.")]
                        public static IObjectTest GetGrain(long primaryKey)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(IObjectTest), primaryKey));
                        }

                        [System.Obsolete("This method has been deprecated. Please use GrainFactory.GetGrain<IObjectTest> instead.")]
                        public static IObjectTest GetGrain(long primaryKey, string grainClassNamePrefix)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(IObjectTest), primaryKey, grainClassNamePrefix));
                        }

            public static IObjectTest Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return ObjectTestReference.Cast(grainRef);
            }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
        [System.SerializableAttribute()]
        [global::Orleans.CodeGeneration.GrainReferenceAttribute("Server.IObjectTest")]
        internal class ObjectTestReference : global::Orleans.Runtime.GrainReference, global::Orleans.Runtime.IAddressable, Server.IObjectTest
        {
            

            public static IObjectTest Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return (IObjectTest) global::Orleans.Runtime.GrainReference.CastInternal(typeof(IObjectTest), (global::Orleans.Runtime.GrainReference gr) => { return new ObjectTestReference(gr);}, grainRef, -553992454);
            }
            
            protected internal ObjectTestReference(global::Orleans.Runtime.GrainReference reference) : 
                    base(reference)
            {
            }
            
            protected internal ObjectTestReference(SerializationInfo info, StreamingContext context) : 
                    base(info, context)
            {
            }
            
            protected override int InterfaceId
            {
                get
                {
                    return -553992454;
                }
            }
            
            public override string InterfaceName
            {
                get
                {
                    return "Server.IObjectTest";
                }
            }
            
            [global::Orleans.CodeGeneration.CopierMethodAttribute()]
            public static object _Copier(object original)
            {
                ObjectTestReference input = ((ObjectTestReference)(original));
                return ((ObjectTestReference)(global::Orleans.Runtime.GrainReference.CopyGrainReference(input)));
            }
            
            [global::Orleans.CodeGeneration.SerializerMethodAttribute()]
            public static void _Serializer(object original, global::Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
            {
                ObjectTestReference input = ((ObjectTestReference)(original));
                global::Orleans.Runtime.GrainReference.SerializeGrainReference(input, stream, expected);
            }
            
            [global::Orleans.CodeGeneration.DeserializerMethodAttribute()]
            public static object _Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
            {
                return ObjectTestReference.Cast(((global::Orleans.Runtime.GrainReference)(global::Orleans.Runtime.GrainReference.DeserializeGrainReference(expected, stream))));
            }
            
            public override bool IsCompatible(int interfaceId)
            {
                return (interfaceId == this.InterfaceId);
            }
            
            protected override string GetMethodName(int interfaceId, int methodId)
            {
                return ObjectTestMethodInvoker.GetMethodName(interfaceId, methodId);
            }
            
            System.Threading.Tasks.Task<string> Server.IObjectTest.VirtualCall()
            {

                return base.InvokeMethodAsync<System.String>(911766124, null );
            }
            
            System.Threading.Tasks.Task<string> Server.IObjectTest.ObjectCall()
            {

                return base.InvokeMethodAsync<System.String>(-509390599, null );
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.MethodInvokerAttribute("Server.IObjectTest", -553992454)]
    internal class ObjectTestMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        
        int global::Orleans.CodeGeneration.IGrainMethodInvoker.InterfaceId
        {
            get
            {
                return -553992454;
            }
        }
        
        global::System.Threading.Tasks.Task<object> global::Orleans.CodeGeneration.IGrainMethodInvoker.Invoke(global::Orleans.Runtime.IAddressable grain, int interfaceId, int methodId, object[] arguments)
        {

            try
            {                    if (grain == null) throw new System.ArgumentNullException("grain");
                switch (interfaceId)
                {
                    case -553992454:  // IObjectTest
                        switch (methodId)
                        {
                            case 911766124: 
                                return ((IObjectTest)grain).VirtualCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -509390599: 
                                return ((IObjectTest)grain).ObjectCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }
                    default:
                        throw new System.InvalidCastException("interfaceId="+interfaceId);
                }
            }
            catch(Exception ex)
            {
                var t = new System.Threading.Tasks.TaskCompletionSource<object>();
                t.SetException(ex);
                return t.Task;
            }
        }
        
        public static string GetMethodName(int interfaceId, int methodId)
        {

            switch (interfaceId)
            {
                
                case -553992454:  // IObjectTest
                    switch (methodId)
                    {
                        case 911766124:
                            return "VirtualCall";
                    case -509390599:
                            return "ObjectCall";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }

                default:
                    throw new System.InvalidCastException("interfaceId="+interfaceId);
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class UnitTestFactory
    {
        

                        [System.Obsolete("This method has been deprecated. Please use GrainFactory.GetGrain<IUnitTest> instead.")]
                        public static IUnitTest GetGrain(long primaryKey)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(IUnitTest), primaryKey));
                        }

                        [System.Obsolete("This method has been deprecated. Please use GrainFactory.GetGrain<IUnitTest> instead.")]
                        public static IUnitTest GetGrain(long primaryKey, string grainClassNamePrefix)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(IUnitTest), primaryKey, grainClassNamePrefix));
                        }

            public static IUnitTest Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return UnitTestReference.Cast(grainRef);
            }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
        [System.SerializableAttribute()]
        [global::Orleans.CodeGeneration.GrainReferenceAttribute("Server.IUnitTest")]
        internal class UnitTestReference : global::Orleans.Runtime.GrainReference, global::Orleans.Runtime.IAddressable, Server.IUnitTest
        {
            

            public static IUnitTest Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return (IUnitTest) global::Orleans.Runtime.GrainReference.CastInternal(typeof(IUnitTest), (global::Orleans.Runtime.GrainReference gr) => { return new UnitTestReference(gr);}, grainRef, -1046890501);
            }
            
            protected internal UnitTestReference(global::Orleans.Runtime.GrainReference reference) : 
                    base(reference)
            {
            }
            
            protected internal UnitTestReference(SerializationInfo info, StreamingContext context) : 
                    base(info, context)
            {
            }
            
            protected override int InterfaceId
            {
                get
                {
                    return -1046890501;
                }
            }
            
            public override string InterfaceName
            {
                get
                {
                    return "Server.IUnitTest";
                }
            }
            
            [global::Orleans.CodeGeneration.CopierMethodAttribute()]
            public static object _Copier(object original)
            {
                UnitTestReference input = ((UnitTestReference)(original));
                return ((UnitTestReference)(global::Orleans.Runtime.GrainReference.CopyGrainReference(input)));
            }
            
            [global::Orleans.CodeGeneration.SerializerMethodAttribute()]
            public static void _Serializer(object original, global::Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
            {
                UnitTestReference input = ((UnitTestReference)(original));
                global::Orleans.Runtime.GrainReference.SerializeGrainReference(input, stream, expected);
            }
            
            [global::Orleans.CodeGeneration.DeserializerMethodAttribute()]
            public static object _Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
            {
                return UnitTestReference.Cast(((global::Orleans.Runtime.GrainReference)(global::Orleans.Runtime.GrainReference.DeserializeGrainReference(expected, stream))));
            }
            
            public override bool IsCompatible(int interfaceId)
            {
                return ((interfaceId == this.InterfaceId) 
                            || (interfaceId == -553992454));
            }
            
            protected override string GetMethodName(int interfaceId, int methodId)
            {
                return UnitTestMethodInvoker.GetMethodName(interfaceId, methodId);
            }
            
            System.Threading.Tasks.Task<string> Server.IUnitTest.UnitCall()
            {

                return base.InvokeMethodAsync<System.String>(1519937893, null );
            }
            
            System.Threading.Tasks.Task<string> Server.IObjectTest.VirtualCall()
            {

                return base.InvokeMethodAsync<System.String>(911766124, null );
            }
            
            System.Threading.Tasks.Task<string> Server.IObjectTest.ObjectCall()
            {

                return base.InvokeMethodAsync<System.String>(-509390599, null );
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.MethodInvokerAttribute("Server.IUnitTest", -1046890501)]
    internal class UnitTestMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        
        int global::Orleans.CodeGeneration.IGrainMethodInvoker.InterfaceId
        {
            get
            {
                return -1046890501;
            }
        }
        
        global::System.Threading.Tasks.Task<object> global::Orleans.CodeGeneration.IGrainMethodInvoker.Invoke(global::Orleans.Runtime.IAddressable grain, int interfaceId, int methodId, object[] arguments)
        {

            try
            {                    if (grain == null) throw new System.ArgumentNullException("grain");
                switch (interfaceId)
                {
                    case -1046890501:  // IUnitTest
                        switch (methodId)
                        {
                            case 1519937893: 
                                return ((IUnitTest)grain).UnitCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 911766124: 
                                return ((IUnitTest)grain).VirtualCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -509390599: 
                                return ((IUnitTest)grain).ObjectCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }case -553992454:  // IObjectTest
                        switch (methodId)
                        {
                            case 911766124: 
                                return ((IObjectTest)grain).VirtualCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -509390599: 
                                return ((IObjectTest)grain).ObjectCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }
                    default:
                        throw new System.InvalidCastException("interfaceId="+interfaceId);
                }
            }
            catch(Exception ex)
            {
                var t = new System.Threading.Tasks.TaskCompletionSource<object>();
                t.SetException(ex);
                return t.Task;
            }
        }
        
        public static string GetMethodName(int interfaceId, int methodId)
        {

            switch (interfaceId)
            {
                
                case -1046890501:  // IUnitTest
                    switch (methodId)
                    {
                        case 1519937893:
                            return "UnitCall";
                    case 911766124:
                            return "VirtualCall";
                    case -509390599:
                            return "ObjectCall";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }
                case -553992454:  // IObjectTest
                    switch (methodId)
                    {
                        case 911766124:
                            return "VirtualCall";
                    case -509390599:
                            return "ObjectCall";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }

                default:
                    throw new System.InvalidCastException("interfaceId="+interfaceId);
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class PlayerTestFactory
    {
        

                        [System.Obsolete("This method has been deprecated. Please use GrainFactory.GetGrain<IPlayerTest> instead.")]
                        public static IPlayerTest GetGrain(long primaryKey)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(IPlayerTest), primaryKey));
                        }

                        [System.Obsolete("This method has been deprecated. Please use GrainFactory.GetGrain<IPlayerTest> instead.")]
                        public static IPlayerTest GetGrain(long primaryKey, string grainClassNamePrefix)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(IPlayerTest), primaryKey, grainClassNamePrefix));
                        }

            public static IPlayerTest Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return PlayerTestReference.Cast(grainRef);
            }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
        [System.SerializableAttribute()]
        [global::Orleans.CodeGeneration.GrainReferenceAttribute("Server.IPlayerTest")]
        internal class PlayerTestReference : global::Orleans.Runtime.GrainReference, global::Orleans.Runtime.IAddressable, Server.IPlayerTest
        {
            

            public static IPlayerTest Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return (IPlayerTest) global::Orleans.Runtime.GrainReference.CastInternal(typeof(IPlayerTest), (global::Orleans.Runtime.GrainReference gr) => { return new PlayerTestReference(gr);}, grainRef, -555077417);
            }
            
            protected internal PlayerTestReference(global::Orleans.Runtime.GrainReference reference) : 
                    base(reference)
            {
            }
            
            protected internal PlayerTestReference(SerializationInfo info, StreamingContext context) : 
                    base(info, context)
            {
            }
            
            protected override int InterfaceId
            {
                get
                {
                    return -555077417;
                }
            }
            
            public override string InterfaceName
            {
                get
                {
                    return "Server.IPlayerTest";
                }
            }
            
            [global::Orleans.CodeGeneration.CopierMethodAttribute()]
            public static object _Copier(object original)
            {
                PlayerTestReference input = ((PlayerTestReference)(original));
                return ((PlayerTestReference)(global::Orleans.Runtime.GrainReference.CopyGrainReference(input)));
            }
            
            [global::Orleans.CodeGeneration.SerializerMethodAttribute()]
            public static void _Serializer(object original, global::Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
            {
                PlayerTestReference input = ((PlayerTestReference)(original));
                global::Orleans.Runtime.GrainReference.SerializeGrainReference(input, stream, expected);
            }
            
            [global::Orleans.CodeGeneration.DeserializerMethodAttribute()]
            public static object _Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
            {
                return PlayerTestReference.Cast(((global::Orleans.Runtime.GrainReference)(global::Orleans.Runtime.GrainReference.DeserializeGrainReference(expected, stream))));
            }
            
            public override bool IsCompatible(int interfaceId)
            {
                return (((interfaceId == this.InterfaceId) 
                            || (interfaceId == -1046890501)) 
                            || (interfaceId == -553992454));
            }
            
            protected override string GetMethodName(int interfaceId, int methodId)
            {
                return PlayerTestMethodInvoker.GetMethodName(interfaceId, methodId);
            }
            
            System.Threading.Tasks.Task<string> Server.IPlayerTest.PlayerCall()
            {

                return base.InvokeMethodAsync<System.String>(-851262471, null );
            }
            
            System.Threading.Tasks.Task<string> Server.IUnitTest.UnitCall()
            {

                return base.InvokeMethodAsync<System.String>(1519937893, null );
            }
            
            System.Threading.Tasks.Task<string> Server.IObjectTest.VirtualCall()
            {

                return base.InvokeMethodAsync<System.String>(911766124, null );
            }
            
            System.Threading.Tasks.Task<string> Server.IObjectTest.ObjectCall()
            {

                return base.InvokeMethodAsync<System.String>(-509390599, null );
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.MethodInvokerAttribute("Server.IPlayerTest", -555077417)]
    internal class PlayerTestMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        
        int global::Orleans.CodeGeneration.IGrainMethodInvoker.InterfaceId
        {
            get
            {
                return -555077417;
            }
        }
        
        global::System.Threading.Tasks.Task<object> global::Orleans.CodeGeneration.IGrainMethodInvoker.Invoke(global::Orleans.Runtime.IAddressable grain, int interfaceId, int methodId, object[] arguments)
        {

            try
            {                    if (grain == null) throw new System.ArgumentNullException("grain");
                switch (interfaceId)
                {
                    case -555077417:  // IPlayerTest
                        switch (methodId)
                        {
                            case -851262471: 
                                return ((IPlayerTest)grain).PlayerCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 1519937893: 
                                return ((IPlayerTest)grain).UnitCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 911766124: 
                                return ((IPlayerTest)grain).VirtualCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -509390599: 
                                return ((IPlayerTest)grain).ObjectCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }case -1046890501:  // IUnitTest
                        switch (methodId)
                        {
                            case 1519937893: 
                                return ((IUnitTest)grain).UnitCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 911766124: 
                                return ((IUnitTest)grain).VirtualCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -509390599: 
                                return ((IUnitTest)grain).ObjectCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }case -553992454:  // IObjectTest
                        switch (methodId)
                        {
                            case 911766124: 
                                return ((IObjectTest)grain).VirtualCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -509390599: 
                                return ((IObjectTest)grain).ObjectCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }
                    default:
                        throw new System.InvalidCastException("interfaceId="+interfaceId);
                }
            }
            catch(Exception ex)
            {
                var t = new System.Threading.Tasks.TaskCompletionSource<object>();
                t.SetException(ex);
                return t.Task;
            }
        }
        
        public static string GetMethodName(int interfaceId, int methodId)
        {

            switch (interfaceId)
            {
                
                case -555077417:  // IPlayerTest
                    switch (methodId)
                    {
                        case -851262471:
                            return "PlayerCall";
                    case 1519937893:
                            return "UnitCall";
                    case 911766124:
                            return "VirtualCall";
                    case -509390599:
                            return "ObjectCall";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }
                case -1046890501:  // IUnitTest
                    switch (methodId)
                    {
                        case 1519937893:
                            return "UnitCall";
                    case 911766124:
                            return "VirtualCall";
                    case -509390599:
                            return "ObjectCall";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }
                case -553992454:  // IObjectTest
                    switch (methodId)
                    {
                        case 911766124:
                            return "VirtualCall";
                    case -509390599:
                            return "ObjectCall";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }

                default:
                    throw new System.InvalidCastException("interfaceId="+interfaceId);
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class PlayerTestImplFactory
    {
        

                        [System.Obsolete("This method has been deprecated. Please use GrainFactory.GetGrain<IPlayerTestImpl> instead.")]
                        public static IPlayerTestImpl GetGrain(long primaryKey)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(IPlayerTestImpl), primaryKey));
                        }

                        [System.Obsolete("This method has been deprecated. Please use GrainFactory.GetGrain<IPlayerTestImpl> instead.")]
                        public static IPlayerTestImpl GetGrain(long primaryKey, string grainClassNamePrefix)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(IPlayerTestImpl), primaryKey, grainClassNamePrefix));
                        }

            public static IPlayerTestImpl Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return PlayerTestImplReference.Cast(grainRef);
            }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
        [System.SerializableAttribute()]
        [global::Orleans.CodeGeneration.GrainReferenceAttribute("Server.IPlayerTestImpl")]
        internal class PlayerTestImplReference : global::Orleans.Runtime.GrainReference, global::Orleans.Runtime.IAddressable, Server.IPlayerTestImpl
        {
            

            public static IPlayerTestImpl Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return (IPlayerTestImpl) global::Orleans.Runtime.GrainReference.CastInternal(typeof(IPlayerTestImpl), (global::Orleans.Runtime.GrainReference gr) => { return new PlayerTestImplReference(gr);}, grainRef, 605044166);
            }
            
            protected internal PlayerTestImplReference(global::Orleans.Runtime.GrainReference reference) : 
                    base(reference)
            {
            }
            
            protected internal PlayerTestImplReference(SerializationInfo info, StreamingContext context) : 
                    base(info, context)
            {
            }
            
            protected override int InterfaceId
            {
                get
                {
                    return 605044166;
                }
            }
            
            public override string InterfaceName
            {
                get
                {
                    return "Server.IPlayerTestImpl";
                }
            }
            
            [global::Orleans.CodeGeneration.CopierMethodAttribute()]
            public static object _Copier(object original)
            {
                PlayerTestImplReference input = ((PlayerTestImplReference)(original));
                return ((PlayerTestImplReference)(global::Orleans.Runtime.GrainReference.CopyGrainReference(input)));
            }
            
            [global::Orleans.CodeGeneration.SerializerMethodAttribute()]
            public static void _Serializer(object original, global::Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
            {
                PlayerTestImplReference input = ((PlayerTestImplReference)(original));
                global::Orleans.Runtime.GrainReference.SerializeGrainReference(input, stream, expected);
            }
            
            [global::Orleans.CodeGeneration.DeserializerMethodAttribute()]
            public static object _Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
            {
                return PlayerTestImplReference.Cast(((global::Orleans.Runtime.GrainReference)(global::Orleans.Runtime.GrainReference.DeserializeGrainReference(expected, stream))));
            }
            
            public override bool IsCompatible(int interfaceId)
            {
                return ((((interfaceId == this.InterfaceId) 
                            || (interfaceId == -555077417)) 
                            || (interfaceId == -1046890501)) 
                            || (interfaceId == -553992454));
            }
            
            protected override string GetMethodName(int interfaceId, int methodId)
            {
                return PlayerTestImplMethodInvoker.GetMethodName(interfaceId, methodId);
            }
            
            System.Threading.Tasks.Task<string> Server.IPlayerTest.PlayerCall()
            {

                return base.InvokeMethodAsync<System.String>(-851262471, null );
            }
            
            System.Threading.Tasks.Task<string> Server.IUnitTest.UnitCall()
            {

                return base.InvokeMethodAsync<System.String>(1519937893, null );
            }
            
            System.Threading.Tasks.Task<string> Server.IObjectTest.VirtualCall()
            {

                return base.InvokeMethodAsync<System.String>(911766124, null );
            }
            
            System.Threading.Tasks.Task<string> Server.IObjectTest.ObjectCall()
            {

                return base.InvokeMethodAsync<System.String>(-509390599, null );
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.MethodInvokerAttribute("Server.IPlayerTestImpl", 605044166)]
    internal class PlayerTestImplMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        
        int global::Orleans.CodeGeneration.IGrainMethodInvoker.InterfaceId
        {
            get
            {
                return 605044166;
            }
        }
        
        global::System.Threading.Tasks.Task<object> global::Orleans.CodeGeneration.IGrainMethodInvoker.Invoke(global::Orleans.Runtime.IAddressable grain, int interfaceId, int methodId, object[] arguments)
        {

            try
            {                    if (grain == null) throw new System.ArgumentNullException("grain");
                switch (interfaceId)
                {
                    case 605044166:  // IPlayerTestImpl
                        switch (methodId)
                        {
                            case -851262471: 
                                return ((IPlayerTestImpl)grain).PlayerCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 1519937893: 
                                return ((IPlayerTestImpl)grain).UnitCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 911766124: 
                                return ((IPlayerTestImpl)grain).VirtualCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -509390599: 
                                return ((IPlayerTestImpl)grain).ObjectCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }case -555077417:  // IPlayerTest
                        switch (methodId)
                        {
                            case -851262471: 
                                return ((IPlayerTest)grain).PlayerCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 1519937893: 
                                return ((IPlayerTest)grain).UnitCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 911766124: 
                                return ((IPlayerTest)grain).VirtualCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -509390599: 
                                return ((IPlayerTest)grain).ObjectCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }case -1046890501:  // IUnitTest
                        switch (methodId)
                        {
                            case 1519937893: 
                                return ((IUnitTest)grain).UnitCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 911766124: 
                                return ((IUnitTest)grain).VirtualCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -509390599: 
                                return ((IUnitTest)grain).ObjectCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }case -553992454:  // IObjectTest
                        switch (methodId)
                        {
                            case 911766124: 
                                return ((IObjectTest)grain).VirtualCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -509390599: 
                                return ((IObjectTest)grain).ObjectCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }
                    default:
                        throw new System.InvalidCastException("interfaceId="+interfaceId);
                }
            }
            catch(Exception ex)
            {
                var t = new System.Threading.Tasks.TaskCompletionSource<object>();
                t.SetException(ex);
                return t.Task;
            }
        }
        
        public static string GetMethodName(int interfaceId, int methodId)
        {

            switch (interfaceId)
            {
                
                case 605044166:  // IPlayerTestImpl
                    switch (methodId)
                    {
                        case -851262471:
                            return "PlayerCall";
                    case 1519937893:
                            return "UnitCall";
                    case 911766124:
                            return "VirtualCall";
                    case -509390599:
                            return "ObjectCall";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }
                case -555077417:  // IPlayerTest
                    switch (methodId)
                    {
                        case -851262471:
                            return "PlayerCall";
                    case 1519937893:
                            return "UnitCall";
                    case 911766124:
                            return "VirtualCall";
                    case -509390599:
                            return "ObjectCall";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }
                case -1046890501:  // IUnitTest
                    switch (methodId)
                    {
                        case 1519937893:
                            return "UnitCall";
                    case 911766124:
                            return "VirtualCall";
                    case -509390599:
                            return "ObjectCall";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }
                case -553992454:  // IObjectTest
                    switch (methodId)
                    {
                        case 911766124:
                            return "VirtualCall";
                    case -509390599:
                            return "ObjectCall";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }

                default:
                    throw new System.InvalidCastException("interfaceId="+interfaceId);
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class UnitTestImplFactory
    {
        

                        [System.Obsolete("This method has been deprecated. Please use GrainFactory.GetGrain<IUnitTestImpl> instead.")]
                        public static IUnitTestImpl GetGrain(long primaryKey)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(IUnitTestImpl), primaryKey));
                        }

                        [System.Obsolete("This method has been deprecated. Please use GrainFactory.GetGrain<IUnitTestImpl> instead.")]
                        public static IUnitTestImpl GetGrain(long primaryKey, string grainClassNamePrefix)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(IUnitTestImpl), primaryKey, grainClassNamePrefix));
                        }

            public static IUnitTestImpl Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return UnitTestImplReference.Cast(grainRef);
            }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
        [System.SerializableAttribute()]
        [global::Orleans.CodeGeneration.GrainReferenceAttribute("Server.IUnitTestImpl")]
        internal class UnitTestImplReference : global::Orleans.Runtime.GrainReference, global::Orleans.Runtime.IAddressable, Server.IUnitTestImpl
        {
            

            public static IUnitTestImpl Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return (IUnitTestImpl) global::Orleans.Runtime.GrainReference.CastInternal(typeof(IUnitTestImpl), (global::Orleans.Runtime.GrainReference gr) => { return new UnitTestImplReference(gr);}, grainRef, -1265355407);
            }
            
            protected internal UnitTestImplReference(global::Orleans.Runtime.GrainReference reference) : 
                    base(reference)
            {
            }
            
            protected internal UnitTestImplReference(SerializationInfo info, StreamingContext context) : 
                    base(info, context)
            {
            }
            
            protected override int InterfaceId
            {
                get
                {
                    return -1265355407;
                }
            }
            
            public override string InterfaceName
            {
                get
                {
                    return "Server.IUnitTestImpl";
                }
            }
            
            [global::Orleans.CodeGeneration.CopierMethodAttribute()]
            public static object _Copier(object original)
            {
                UnitTestImplReference input = ((UnitTestImplReference)(original));
                return ((UnitTestImplReference)(global::Orleans.Runtime.GrainReference.CopyGrainReference(input)));
            }
            
            [global::Orleans.CodeGeneration.SerializerMethodAttribute()]
            public static void _Serializer(object original, global::Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
            {
                UnitTestImplReference input = ((UnitTestImplReference)(original));
                global::Orleans.Runtime.GrainReference.SerializeGrainReference(input, stream, expected);
            }
            
            [global::Orleans.CodeGeneration.DeserializerMethodAttribute()]
            public static object _Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
            {
                return UnitTestImplReference.Cast(((global::Orleans.Runtime.GrainReference)(global::Orleans.Runtime.GrainReference.DeserializeGrainReference(expected, stream))));
            }
            
            public override bool IsCompatible(int interfaceId)
            {
                return (((interfaceId == this.InterfaceId) 
                            || (interfaceId == -1046890501)) 
                            || (interfaceId == -553992454));
            }
            
            protected override string GetMethodName(int interfaceId, int methodId)
            {
                return UnitTestImplMethodInvoker.GetMethodName(interfaceId, methodId);
            }
            
            System.Threading.Tasks.Task<string> Server.IUnitTest.UnitCall()
            {

                return base.InvokeMethodAsync<System.String>(1519937893, null );
            }
            
            System.Threading.Tasks.Task<string> Server.IObjectTest.VirtualCall()
            {

                return base.InvokeMethodAsync<System.String>(911766124, null );
            }
            
            System.Threading.Tasks.Task<string> Server.IObjectTest.ObjectCall()
            {

                return base.InvokeMethodAsync<System.String>(-509390599, null );
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.MethodInvokerAttribute("Server.IUnitTestImpl", -1265355407)]
    internal class UnitTestImplMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        
        int global::Orleans.CodeGeneration.IGrainMethodInvoker.InterfaceId
        {
            get
            {
                return -1265355407;
            }
        }
        
        global::System.Threading.Tasks.Task<object> global::Orleans.CodeGeneration.IGrainMethodInvoker.Invoke(global::Orleans.Runtime.IAddressable grain, int interfaceId, int methodId, object[] arguments)
        {

            try
            {                    if (grain == null) throw new System.ArgumentNullException("grain");
                switch (interfaceId)
                {
                    case -1265355407:  // IUnitTestImpl
                        switch (methodId)
                        {
                            case 1519937893: 
                                return ((IUnitTestImpl)grain).UnitCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 911766124: 
                                return ((IUnitTestImpl)grain).VirtualCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -509390599: 
                                return ((IUnitTestImpl)grain).ObjectCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }case -1046890501:  // IUnitTest
                        switch (methodId)
                        {
                            case 1519937893: 
                                return ((IUnitTest)grain).UnitCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 911766124: 
                                return ((IUnitTest)grain).VirtualCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -509390599: 
                                return ((IUnitTest)grain).ObjectCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }case -553992454:  // IObjectTest
                        switch (methodId)
                        {
                            case 911766124: 
                                return ((IObjectTest)grain).VirtualCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -509390599: 
                                return ((IObjectTest)grain).ObjectCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }
                    default:
                        throw new System.InvalidCastException("interfaceId="+interfaceId);
                }
            }
            catch(Exception ex)
            {
                var t = new System.Threading.Tasks.TaskCompletionSource<object>();
                t.SetException(ex);
                return t.Task;
            }
        }
        
        public static string GetMethodName(int interfaceId, int methodId)
        {

            switch (interfaceId)
            {
                
                case -1265355407:  // IUnitTestImpl
                    switch (methodId)
                    {
                        case 1519937893:
                            return "UnitCall";
                    case 911766124:
                            return "VirtualCall";
                    case -509390599:
                            return "ObjectCall";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }
                case -1046890501:  // IUnitTest
                    switch (methodId)
                    {
                        case 1519937893:
                            return "UnitCall";
                    case 911766124:
                            return "VirtualCall";
                    case -509390599:
                            return "ObjectCall";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }
                case -553992454:  // IObjectTest
                    switch (methodId)
                    {
                        case 911766124:
                            return "VirtualCall";
                    case -509390599:
                            return "ObjectCall";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }

                default:
                    throw new System.InvalidCastException("interfaceId="+interfaceId);
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class ObjectTestImplFactory
    {
        

                        [System.Obsolete("This method has been deprecated. Please use GrainFactory.GetGrain<IObjectTestImpl> instead.")]
                        public static IObjectTestImpl GetGrain(long primaryKey)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(IObjectTestImpl), primaryKey));
                        }

                        [System.Obsolete("This method has been deprecated. Please use GrainFactory.GetGrain<IObjectTestImpl> instead.")]
                        public static IObjectTestImpl GetGrain(long primaryKey, string grainClassNamePrefix)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(IObjectTestImpl), primaryKey, grainClassNamePrefix));
                        }

            public static IObjectTestImpl Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return ObjectTestImplReference.Cast(grainRef);
            }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
        [System.SerializableAttribute()]
        [global::Orleans.CodeGeneration.GrainReferenceAttribute("Server.IObjectTestImpl")]
        internal class ObjectTestImplReference : global::Orleans.Runtime.GrainReference, global::Orleans.Runtime.IAddressable, Server.IObjectTestImpl
        {
            

            public static IObjectTestImpl Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return (IObjectTestImpl) global::Orleans.Runtime.GrainReference.CastInternal(typeof(IObjectTestImpl), (global::Orleans.Runtime.GrainReference gr) => { return new ObjectTestImplReference(gr);}, grainRef, -1856410276);
            }
            
            protected internal ObjectTestImplReference(global::Orleans.Runtime.GrainReference reference) : 
                    base(reference)
            {
            }
            
            protected internal ObjectTestImplReference(SerializationInfo info, StreamingContext context) : 
                    base(info, context)
            {
            }
            
            protected override int InterfaceId
            {
                get
                {
                    return -1856410276;
                }
            }
            
            public override string InterfaceName
            {
                get
                {
                    return "Server.IObjectTestImpl";
                }
            }
            
            [global::Orleans.CodeGeneration.CopierMethodAttribute()]
            public static object _Copier(object original)
            {
                ObjectTestImplReference input = ((ObjectTestImplReference)(original));
                return ((ObjectTestImplReference)(global::Orleans.Runtime.GrainReference.CopyGrainReference(input)));
            }
            
            [global::Orleans.CodeGeneration.SerializerMethodAttribute()]
            public static void _Serializer(object original, global::Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
            {
                ObjectTestImplReference input = ((ObjectTestImplReference)(original));
                global::Orleans.Runtime.GrainReference.SerializeGrainReference(input, stream, expected);
            }
            
            [global::Orleans.CodeGeneration.DeserializerMethodAttribute()]
            public static object _Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
            {
                return ObjectTestImplReference.Cast(((global::Orleans.Runtime.GrainReference)(global::Orleans.Runtime.GrainReference.DeserializeGrainReference(expected, stream))));
            }
            
            public override bool IsCompatible(int interfaceId)
            {
                return ((interfaceId == this.InterfaceId) 
                            || (interfaceId == -553992454));
            }
            
            protected override string GetMethodName(int interfaceId, int methodId)
            {
                return ObjectTestImplMethodInvoker.GetMethodName(interfaceId, methodId);
            }
            
            System.Threading.Tasks.Task<string> Server.IObjectTest.VirtualCall()
            {

                return base.InvokeMethodAsync<System.String>(911766124, null );
            }
            
            System.Threading.Tasks.Task<string> Server.IObjectTest.ObjectCall()
            {

                return base.InvokeMethodAsync<System.String>(-509390599, null );
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.MethodInvokerAttribute("Server.IObjectTestImpl", -1856410276)]
    internal class ObjectTestImplMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        
        int global::Orleans.CodeGeneration.IGrainMethodInvoker.InterfaceId
        {
            get
            {
                return -1856410276;
            }
        }
        
        global::System.Threading.Tasks.Task<object> global::Orleans.CodeGeneration.IGrainMethodInvoker.Invoke(global::Orleans.Runtime.IAddressable grain, int interfaceId, int methodId, object[] arguments)
        {

            try
            {                    if (grain == null) throw new System.ArgumentNullException("grain");
                switch (interfaceId)
                {
                    case -1856410276:  // IObjectTestImpl
                        switch (methodId)
                        {
                            case 911766124: 
                                return ((IObjectTestImpl)grain).VirtualCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -509390599: 
                                return ((IObjectTestImpl)grain).ObjectCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }case -553992454:  // IObjectTest
                        switch (methodId)
                        {
                            case 911766124: 
                                return ((IObjectTest)grain).VirtualCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -509390599: 
                                return ((IObjectTest)grain).ObjectCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }
                    default:
                        throw new System.InvalidCastException("interfaceId="+interfaceId);
                }
            }
            catch(Exception ex)
            {
                var t = new System.Threading.Tasks.TaskCompletionSource<object>();
                t.SetException(ex);
                return t.Task;
            }
        }
        
        public static string GetMethodName(int interfaceId, int methodId)
        {

            switch (interfaceId)
            {
                
                case -1856410276:  // IObjectTestImpl
                    switch (methodId)
                    {
                        case 911766124:
                            return "VirtualCall";
                    case -509390599:
                            return "ObjectCall";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }
                case -553992454:  // IObjectTest
                    switch (methodId)
                    {
                        case 911766124:
                            return "VirtualCall";
                    case -509390599:
                            return "ObjectCall";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }

                default:
                    throw new System.InvalidCastException("interfaceId="+interfaceId);
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class AccountGrainFactory
    {
        

                        [System.Obsolete("This method has been deprecated. Please use GrainFactory.GetGrain<IAccountGrain> instead.")]
                        public static IAccountGrain GetGrain(System.String primaryKey)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(IAccountGrain), primaryKey));
                        }

                        [System.Obsolete("This method has been deprecated. Please use GrainFactory.GetGrain<IAccountGrain> instead.")]
                        public static IAccountGrain GetGrain(System.String primaryKey, string grainClassNamePrefix)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(IAccountGrain), primaryKey, grainClassNamePrefix));
                        }

            public static IAccountGrain Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return AccountGrainReference.Cast(grainRef);
            }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
        [System.SerializableAttribute()]
        [global::Orleans.CodeGeneration.GrainReferenceAttribute("Server.IAccountGrain")]
        internal class AccountGrainReference : global::Orleans.Runtime.GrainReference, global::Orleans.Runtime.IAddressable, Server.IAccountGrain
        {
            

            public static IAccountGrain Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return (IAccountGrain) global::Orleans.Runtime.GrainReference.CastInternal(typeof(IAccountGrain), (global::Orleans.Runtime.GrainReference gr) => { return new AccountGrainReference(gr);}, grainRef, -774752436);
            }
            
            protected internal AccountGrainReference(global::Orleans.Runtime.GrainReference reference) : 
                    base(reference)
            {
            }
            
            protected internal AccountGrainReference(SerializationInfo info, StreamingContext context) : 
                    base(info, context)
            {
            }
            
            protected override int InterfaceId
            {
                get
                {
                    return -774752436;
                }
            }
            
            public override string InterfaceName
            {
                get
                {
                    return "Server.IAccountGrain";
                }
            }
            
            [global::Orleans.CodeGeneration.CopierMethodAttribute()]
            public static object _Copier(object original)
            {
                AccountGrainReference input = ((AccountGrainReference)(original));
                return ((AccountGrainReference)(global::Orleans.Runtime.GrainReference.CopyGrainReference(input)));
            }
            
            [global::Orleans.CodeGeneration.SerializerMethodAttribute()]
            public static void _Serializer(object original, global::Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
            {
                AccountGrainReference input = ((AccountGrainReference)(original));
                global::Orleans.Runtime.GrainReference.SerializeGrainReference(input, stream, expected);
            }
            
            [global::Orleans.CodeGeneration.DeserializerMethodAttribute()]
            public static object _Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
            {
                return AccountGrainReference.Cast(((global::Orleans.Runtime.GrainReference)(global::Orleans.Runtime.GrainReference.DeserializeGrainReference(expected, stream))));
            }
            
            public override bool IsCompatible(int interfaceId)
            {
                return ((interfaceId == this.InterfaceId) 
                            || (interfaceId == -1277021679));
            }
            
            protected override string GetMethodName(int interfaceId, int methodId)
            {
                return AccountGrainMethodInvoker.GetMethodName(interfaceId, methodId);
            }
            
            System.Threading.Tasks.Task Server.IAccountGrain.Destroy()
            {

                return base.InvokeMethodAsync<object>(-1041284210, null );
            }
            
            System.Threading.Tasks.Task<Server.AccountAuthResponse> Server.IAccountGrain.Authenticate(string @password)
            {

                return base.InvokeMethodAsync<Server.AccountAuthResponse>(1391356785, new object[] {@password} );
            }
            
            System.Threading.Tasks.Task<Server.AccountCreateResponse> Server.IAccountGrain.CreateAccount(string @password)
            {

                return base.InvokeMethodAsync<Server.AccountCreateResponse>(-2074345984, new object[] {@password} );
            }
            
            System.Threading.Tasks.Task Server.IAccountGrain.SetPassword(string @password)
            {

                return base.InvokeMethodAsync<object>(-555567538, new object[] {@password} );
            }
            
            System.Threading.Tasks.Task<string> Server.IAccountGrain.GetPassword()
            {

                return base.InvokeMethodAsync<System.String>(-1288502433, null );
            }
            
            System.Threading.Tasks.Task<string> Server.IAccountGrain.GetPasswordPlain()
            {

                return base.InvokeMethodAsync<System.String>(-752136790, null );
            }
            
            System.Threading.Tasks.Task<bool> Server.IAccountGrain.IsValid()
            {

                return base.InvokeMethodAsync<System.Boolean>(-663875885, null );
            }
            
            System.Threading.Tasks.Task Server.IAccountGrain.AddSession(Server.ISession @s)
            {

                return base.InvokeMethodAsync<object>(309252343, new object[] {@s is global::Orleans.Grain ? @s.AsReference<Server.ISession>() : @s} );
            }
            
            System.Threading.Tasks.Task Server.IAccountGrain.RemoveSession(Server.ISession @s, bool @disconnect)
            {

                return base.InvokeMethodAsync<object>(-1423570004, new object[] {@s is global::Orleans.Grain ? @s.AsReference<Server.ISession>() : @s, @disconnect} );
            }
            
            System.Threading.Tasks.Task<Server.ISession> Server.IAccountGrain.GetAuthSession()
            {

                return base.InvokeMethodAsync<Server.ISession>(1371286109, null );
            }
            
            System.Threading.Tasks.Task<Server.ISession> Server.IAccountGrain.GetRealmSession()
            {

                return base.InvokeMethodAsync<Server.ISession>(-1106931492, null );
            }
            
            System.Threading.Tasks.Task Server.IAccountGrain.SendPacketRealm(Shared.Packet @p)
            {

                return base.InvokeMethodAsync<object>(-439758238, new object[] {@p} );
            }
            
            System.Threading.Tasks.Task Server.IAccountGrain.SendPacketAuth(Shared.Packet @p)
            {

                return base.InvokeMethodAsync<object>(663614913, new object[] {@p} );
            }
            
            System.Threading.Tasks.Task Server.IAccountGrain.SendAccountDataTimes(uint @mask)
            {

                return base.InvokeMethodAsync<object>(12719627, new object[] {@mask} );
            }
            
            System.Threading.Tasks.Task Server.IAccountGrain.UpdateAccountData(uint @id, uint @time, uint @size, byte[] @data)
            {

                return base.InvokeMethodAsync<object>(2060811694, new object[] {@id, @time, @size, @data} );
            }
            
            System.Threading.Tasks.Task Server.IAccountGrain.SendAccountData(uint @id)
            {

                return base.InvokeMethodAsync<object>(833613103, new object[] {@id} );
            }
            
            System.Threading.Tasks.Task Server.IAccountGrain.SendCharEnum()
            {

                return base.InvokeMethodAsync<object>(-1317948138, null );
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.MethodInvokerAttribute("Server.IAccountGrain", -774752436)]
    internal class AccountGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        
        int global::Orleans.CodeGeneration.IGrainMethodInvoker.InterfaceId
        {
            get
            {
                return -774752436;
            }
        }
        
        global::System.Threading.Tasks.Task<object> global::Orleans.CodeGeneration.IGrainMethodInvoker.Invoke(global::Orleans.Runtime.IAddressable grain, int interfaceId, int methodId, object[] arguments)
        {

            try
            {                    if (grain == null) throw new System.ArgumentNullException("grain");
                switch (interfaceId)
                {
                    case -774752436:  // IAccountGrain
                        switch (methodId)
                        {
                            case -1041284210: 
                                return ((IAccountGrain)grain).Destroy().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 1391356785: 
                                return ((IAccountGrain)grain).Authenticate((String)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -2074345984: 
                                return ((IAccountGrain)grain).CreateAccount((String)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -555567538: 
                                return ((IAccountGrain)grain).SetPassword((String)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -1288502433: 
                                return ((IAccountGrain)grain).GetPassword().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -752136790: 
                                return ((IAccountGrain)grain).GetPasswordPlain().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -663875885: 
                                return ((IAccountGrain)grain).IsValid().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 309252343: 
                                return ((IAccountGrain)grain).AddSession((ISession)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -1423570004: 
                                return ((IAccountGrain)grain).RemoveSession((ISession)arguments[0], (Boolean)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 1371286109: 
                                return ((IAccountGrain)grain).GetAuthSession().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1106931492: 
                                return ((IAccountGrain)grain).GetRealmSession().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -439758238: 
                                return ((IAccountGrain)grain).SendPacketRealm((Packet)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 663614913: 
                                return ((IAccountGrain)grain).SendPacketAuth((Packet)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 12719627: 
                                return ((IAccountGrain)grain).SendAccountDataTimes((UInt32)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 2060811694: 
                                return ((IAccountGrain)grain).UpdateAccountData((UInt32)arguments[0], (UInt32)arguments[1], (UInt32)arguments[2], (Byte[])arguments[3]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 833613103: 
                                return ((IAccountGrain)grain).SendAccountData((UInt32)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -1317948138: 
                                return ((IAccountGrain)grain).SendCharEnum().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }case -1277021679:  // IGrainWithStringKey
                        switch (methodId)
                        {
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }
                    default:
                        throw new System.InvalidCastException("interfaceId="+interfaceId);
                }
            }
            catch(Exception ex)
            {
                var t = new System.Threading.Tasks.TaskCompletionSource<object>();
                t.SetException(ex);
                return t.Task;
            }
        }
        
        public static string GetMethodName(int interfaceId, int methodId)
        {

            switch (interfaceId)
            {
                
                case -774752436:  // IAccountGrain
                    switch (methodId)
                    {
                        case -1041284210:
                            return "Destroy";
                    case 1391356785:
                            return "Authenticate";
                    case -2074345984:
                            return "CreateAccount";
                    case -555567538:
                            return "SetPassword";
                    case -1288502433:
                            return "GetPassword";
                    case -752136790:
                            return "GetPasswordPlain";
                    case -663875885:
                            return "IsValid";
                    case 309252343:
                            return "AddSession";
                    case -1423570004:
                            return "RemoveSession";
                    case 1371286109:
                            return "GetAuthSession";
                    case -1106931492:
                            return "GetRealmSession";
                    case -439758238:
                            return "SendPacketRealm";
                    case 663614913:
                            return "SendPacketAuth";
                    case 12719627:
                            return "SendAccountDataTimes";
                    case 2060811694:
                            return "UpdateAccountData";
                    case 833613103:
                            return "SendAccountData";
                    case -1317948138:
                            return "SendCharEnum";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }
                case -1277021679:  // IGrainWithStringKey
                    switch (methodId)
                    {
                        
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }

                default:
                    throw new System.InvalidCastException("interfaceId="+interfaceId);
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class SessionFactory
    {
        

                        [System.Obsolete("This method has been deprecated. Please use GrainFactory.GetGrain<ISession> instead.")]
                        public static ISession GetGrain(System.Guid primaryKey)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(ISession), primaryKey));
                        }

                        [System.Obsolete("This method has been deprecated. Please use GrainFactory.GetGrain<ISession> instead.")]
                        public static ISession GetGrain(System.Guid primaryKey, string grainClassNamePrefix)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(ISession), primaryKey, grainClassNamePrefix));
                        }

            public static ISession Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return SessionReference.Cast(grainRef);
            }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
        [System.SerializableAttribute()]
        [global::Orleans.CodeGeneration.GrainReferenceAttribute("Server.ISession")]
        internal class SessionReference : global::Orleans.Runtime.GrainReference, global::Orleans.Runtime.IAddressable, Server.ISession
        {
            

            public static ISession Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return (ISession) global::Orleans.Runtime.GrainReference.CastInternal(typeof(ISession), (global::Orleans.Runtime.GrainReference gr) => { return new SessionReference(gr);}, grainRef, 130958639);
            }
            
            protected internal SessionReference(global::Orleans.Runtime.GrainReference reference) : 
                    base(reference)
            {
            }
            
            protected internal SessionReference(SerializationInfo info, StreamingContext context) : 
                    base(info, context)
            {
            }
            
            protected override int InterfaceId
            {
                get
                {
                    return 130958639;
                }
            }
            
            public override string InterfaceName
            {
                get
                {
                    return "Server.ISession";
                }
            }
            
            [global::Orleans.CodeGeneration.CopierMethodAttribute()]
            public static object _Copier(object original)
            {
                SessionReference input = ((SessionReference)(original));
                return ((SessionReference)(global::Orleans.Runtime.GrainReference.CopyGrainReference(input)));
            }
            
            [global::Orleans.CodeGeneration.SerializerMethodAttribute()]
            public static void _Serializer(object original, global::Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
            {
                SessionReference input = ((SessionReference)(original));
                global::Orleans.Runtime.GrainReference.SerializeGrainReference(input, stream, expected);
            }
            
            [global::Orleans.CodeGeneration.DeserializerMethodAttribute()]
            public static object _Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
            {
                return SessionReference.Cast(((global::Orleans.Runtime.GrainReference)(global::Orleans.Runtime.GrainReference.DeserializeGrainReference(expected, stream))));
            }
            
            public override bool IsCompatible(int interfaceId)
            {
                return (interfaceId == this.InterfaceId);
            }
            
            protected override string GetMethodName(int interfaceId, int methodId)
            {
                return SessionMethodInvoker.GetMethodName(interfaceId, methodId);
            }
            
            System.Threading.Tasks.Task Server.ISession.OnLogonChallenge(Shared.AuthLogonChallenge @challenge)
            {

                return base.InvokeMethodAsync<object>(715203915, new object[] {@challenge} );
            }
            
            System.Threading.Tasks.Task Server.ISession.OnLogonProof(Shared.AuthLogonProof @proof)
            {

                return base.InvokeMethodAsync<object>(-174724446, new object[] {@proof} );
            }
            
            System.Threading.Tasks.Task Server.ISession.OnRealmList()
            {

                return base.InvokeMethodAsync<object>(105167316, null );
            }
            
            System.Threading.Tasks.Task Server.ISession.SetSessionType(Shared.SessionType @type)
            {

                return base.InvokeMethodAsync<object>(1161933625, new object[] {@type} );
            }
            
            System.Threading.Tasks.Task<Shared.SessionType> Server.ISession.GetSessionType()
            {

                return base.InvokeMethodAsync<Shared.SessionType>(343949440, null );
            }
            
            System.Threading.Tasks.Task Server.ISession.Disconnect()
            {

                return base.InvokeMethodAsync<object>(-1836674149, null );
            }
            
            System.Threading.Tasks.Task<Shared.BigInteger> Server.ISession.GetSessionKey()
            {

                return base.InvokeMethodAsync<Shared.BigInteger>(1465496855, null );
            }
            
            System.Threading.Tasks.Task Server.ISession.HandleAuthSession(Shared.CMSG_AUTH_SESSION @auth, uint @ServerSeed)
            {

                return base.InvokeMethodAsync<object>(522799231, new object[] {@auth, @ServerSeed} );
            }
            
            System.Threading.Tasks.Task Server.ISession.OnSocketDisconnect()
            {

                return base.InvokeMethodAsync<object>(-963939677, null );
            }
            
            System.Threading.Tasks.Task Server.ISession.GetSessionKeyFromAuthAccount(string @AccountName)
            {

                return base.InvokeMethodAsync<object>(-1036537128, new object[] {@AccountName} );
            }
            
            System.Threading.Tasks.Task Server.ISession.SendPacket(Shared.Packet @p)
            {

                return base.InvokeMethodAsync<object>(1045195182, new object[] {@p} );
            }
            
            System.Threading.Tasks.Task Server.ISession.HandleReadyForAccountDataTimes()
            {

                return base.InvokeMethodAsync<object>(1136236795, null );
            }
            
            System.Threading.Tasks.Task Server.ISession.HandleUpdateAccountData(uint @type, uint @time, uint @size, byte[] @data)
            {

                return base.InvokeMethodAsync<object>(857067198, new object[] {@type, @time, @size, @data} );
            }
            
            System.Threading.Tasks.Task Server.ISession.HandleRequestAccountData(uint @type)
            {

                return base.InvokeMethodAsync<object>(-1656015275, new object[] {@type} );
            }
            
            System.Threading.Tasks.Task Server.ISession.HandleCharEnum()
            {

                return base.InvokeMethodAsync<object>(-1842798826, null );
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.MethodInvokerAttribute("Server.ISession", 130958639)]
    internal class SessionMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        
        int global::Orleans.CodeGeneration.IGrainMethodInvoker.InterfaceId
        {
            get
            {
                return 130958639;
            }
        }
        
        global::System.Threading.Tasks.Task<object> global::Orleans.CodeGeneration.IGrainMethodInvoker.Invoke(global::Orleans.Runtime.IAddressable grain, int interfaceId, int methodId, object[] arguments)
        {

            try
            {                    if (grain == null) throw new System.ArgumentNullException("grain");
                switch (interfaceId)
                {
                    case 130958639:  // ISession
                        switch (methodId)
                        {
                            case 715203915: 
                                return ((ISession)grain).OnLogonChallenge((AuthLogonChallenge)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -174724446: 
                                return ((ISession)grain).OnLogonProof((AuthLogonProof)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 105167316: 
                                return ((ISession)grain).OnRealmList().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 1161933625: 
                                return ((ISession)grain).SetSessionType((SessionType)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 343949440: 
                                return ((ISession)grain).GetSessionType().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1836674149: 
                                return ((ISession)grain).Disconnect().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 1465496855: 
                                return ((ISession)grain).GetSessionKey().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 522799231: 
                                return ((ISession)grain).HandleAuthSession((CMSG_AUTH_SESSION)arguments[0], (UInt32)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -963939677: 
                                return ((ISession)grain).OnSocketDisconnect().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -1036537128: 
                                return ((ISession)grain).GetSessionKeyFromAuthAccount((String)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 1045195182: 
                                return ((ISession)grain).SendPacket((Packet)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 1136236795: 
                                return ((ISession)grain).HandleReadyForAccountDataTimes().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 857067198: 
                                return ((ISession)grain).HandleUpdateAccountData((UInt32)arguments[0], (UInt32)arguments[1], (UInt32)arguments[2], (Byte[])arguments[3]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -1656015275: 
                                return ((ISession)grain).HandleRequestAccountData((UInt32)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -1842798826: 
                                return ((ISession)grain).HandleCharEnum().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }
                    default:
                        throw new System.InvalidCastException("interfaceId="+interfaceId);
                }
            }
            catch(Exception ex)
            {
                var t = new System.Threading.Tasks.TaskCompletionSource<object>();
                t.SetException(ex);
                return t.Task;
            }
        }
        
        public static string GetMethodName(int interfaceId, int methodId)
        {

            switch (interfaceId)
            {
                
                case 130958639:  // ISession
                    switch (methodId)
                    {
                        case 715203915:
                            return "OnLogonChallenge";
                    case -174724446:
                            return "OnLogonProof";
                    case 105167316:
                            return "OnRealmList";
                    case 1161933625:
                            return "SetSessionType";
                    case 343949440:
                            return "GetSessionType";
                    case -1836674149:
                            return "Disconnect";
                    case 1465496855:
                            return "GetSessionKey";
                    case 522799231:
                            return "HandleAuthSession";
                    case -963939677:
                            return "OnSocketDisconnect";
                    case -1036537128:
                            return "GetSessionKeyFromAuthAccount";
                    case 1045195182:
                            return "SendPacket";
                    case 1136236795:
                            return "HandleReadyForAccountDataTimes";
                    case 857067198:
                            return "HandleUpdateAccountData";
                    case -1656015275:
                            return "HandleRequestAccountData";
                    case -1842798826:
                            return "HandleCharEnum";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }

                default:
                    throw new System.InvalidCastException("interfaceId="+interfaceId);
            }
        }
    }
}
namespace InterfacesSerializers
{
    using System;
    using System.Collections.Generic;
    using System.Reflection;
    using Orleans.Serialization;
    using Shared;
    using System.IO;
    using System.Net;
    using System.Runtime.Serialization;
    using System.Collections;
    using System.Runtime.InteropServices;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.RegisterSerializerAttribute()]
    internal class Shared_RealmSerialization
    {
        
        static Shared_RealmSerialization()
        {
            Register();
        }
        
        public static object DeepCopier(object original)
        {
            Shared.Realm input = ((Shared.Realm)(original));
            Shared.Realm result = new Shared.Realm();
            Orleans.Serialization.SerializationContext.Current.RecordObject(original, result);
            result.RealmSettings = ((Shared.RealmSettings)(Orleans.Serialization.SerializationManager.DeepCopyInner(input.RealmSettings)));
            result.RealmStatus = ((Shared.RealmStatus)(Orleans.Serialization.SerializationManager.DeepCopyInner(input.RealmStatus)));
            return result;
        }
        
        public static void Serializer(object untypedInput, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            Shared.Realm input = ((Shared.Realm)(untypedInput));
            Orleans.Serialization.SerializationManager.SerializeInner(input.RealmSettings, stream, typeof(Shared.RealmSettings));
            Orleans.Serialization.SerializationManager.SerializeInner(input.RealmStatus, stream, typeof(Shared.RealmStatus));
        }
        
        public static object Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            Shared.Realm result = new Shared.Realm();
            result.RealmSettings = ((Shared.RealmSettings)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(Shared.RealmSettings), stream)));
            result.RealmStatus = ((Shared.RealmStatus)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(Shared.RealmStatus), stream)));
            return result;
        }
        
        public static void Register()
        {
            global::Orleans.Serialization.SerializationManager.Register(typeof(Shared.Realm), DeepCopier, Serializer, Deserializer);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.RegisterSerializerAttribute()]
    internal class Shared_RealmStatusSerialization
    {
        
        private static System.Reflection.FieldInfo fieldInfo2;
        
        static Shared_RealmStatusSerialization()
        {
            Register();
        }
        
        public static object DeepCopier(object original)
        {
            Shared.RealmStatus input = ((Shared.RealmStatus)(original));
            Shared.RealmStatus result = new Shared.RealmStatus();
            Orleans.Serialization.SerializationContext.Current.RecordObject(original, result);
            result.CurrentPlayers = input.CurrentPlayers;
            object objResult = ((object)(result));
            object temp2 = fieldInfo2.GetValue(input);
            fieldInfo2.SetValue(objResult, temp2);
            return objResult;
        }
        
        public static void Serializer(object untypedInput, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            Shared.RealmStatus input = ((Shared.RealmStatus)(untypedInput));
            Orleans.Serialization.SerializationManager.SerializeInner(input.CurrentPlayers, stream, typeof(int));
            Orleans.Serialization.SerializationManager.SerializeInner(fieldInfo2.GetValue(input), stream, typeof(System.DateTime));
        }
        
        public static object Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            Shared.RealmStatus result = new Shared.RealmStatus();
            result.CurrentPlayers = ((int)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(int), stream)));
            object objResult = ((object)(result));
            object temp2 = ((System.DateTime)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(System.DateTime), stream)));
            fieldInfo2.SetValue(objResult, temp2);
            return objResult;
        }
        
        public static void Register()
        {
            global::Orleans.Serialization.SerializationManager.Register(typeof(Shared.RealmStatus), DeepCopier, Serializer, Deserializer);
            fieldInfo2 = typeof(Shared.RealmStatus).GetField("LastPing", (System.Reflection.BindingFlags.Instance 
                            | (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.RegisterSerializerAttribute()]
    internal class Shared_RealmSettingsSerialization
    {
        
        static Shared_RealmSettingsSerialization()
        {
            Register();
        }
        
        public static object DeepCopier(object original)
        {
            Shared.RealmSettings input = ((Shared.RealmSettings)(original));
            Shared.RealmSettings result = new Shared.RealmSettings();
            Orleans.Serialization.SerializationContext.Current.RecordObject(original, result);
            result.Address = input.Address;
            result.Cat = input.Cat;
            result.ID = input.ID;
            result.Lol = input.Lol;
            result.MaxPlayers = input.MaxPlayers;
            result.Name = input.Name;
            result.Port = input.Port;
            result.RealmID = input.RealmID;
            result.RequiredAccountLevel = input.RequiredAccountLevel;
            return result;
        }
        
        public static void Serializer(object untypedInput, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            Shared.RealmSettings input = ((Shared.RealmSettings)(untypedInput));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Address, stream, typeof(string));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Cat, stream, typeof(int));
            Orleans.Serialization.SerializationManager.SerializeInner(input.ID, stream, typeof(int));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Lol, stream, typeof(string));
            Orleans.Serialization.SerializationManager.SerializeInner(input.MaxPlayers, stream, typeof(int));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Name, stream, typeof(string));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Port, stream, typeof(ushort));
            Orleans.Serialization.SerializationManager.SerializeInner(input.RealmID, stream, typeof(int));
            Orleans.Serialization.SerializationManager.SerializeInner(input.RequiredAccountLevel, stream, typeof(int));
        }
        
        public static object Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            Shared.RealmSettings result = new Shared.RealmSettings();
            result.Address = ((string)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(string), stream)));
            result.Cat = ((int)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(int), stream)));
            result.ID = ((int)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(int), stream)));
            result.Lol = ((string)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(string), stream)));
            result.MaxPlayers = ((int)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(int), stream)));
            result.Name = ((string)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(string), stream)));
            result.Port = ((ushort)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(ushort), stream)));
            result.RealmID = ((int)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(int), stream)));
            result.RequiredAccountLevel = ((int)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(int), stream)));
            return result;
        }
        
        public static void Register()
        {
            global::Orleans.Serialization.SerializationManager.Register(typeof(Shared.RealmSettings), DeepCopier, Serializer, Deserializer);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.RegisterSerializerAttribute()]
    internal class Shared_PacketSerialization
    {
        
        private static System.Reflection.FieldInfo fieldInfo1;
        
        private static System.Reflection.FieldInfo fieldInfo2;
        
        static Shared_PacketSerialization()
        {
            Register();
        }
        
        public static object DeepCopier(object original)
        {
            Shared.Packet input = ((Shared.Packet)(original));
            Shared.Packet result = new Shared.Packet();
            Orleans.Serialization.SerializationContext.Current.RecordObject(original, result);
            object objResult = ((object)(result));
            object temp1 = ((System.IO.MemoryStream)(Orleans.Serialization.SerializationManager.DeepCopyInner(fieldInfo1.GetValue(input))));
            fieldInfo1.SetValue(objResult, temp1);
            object temp2 = fieldInfo2.GetValue(input);
            fieldInfo2.SetValue(objResult, temp2);
            return objResult;
        }
        
        public static void Serializer(object untypedInput, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            Shared.Packet input = ((Shared.Packet)(untypedInput));
            Orleans.Serialization.SerializationManager.SerializeInner(fieldInfo1.GetValue(input), stream, typeof(System.IO.MemoryStream));
            Orleans.Serialization.SerializationManager.SerializeInner(fieldInfo2.GetValue(input), stream, typeof(Shared.PacketType));
        }
        
        public static object Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            Shared.Packet result = new Shared.Packet();
            object objResult = ((object)(result));
            object temp1 = ((System.IO.MemoryStream)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(System.IO.MemoryStream), stream)));
            fieldInfo1.SetValue(objResult, temp1);
            object temp2 = ((Shared.PacketType)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(Shared.PacketType), stream)));
            fieldInfo2.SetValue(objResult, temp2);
            return objResult;
        }
        
        public static void Register()
        {
            global::Orleans.Serialization.SerializationManager.Register(typeof(Shared.Packet), DeepCopier, Serializer, Deserializer);
            fieldInfo1 = typeof(Shared.Packet).GetField("_strm", (System.Reflection.BindingFlags.Instance 
                            | (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)));
            fieldInfo2 = typeof(Shared.Packet).GetField("type", (System.Reflection.BindingFlags.Instance 
                            | (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.RegisterSerializerAttribute()]
    internal class Shared_AuthLogonChallengeSerialization
    {
        
        static Shared_AuthLogonChallengeSerialization()
        {
            Register();
        }
        
        public static object DeepCopier(object original)
        {
            Shared.AuthLogonChallenge input = ((Shared.AuthLogonChallenge)(original));
            Shared.AuthLogonChallenge result = default(Shared.AuthLogonChallenge);
            Orleans.Serialization.SerializationContext.Current.RecordObject(original, result);
            result.account = input.account;
            result.category = input.category;
            result.client = input.client;
            result.client_build = input.client_build;
            result.client_major = input.client_major;
            result.client_minor = input.client_minor;
            result.client_revision = input.client_revision;
            result.ipaddr = ((System.Net.IPAddress)(Orleans.Serialization.SerializationManager.DeepCopyInner(input.ipaddr)));
            result.locale = input.locale;
            result.os = input.os;
            result.processor = input.processor;
            return result;
        }
        
        public static void Serializer(object untypedInput, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            Shared.AuthLogonChallenge input = ((Shared.AuthLogonChallenge)(untypedInput));
            Orleans.Serialization.SerializationManager.SerializeInner(input.account, stream, typeof(string));
            Orleans.Serialization.SerializationManager.SerializeInner(input.category, stream, typeof(int));
            Orleans.Serialization.SerializationManager.SerializeInner(input.client, stream, typeof(string));
            Orleans.Serialization.SerializationManager.SerializeInner(input.client_build, stream, typeof(ushort));
            Orleans.Serialization.SerializationManager.SerializeInner(input.client_major, stream, typeof(byte));
            Orleans.Serialization.SerializationManager.SerializeInner(input.client_minor, stream, typeof(byte));
            Orleans.Serialization.SerializationManager.SerializeInner(input.client_revision, stream, typeof(byte));
            Orleans.Serialization.SerializationManager.SerializeInner(input.ipaddr, stream, typeof(System.Net.IPAddress));
            Orleans.Serialization.SerializationManager.SerializeInner(input.locale, stream, typeof(string));
            Orleans.Serialization.SerializationManager.SerializeInner(input.os, stream, typeof(string));
            Orleans.Serialization.SerializationManager.SerializeInner(input.processor, stream, typeof(string));
        }
        
        public static object Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            Shared.AuthLogonChallenge result = default(Shared.AuthLogonChallenge);
            result.account = ((string)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(string), stream)));
            result.category = ((int)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(int), stream)));
            result.client = ((string)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(string), stream)));
            result.client_build = ((ushort)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(ushort), stream)));
            result.client_major = ((byte)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(byte), stream)));
            result.client_minor = ((byte)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(byte), stream)));
            result.client_revision = ((byte)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(byte), stream)));
            result.ipaddr = ((System.Net.IPAddress)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(System.Net.IPAddress), stream)));
            result.locale = ((string)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(string), stream)));
            result.os = ((string)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(string), stream)));
            result.processor = ((string)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(string), stream)));
            return result;
        }
        
        public static void Register()
        {
            global::Orleans.Serialization.SerializationManager.Register(typeof(Shared.AuthLogonChallenge), DeepCopier, Serializer, Deserializer);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.RegisterSerializerAttribute()]
    internal class Shared_AuthLogonProofSerialization
    {
        
        static Shared_AuthLogonProofSerialization()
        {
            Register();
        }
        
        public static object DeepCopier(object original)
        {
            Shared.AuthLogonProof input = ((Shared.AuthLogonProof)(original));
            Shared.AuthLogonProof result = default(Shared.AuthLogonProof);
            Orleans.Serialization.SerializationContext.Current.RecordObject(original, result);
            result.A = ((byte[])(Orleans.Serialization.SerializationManager.DeepCopyInner(input.A)));
            result.M1 = ((byte[])(Orleans.Serialization.SerializationManager.DeepCopyInner(input.M1)));
            result.crchash = ((byte[])(Orleans.Serialization.SerializationManager.DeepCopyInner(input.crchash)));
            result.number_of_keys = input.number_of_keys;
            result.unk = input.unk;
            return result;
        }
        
        public static void Serializer(object untypedInput, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            Shared.AuthLogonProof input = ((Shared.AuthLogonProof)(untypedInput));
            Orleans.Serialization.SerializationManager.SerializeInner(input.A, stream, typeof(byte[]));
            Orleans.Serialization.SerializationManager.SerializeInner(input.M1, stream, typeof(byte[]));
            Orleans.Serialization.SerializationManager.SerializeInner(input.crchash, stream, typeof(byte[]));
            Orleans.Serialization.SerializationManager.SerializeInner(input.number_of_keys, stream, typeof(byte));
            Orleans.Serialization.SerializationManager.SerializeInner(input.unk, stream, typeof(byte));
        }
        
        public static object Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            Shared.AuthLogonProof result = default(Shared.AuthLogonProof);
            result.A = ((byte[])(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(byte[]), stream)));
            result.M1 = ((byte[])(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(byte[]), stream)));
            result.crchash = ((byte[])(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(byte[]), stream)));
            result.number_of_keys = ((byte)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(byte), stream)));
            result.unk = ((byte)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(byte), stream)));
            return result;
        }
        
        public static void Register()
        {
            global::Orleans.Serialization.SerializationManager.Register(typeof(Shared.AuthLogonProof), DeepCopier, Serializer, Deserializer);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.RegisterSerializerAttribute()]
    internal class Shared_BigIntegerSerialization
    {
        
        private static System.Reflection.FieldInfo fieldInfo1;
        
        private static System.Reflection.FieldInfo fieldInfo2;
        
        private static System.Reflection.FieldInfo fieldInfo3;
        
        static Shared_BigIntegerSerialization()
        {
            Register();
        }
        
        public static object DeepCopier(object original)
        {
            Shared.BigInteger input = ((Shared.BigInteger)(original));
            Shared.BigInteger result = new Shared.BigInteger();
            Orleans.Serialization.SerializationContext.Current.RecordObject(original, result);
            object objResult = ((object)(result));
            object temp1 = ((uint[])(Orleans.Serialization.SerializationManager.DeepCopyInner(fieldInfo1.GetValue(input))));
            fieldInfo1.SetValue(objResult, temp1);
            object temp2 = input.dataLength;
            fieldInfo2.SetValue(objResult, temp2);
            object temp3 = ((System.Runtime.Serialization.SerializationInfo)(Orleans.Serialization.SerializationManager.DeepCopyInner(fieldInfo3.GetValue(input))));
            fieldInfo3.SetValue(objResult, temp3);
            return objResult;
        }
        
        public static void Serializer(object untypedInput, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            Shared.BigInteger input = ((Shared.BigInteger)(untypedInput));
            Orleans.Serialization.SerializationManager.SerializeInner(fieldInfo1.GetValue(input), stream, typeof(uint[]));
            Orleans.Serialization.SerializationManager.SerializeInner(input.dataLength, stream, typeof(int));
            Orleans.Serialization.SerializationManager.SerializeInner(fieldInfo3.GetValue(input), stream, typeof(System.Runtime.Serialization.SerializationInfo));
        }
        
        public static object Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            Shared.BigInteger result = new Shared.BigInteger();
            object objResult = ((object)(result));
            object temp1 = ((uint[])(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(uint[]), stream)));
            fieldInfo1.SetValue(objResult, temp1);
            object temp2 = ((int)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(int), stream)));
            fieldInfo2.SetValue(objResult, temp2);
            object temp3 = ((System.Runtime.Serialization.SerializationInfo)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(System.Runtime.Serialization.SerializationInfo), stream)));
            fieldInfo3.SetValue(objResult, temp3);
            return objResult;
        }
        
        public static void Register()
        {
            global::Orleans.Serialization.SerializationManager.Register(typeof(Shared.BigInteger), DeepCopier, Serializer, Deserializer);
            fieldInfo1 = typeof(Shared.BigInteger).GetField("data", (System.Reflection.BindingFlags.Instance 
                            | (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)));
            fieldInfo2 = typeof(Shared.BigInteger).GetField("dataLength", (System.Reflection.BindingFlags.Instance 
                            | (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)));
            fieldInfo3 = typeof(Shared.BigInteger).GetField("info", (System.Reflection.BindingFlags.Instance 
                            | (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.RegisterSerializerAttribute()]
    internal class Shared_CMSG_AUTH_SESSIONSerialization
    {
        
        static Shared_CMSG_AUTH_SESSIONSerialization()
        {
            Register();
        }
        
        public static object DeepCopier(object original)
        {
            Shared.CMSG_AUTH_SESSION input = ((Shared.CMSG_AUTH_SESSION)(original));
            Shared.CMSG_AUTH_SESSION result = default(Shared.CMSG_AUTH_SESSION);
            Orleans.Serialization.SerializationContext.Current.RecordObject(original, result);
            result.Account = input.Account;
            result.AddonData = ((byte[])(Orleans.Serialization.SerializationManager.DeepCopyInner(input.AddonData)));
            result.Build = input.Build;
            result.Digest = ((Shared.BigInteger)(Orleans.Serialization.SerializationManager.DeepCopyInner(input.Digest)));
            result.Seed = input.Seed;
            return result;
        }
        
        public static void Serializer(object untypedInput, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            Shared.CMSG_AUTH_SESSION input = ((Shared.CMSG_AUTH_SESSION)(untypedInput));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Account, stream, typeof(string));
            Orleans.Serialization.SerializationManager.SerializeInner(input.AddonData, stream, typeof(byte[]));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Build, stream, typeof(uint));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Digest, stream, typeof(Shared.BigInteger));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Seed, stream, typeof(uint));
        }
        
        public static object Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            Shared.CMSG_AUTH_SESSION result = default(Shared.CMSG_AUTH_SESSION);
            result.Account = ((string)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(string), stream)));
            result.AddonData = ((byte[])(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(byte[]), stream)));
            result.Build = ((uint)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(uint), stream)));
            result.Digest = ((Shared.BigInteger)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(Shared.BigInteger), stream)));
            result.Seed = ((uint)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(uint), stream)));
            return result;
        }
        
        public static void Register()
        {
            global::Orleans.Serialization.SerializationManager.Register(typeof(Shared.CMSG_AUTH_SESSION), DeepCopier, Serializer, Deserializer);
        }
    }
}
#pragma warning restore 162
#pragma warning restore 219
#pragma warning restore 414
#pragma warning restore 649
#pragma warning restore 693
#pragma warning restore 1591
#pragma warning restore 1998
#endif
