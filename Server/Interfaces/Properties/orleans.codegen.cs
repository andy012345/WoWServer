//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#if !EXCLUDE_CODEGEN
#pragma warning disable 162
#pragma warning disable 219
#pragma warning disable 414
#pragma warning disable 649
#pragma warning disable 693
#pragma warning disable 1591
#pragma warning disable 1998

namespace Server
{
    using System;
    using System.Net;
    using System.Runtime.Serialization;
    using System.Runtime.Serialization.Formatters.Binary;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using Orleans.Serialization;
    using Server;
    using Orleans;
    using Orleans.Runtime;
    using Orleans.Core;
    using System.Collections;
    using Shared;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class DataStoreManagerFactory
    {
        

                        [System.Obsolete("This method has been deprecated. Please use GrainFactory.GetGrain<IDataStoreManager> instead.")]
                        public static IDataStoreManager GetGrain(long primaryKey)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(IDataStoreManager), primaryKey));
                        }

                        [System.Obsolete("This method has been deprecated. Please use GrainFactory.GetGrain<IDataStoreManager> instead.")]
                        public static IDataStoreManager GetGrain(long primaryKey, string grainClassNamePrefix)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(IDataStoreManager), primaryKey, grainClassNamePrefix));
                        }

            public static IDataStoreManager Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return DataStoreManagerReference.Cast(grainRef);
            }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
        [System.SerializableAttribute()]
        [global::Orleans.CodeGeneration.GrainReferenceAttribute("Server.IDataStoreManager")]
        internal class DataStoreManagerReference : global::Orleans.Runtime.GrainReference, global::Orleans.Runtime.IAddressable, Server.IDataStoreManager
        {
            

            public static IDataStoreManager Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return (IDataStoreManager) global::Orleans.Runtime.GrainReference.CastInternal(typeof(IDataStoreManager), (global::Orleans.Runtime.GrainReference gr) => { return new DataStoreManagerReference(gr);}, grainRef, -2116077755);
            }
            
            protected internal DataStoreManagerReference(global::Orleans.Runtime.GrainReference reference) : 
                    base(reference)
            {
            }
            
            protected internal DataStoreManagerReference(SerializationInfo info, StreamingContext context) : 
                    base(info, context)
            {
            }
            
            protected override int InterfaceId
            {
                get
                {
                    return -2116077755;
                }
            }
            
            public override string InterfaceName
            {
                get
                {
                    return "Server.IDataStoreManager";
                }
            }
            
            [global::Orleans.CodeGeneration.CopierMethodAttribute()]
            public static object _Copier(object original)
            {
                DataStoreManagerReference input = ((DataStoreManagerReference)(original));
                return ((DataStoreManagerReference)(global::Orleans.Runtime.GrainReference.CopyGrainReference(input)));
            }
            
            [global::Orleans.CodeGeneration.SerializerMethodAttribute()]
            public static void _Serializer(object original, global::Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
            {
                DataStoreManagerReference input = ((DataStoreManagerReference)(original));
                global::Orleans.Runtime.GrainReference.SerializeGrainReference(input, stream, expected);
            }
            
            [global::Orleans.CodeGeneration.DeserializerMethodAttribute()]
            public static object _Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
            {
                return DataStoreManagerReference.Cast(((global::Orleans.Runtime.GrainReference)(global::Orleans.Runtime.GrainReference.DeserializeGrainReference(expected, stream))));
            }
            
            public override bool IsCompatible(int interfaceId)
            {
                return (interfaceId == this.InterfaceId);
            }
            
            protected override string GetMethodName(int interfaceId, int methodId)
            {
                return DataStoreManagerMethodInvoker.GetMethodName(interfaceId, methodId);
            }
            
            System.Threading.Tasks.Task<string> Server.IDataStoreManager.GetConnectionString()
            {

                return base.InvokeMethodAsync<System.String>(-1601724582, null );
            }
            
            System.Threading.Tasks.Task<Shared.PlayerCreateInfo> Server.IDataStoreManager.GetPlayerCreateInfo(uint @Class, uint @Race)
            {

                return base.InvokeMethodAsync<Shared.PlayerCreateInfo>(-511591145, new object[] {@Class, @Race} );
            }
            
            System.Threading.Tasks.Task<Server.ChrClasses> Server.IDataStoreManager.GetChrClasses(uint @Class)
            {

                return base.InvokeMethodAsync<Server.ChrClasses>(1387734599, new object[] {@Class} );
            }
            
            System.Threading.Tasks.Task<Server.ChrRaces> Server.IDataStoreManager.GetChrRaces(uint @Race)
            {

                return base.InvokeMethodAsync<Server.ChrRaces>(1590344148, new object[] {@Race} );
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.MethodInvokerAttribute("Server.IDataStoreManager", -2116077755)]
    internal class DataStoreManagerMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        
        int global::Orleans.CodeGeneration.IGrainMethodInvoker.InterfaceId
        {
            get
            {
                return -2116077755;
            }
        }
        
        global::System.Threading.Tasks.Task<object> global::Orleans.CodeGeneration.IGrainMethodInvoker.Invoke(global::Orleans.Runtime.IAddressable grain, int interfaceId, int methodId, object[] arguments)
        {

            try
            {                    if (grain == null) throw new System.ArgumentNullException("grain");
                switch (interfaceId)
                {
                    case -2116077755:  // IDataStoreManager
                        switch (methodId)
                        {
                            case -1601724582: 
                                return ((IDataStoreManager)grain).GetConnectionString().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -511591145: 
                                return ((IDataStoreManager)grain).GetPlayerCreateInfo((UInt32)arguments[0], (UInt32)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 1387734599: 
                                return ((IDataStoreManager)grain).GetChrClasses((UInt32)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 1590344148: 
                                return ((IDataStoreManager)grain).GetChrRaces((UInt32)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }
                    default:
                        throw new System.InvalidCastException("interfaceId="+interfaceId);
                }
            }
            catch(Exception ex)
            {
                var t = new System.Threading.Tasks.TaskCompletionSource<object>();
                t.SetException(ex);
                return t.Task;
            }
        }
        
        public static string GetMethodName(int interfaceId, int methodId)
        {

            switch (interfaceId)
            {
                
                case -2116077755:  // IDataStoreManager
                    switch (methodId)
                    {
                        case -1601724582:
                            return "GetConnectionString";
                    case -511591145:
                            return "GetPlayerCreateInfo";
                    case 1387734599:
                            return "GetChrClasses";
                    case 1590344148:
                            return "GetChrRaces";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }

                default:
                    throw new System.InvalidCastException("interfaceId="+interfaceId);
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class PlayerByNameIndexFactory
    {
        

                        [System.Obsolete("This method has been deprecated. Please use GrainFactory.GetGrain<IPlayerByNameIndex> instead.")]
                        public static IPlayerByNameIndex GetGrain(System.String primaryKey)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(IPlayerByNameIndex), primaryKey));
                        }

                        [System.Obsolete("This method has been deprecated. Please use GrainFactory.GetGrain<IPlayerByNameIndex> instead.")]
                        public static IPlayerByNameIndex GetGrain(System.String primaryKey, string grainClassNamePrefix)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(IPlayerByNameIndex), primaryKey, grainClassNamePrefix));
                        }

            public static IPlayerByNameIndex Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return PlayerByNameIndexReference.Cast(grainRef);
            }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
        [System.SerializableAttribute()]
        [global::Orleans.CodeGeneration.GrainReferenceAttribute("Server.IPlayerByNameIndex")]
        internal class PlayerByNameIndexReference : global::Orleans.Runtime.GrainReference, global::Orleans.Runtime.IAddressable, Server.IPlayerByNameIndex
        {
            

            public static IPlayerByNameIndex Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return (IPlayerByNameIndex) global::Orleans.Runtime.GrainReference.CastInternal(typeof(IPlayerByNameIndex), (global::Orleans.Runtime.GrainReference gr) => { return new PlayerByNameIndexReference(gr);}, grainRef, -410311541);
            }
            
            protected internal PlayerByNameIndexReference(global::Orleans.Runtime.GrainReference reference) : 
                    base(reference)
            {
            }
            
            protected internal PlayerByNameIndexReference(SerializationInfo info, StreamingContext context) : 
                    base(info, context)
            {
            }
            
            protected override int InterfaceId
            {
                get
                {
                    return -410311541;
                }
            }
            
            public override string InterfaceName
            {
                get
                {
                    return "Server.IPlayerByNameIndex";
                }
            }
            
            [global::Orleans.CodeGeneration.CopierMethodAttribute()]
            public static object _Copier(object original)
            {
                PlayerByNameIndexReference input = ((PlayerByNameIndexReference)(original));
                return ((PlayerByNameIndexReference)(global::Orleans.Runtime.GrainReference.CopyGrainReference(input)));
            }
            
            [global::Orleans.CodeGeneration.SerializerMethodAttribute()]
            public static void _Serializer(object original, global::Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
            {
                PlayerByNameIndexReference input = ((PlayerByNameIndexReference)(original));
                global::Orleans.Runtime.GrainReference.SerializeGrainReference(input, stream, expected);
            }
            
            [global::Orleans.CodeGeneration.DeserializerMethodAttribute()]
            public static object _Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
            {
                return PlayerByNameIndexReference.Cast(((global::Orleans.Runtime.GrainReference)(global::Orleans.Runtime.GrainReference.DeserializeGrainReference(expected, stream))));
            }
            
            public override bool IsCompatible(int interfaceId)
            {
                return ((interfaceId == this.InterfaceId) 
                            || (interfaceId == -1277021679));
            }
            
            protected override string GetMethodName(int interfaceId, int methodId)
            {
                return PlayerByNameIndexMethodInvoker.GetMethodName(interfaceId, methodId);
            }
            
            System.Threading.Tasks.Task<bool> Server.IPlayerByNameIndex.SetPlayer(Server.IPlayer @plr)
            {

                return base.InvokeMethodAsync<System.Boolean>(970804849, new object[] {@plr is global::Orleans.Grain ? @plr.AsReference<Server.IPlayer>() : @plr} );
            }
            
            System.Threading.Tasks.Task<Shared.ObjectGUID> Server.IPlayerByNameIndex.GetPlayerGUID()
            {

                return base.InvokeMethodAsync<Shared.ObjectGUID>(-574949896, null );
            }
            
            System.Threading.Tasks.Task<Server.IPlayer> Server.IPlayerByNameIndex.GetPlayer()
            {

                return base.InvokeMethodAsync<Server.IPlayer>(880552289, null );
            }
            
            System.Threading.Tasks.Task Server.IPlayerByNameIndex.Save()
            {

                return base.InvokeMethodAsync<object>(-1038277770, null );
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.MethodInvokerAttribute("Server.IPlayerByNameIndex", -410311541)]
    internal class PlayerByNameIndexMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        
        int global::Orleans.CodeGeneration.IGrainMethodInvoker.InterfaceId
        {
            get
            {
                return -410311541;
            }
        }
        
        global::System.Threading.Tasks.Task<object> global::Orleans.CodeGeneration.IGrainMethodInvoker.Invoke(global::Orleans.Runtime.IAddressable grain, int interfaceId, int methodId, object[] arguments)
        {

            try
            {                    if (grain == null) throw new System.ArgumentNullException("grain");
                switch (interfaceId)
                {
                    case -410311541:  // IPlayerByNameIndex
                        switch (methodId)
                        {
                            case 970804849: 
                                return ((IPlayerByNameIndex)grain).SetPlayer((IPlayer)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -574949896: 
                                return ((IPlayerByNameIndex)grain).GetPlayerGUID().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 880552289: 
                                return ((IPlayerByNameIndex)grain).GetPlayer().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1038277770: 
                                return ((IPlayerByNameIndex)grain).Save().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }case -1277021679:  // IGrainWithStringKey
                        switch (methodId)
                        {
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }
                    default:
                        throw new System.InvalidCastException("interfaceId="+interfaceId);
                }
            }
            catch(Exception ex)
            {
                var t = new System.Threading.Tasks.TaskCompletionSource<object>();
                t.SetException(ex);
                return t.Task;
            }
        }
        
        public static string GetMethodName(int interfaceId, int methodId)
        {

            switch (interfaceId)
            {
                
                case -410311541:  // IPlayerByNameIndex
                    switch (methodId)
                    {
                        case 970804849:
                            return "SetPlayer";
                    case -574949896:
                            return "GetPlayerGUID";
                    case 880552289:
                            return "GetPlayer";
                    case -1038277770:
                            return "Save";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }
                case -1277021679:  // IGrainWithStringKey
                    switch (methodId)
                    {
                        
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }

                default:
                    throw new System.InvalidCastException("interfaceId="+interfaceId);
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class BaseObjectImplFactory
    {
        

                        [System.Obsolete("This method has been deprecated. Please use GrainFactory.GetGrain<IBaseObjectImpl> instead.")]
                        public static IBaseObjectImpl GetGrain(long primaryKey)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(IBaseObjectImpl), primaryKey));
                        }

                        [System.Obsolete("This method has been deprecated. Please use GrainFactory.GetGrain<IBaseObjectImpl> instead.")]
                        public static IBaseObjectImpl GetGrain(long primaryKey, string grainClassNamePrefix)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(IBaseObjectImpl), primaryKey, grainClassNamePrefix));
                        }

            public static IBaseObjectImpl Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return BaseObjectImplReference.Cast(grainRef);
            }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
        [System.SerializableAttribute()]
        [global::Orleans.CodeGeneration.GrainReferenceAttribute("Server.IBaseObjectImpl")]
        internal class BaseObjectImplReference : global::Orleans.Runtime.GrainReference, global::Orleans.Runtime.IAddressable, Server.IBaseObjectImpl
        {
            

            public static IBaseObjectImpl Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return (IBaseObjectImpl) global::Orleans.Runtime.GrainReference.CastInternal(typeof(IBaseObjectImpl), (global::Orleans.Runtime.GrainReference gr) => { return new BaseObjectImplReference(gr);}, grainRef, 436426678);
            }
            
            protected internal BaseObjectImplReference(global::Orleans.Runtime.GrainReference reference) : 
                    base(reference)
            {
            }
            
            protected internal BaseObjectImplReference(SerializationInfo info, StreamingContext context) : 
                    base(info, context)
            {
            }
            
            protected override int InterfaceId
            {
                get
                {
                    return 436426678;
                }
            }
            
            public override string InterfaceName
            {
                get
                {
                    return "Server.IBaseObjectImpl";
                }
            }
            
            [global::Orleans.CodeGeneration.CopierMethodAttribute()]
            public static object _Copier(object original)
            {
                BaseObjectImplReference input = ((BaseObjectImplReference)(original));
                return ((BaseObjectImplReference)(global::Orleans.Runtime.GrainReference.CopyGrainReference(input)));
            }
            
            [global::Orleans.CodeGeneration.SerializerMethodAttribute()]
            public static void _Serializer(object original, global::Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
            {
                BaseObjectImplReference input = ((BaseObjectImplReference)(original));
                global::Orleans.Runtime.GrainReference.SerializeGrainReference(input, stream, expected);
            }
            
            [global::Orleans.CodeGeneration.DeserializerMethodAttribute()]
            public static object _Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
            {
                return BaseObjectImplReference.Cast(((global::Orleans.Runtime.GrainReference)(global::Orleans.Runtime.GrainReference.DeserializeGrainReference(expected, stream))));
            }
            
            public override bool IsCompatible(int interfaceId)
            {
                return (interfaceId == this.InterfaceId);
            }
            
            protected override string GetMethodName(int interfaceId, int methodId)
            {
                return BaseObjectImplMethodInvoker.GetMethodName(interfaceId, methodId);
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.MethodInvokerAttribute("Server.IBaseObjectImpl", 436426678)]
    internal class BaseObjectImplMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        
        int global::Orleans.CodeGeneration.IGrainMethodInvoker.InterfaceId
        {
            get
            {
                return 436426678;
            }
        }
        
        global::System.Threading.Tasks.Task<object> global::Orleans.CodeGeneration.IGrainMethodInvoker.Invoke(global::Orleans.Runtime.IAddressable grain, int interfaceId, int methodId, object[] arguments)
        {

            try
            {                    if (grain == null) throw new System.ArgumentNullException("grain");
                switch (interfaceId)
                {
                    case 436426678:  // IBaseObjectImpl
                        switch (methodId)
                        {
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }
                    default:
                        throw new System.InvalidCastException("interfaceId="+interfaceId);
                }
            }
            catch(Exception ex)
            {
                var t = new System.Threading.Tasks.TaskCompletionSource<object>();
                t.SetException(ex);
                return t.Task;
            }
        }
        
        public static string GetMethodName(int interfaceId, int methodId)
        {

            switch (interfaceId)
            {
                
                case 436426678:  // IBaseObjectImpl
                    switch (methodId)
                    {
                        
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }

                default:
                    throw new System.InvalidCastException("interfaceId="+interfaceId);
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class ObjectImplFactory
    {
        

                        [System.Obsolete("This method has been deprecated. Please use GrainFactory.GetGrain<IObjectImpl> instead.")]
                        public static IObjectImpl GetGrain(long primaryKey)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(IObjectImpl), primaryKey));
                        }

                        [System.Obsolete("This method has been deprecated. Please use GrainFactory.GetGrain<IObjectImpl> instead.")]
                        public static IObjectImpl GetGrain(long primaryKey, string grainClassNamePrefix)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(IObjectImpl), primaryKey, grainClassNamePrefix));
                        }

            public static IObjectImpl Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return ObjectImplReference.Cast(grainRef);
            }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
        [System.SerializableAttribute()]
        [global::Orleans.CodeGeneration.GrainReferenceAttribute("Server.IObjectImpl")]
        internal class ObjectImplReference : global::Orleans.Runtime.GrainReference, global::Orleans.Runtime.IAddressable, Server.IObjectImpl
        {
            

            public static IObjectImpl Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return (IObjectImpl) global::Orleans.Runtime.GrainReference.CastInternal(typeof(IObjectImpl), (global::Orleans.Runtime.GrainReference gr) => { return new ObjectImplReference(gr);}, grainRef, 1962518542);
            }
            
            protected internal ObjectImplReference(global::Orleans.Runtime.GrainReference reference) : 
                    base(reference)
            {
            }
            
            protected internal ObjectImplReference(SerializationInfo info, StreamingContext context) : 
                    base(info, context)
            {
            }
            
            protected override int InterfaceId
            {
                get
                {
                    return 1962518542;
                }
            }
            
            public override string InterfaceName
            {
                get
                {
                    return "Server.IObjectImpl";
                }
            }
            
            [global::Orleans.CodeGeneration.CopierMethodAttribute()]
            public static object _Copier(object original)
            {
                ObjectImplReference input = ((ObjectImplReference)(original));
                return ((ObjectImplReference)(global::Orleans.Runtime.GrainReference.CopyGrainReference(input)));
            }
            
            [global::Orleans.CodeGeneration.SerializerMethodAttribute()]
            public static void _Serializer(object original, global::Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
            {
                ObjectImplReference input = ((ObjectImplReference)(original));
                global::Orleans.Runtime.GrainReference.SerializeGrainReference(input, stream, expected);
            }
            
            [global::Orleans.CodeGeneration.DeserializerMethodAttribute()]
            public static object _Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
            {
                return ObjectImplReference.Cast(((global::Orleans.Runtime.GrainReference)(global::Orleans.Runtime.GrainReference.DeserializeGrainReference(expected, stream))));
            }
            
            public override bool IsCompatible(int interfaceId)
            {
                return ((interfaceId == this.InterfaceId) 
                            || (interfaceId == 436426678));
            }
            
            protected override string GetMethodName(int interfaceId, int methodId)
            {
                return ObjectImplMethodInvoker.GetMethodName(interfaceId, methodId);
            }
            
            System.Threading.Tasks.Task<string> Server.IObjectImpl.VirtualCall()
            {

                return base.InvokeMethodAsync<System.String>(911766124, null );
            }
            
            System.Threading.Tasks.Task<string> Server.IObjectImpl.ObjectCall()
            {

                return base.InvokeMethodAsync<System.String>(-509390599, null );
            }
            
            System.Threading.Tasks.Task Server.IObjectImpl.Save()
            {

                return base.InvokeMethodAsync<object>(-1038277770, null );
            }
            
            System.Threading.Tasks.Task<Shared.ObjectGUID> Server.IObjectImpl.GetGUID()
            {

                return base.InvokeMethodAsync<Shared.ObjectGUID>(-1893154936, null );
            }
            
            System.Threading.Tasks.Task<byte> Server.IObjectImpl.GetByte(int @field, int @index)
            {

                return base.InvokeMethodAsync<System.Byte>(194300607, new object[] {@field, @index} );
            }
            
            System.Threading.Tasks.Task<uint> Server.IObjectImpl.GetUInt32(int @field)
            {

                return base.InvokeMethodAsync<System.UInt32>(-1305326038, new object[] {@field} );
            }
            
            System.Threading.Tasks.Task<float> Server.IObjectImpl.GetFloat(uint @field)
            {

                return base.InvokeMethodAsync<System.Single>(-1053963025, new object[] {@field} );
            }
            
            System.Threading.Tasks.Task Server.IObjectImpl.SetByte(int @field, int @index, byte @val)
            {

                return base.InvokeMethodAsync<object>(-1778927808, new object[] {@field, @index, @val} );
            }
            
            System.Threading.Tasks.Task Server.IObjectImpl.SetUInt32(int @field, uint @val)
            {

                return base.InvokeMethodAsync<object>(-890930237, new object[] {@field, @val} );
            }
            
            System.Threading.Tasks.Task Server.IObjectImpl.SetInt32(int @field, int @val)
            {

                return base.InvokeMethodAsync<object>(-1920519729, new object[] {@field, @val} );
            }
            
            System.Threading.Tasks.Task Server.IObjectImpl.SetFloat(int @field, float @val)
            {

                return base.InvokeMethodAsync<object>(1703182622, new object[] {@field, @val} );
            }
            
            System.Threading.Tasks.Task Server.IObjectImpl.SetUInt64(int @field, ulong @val)
            {

                return base.InvokeMethodAsync<object>(-2061902484, new object[] {@field, @val} );
            }
            
            System.Threading.Tasks.Task Server.IObjectImpl.SetGUID(int @field, Shared.ObjectGUID @val)
            {

                return base.InvokeMethodAsync<object>(-140687627, new object[] {@field, @val} );
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.MethodInvokerAttribute("Server.IObjectImpl", 1962518542)]
    internal class ObjectImplMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        
        int global::Orleans.CodeGeneration.IGrainMethodInvoker.InterfaceId
        {
            get
            {
                return 1962518542;
            }
        }
        
        global::System.Threading.Tasks.Task<object> global::Orleans.CodeGeneration.IGrainMethodInvoker.Invoke(global::Orleans.Runtime.IAddressable grain, int interfaceId, int methodId, object[] arguments)
        {

            try
            {                    if (grain == null) throw new System.ArgumentNullException("grain");
                switch (interfaceId)
                {
                    case 1962518542:  // IObjectImpl
                        switch (methodId)
                        {
                            case 911766124: 
                                return ((IObjectImpl)grain).VirtualCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -509390599: 
                                return ((IObjectImpl)grain).ObjectCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1038277770: 
                                return ((IObjectImpl)grain).Save().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -1893154936: 
                                return ((IObjectImpl)grain).GetGUID().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 194300607: 
                                return ((IObjectImpl)grain).GetByte((Int32)arguments[0], (Int32)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1305326038: 
                                return ((IObjectImpl)grain).GetUInt32((Int32)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1053963025: 
                                return ((IObjectImpl)grain).GetFloat((UInt32)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1778927808: 
                                return ((IObjectImpl)grain).SetByte((Int32)arguments[0], (Int32)arguments[1], (Byte)arguments[2]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -890930237: 
                                return ((IObjectImpl)grain).SetUInt32((Int32)arguments[0], (UInt32)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -1920519729: 
                                return ((IObjectImpl)grain).SetInt32((Int32)arguments[0], (Int32)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 1703182622: 
                                return ((IObjectImpl)grain).SetFloat((Int32)arguments[0], (Single)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -2061902484: 
                                return ((IObjectImpl)grain).SetUInt64((Int32)arguments[0], (UInt64)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -140687627: 
                                return ((IObjectImpl)grain).SetGUID((Int32)arguments[0], (ObjectGUID)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }case 436426678:  // IBaseObjectImpl
                        switch (methodId)
                        {
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }
                    default:
                        throw new System.InvalidCastException("interfaceId="+interfaceId);
                }
            }
            catch(Exception ex)
            {
                var t = new System.Threading.Tasks.TaskCompletionSource<object>();
                t.SetException(ex);
                return t.Task;
            }
        }
        
        public static string GetMethodName(int interfaceId, int methodId)
        {

            switch (interfaceId)
            {
                
                case 1962518542:  // IObjectImpl
                    switch (methodId)
                    {
                        case 911766124:
                            return "VirtualCall";
                    case -509390599:
                            return "ObjectCall";
                    case -1038277770:
                            return "Save";
                    case -1893154936:
                            return "GetGUID";
                    case 194300607:
                            return "GetByte";
                    case -1305326038:
                            return "GetUInt32";
                    case -1053963025:
                            return "GetFloat";
                    case -1778927808:
                            return "SetByte";
                    case -890930237:
                            return "SetUInt32";
                    case -1920519729:
                            return "SetInt32";
                    case 1703182622:
                            return "SetFloat";
                    case -2061902484:
                            return "SetUInt64";
                    case -140687627:
                            return "SetGUID";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }
                case 436426678:  // IBaseObjectImpl
                    switch (methodId)
                    {
                        
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }

                default:
                    throw new System.InvalidCastException("interfaceId="+interfaceId);
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class UnitImplFactory
    {
        

                        [System.Obsolete("This method has been deprecated. Please use GrainFactory.GetGrain<IUnitImpl> instead.")]
                        public static IUnitImpl GetGrain(long primaryKey)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(IUnitImpl), primaryKey));
                        }

                        [System.Obsolete("This method has been deprecated. Please use GrainFactory.GetGrain<IUnitImpl> instead.")]
                        public static IUnitImpl GetGrain(long primaryKey, string grainClassNamePrefix)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(IUnitImpl), primaryKey, grainClassNamePrefix));
                        }

            public static IUnitImpl Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return UnitImplReference.Cast(grainRef);
            }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
        [System.SerializableAttribute()]
        [global::Orleans.CodeGeneration.GrainReferenceAttribute("Server.IUnitImpl")]
        internal class UnitImplReference : global::Orleans.Runtime.GrainReference, global::Orleans.Runtime.IAddressable, Server.IUnitImpl
        {
            

            public static IUnitImpl Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return (IUnitImpl) global::Orleans.Runtime.GrainReference.CastInternal(typeof(IUnitImpl), (global::Orleans.Runtime.GrainReference gr) => { return new UnitImplReference(gr);}, grainRef, -459325194);
            }
            
            protected internal UnitImplReference(global::Orleans.Runtime.GrainReference reference) : 
                    base(reference)
            {
            }
            
            protected internal UnitImplReference(SerializationInfo info, StreamingContext context) : 
                    base(info, context)
            {
            }
            
            protected override int InterfaceId
            {
                get
                {
                    return -459325194;
                }
            }
            
            public override string InterfaceName
            {
                get
                {
                    return "Server.IUnitImpl";
                }
            }
            
            [global::Orleans.CodeGeneration.CopierMethodAttribute()]
            public static object _Copier(object original)
            {
                UnitImplReference input = ((UnitImplReference)(original));
                return ((UnitImplReference)(global::Orleans.Runtime.GrainReference.CopyGrainReference(input)));
            }
            
            [global::Orleans.CodeGeneration.SerializerMethodAttribute()]
            public static void _Serializer(object original, global::Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
            {
                UnitImplReference input = ((UnitImplReference)(original));
                global::Orleans.Runtime.GrainReference.SerializeGrainReference(input, stream, expected);
            }
            
            [global::Orleans.CodeGeneration.DeserializerMethodAttribute()]
            public static object _Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
            {
                return UnitImplReference.Cast(((global::Orleans.Runtime.GrainReference)(global::Orleans.Runtime.GrainReference.DeserializeGrainReference(expected, stream))));
            }
            
            public override bool IsCompatible(int interfaceId)
            {
                return (((interfaceId == this.InterfaceId) 
                            || (interfaceId == 1962518542)) 
                            || (interfaceId == 436426678));
            }
            
            protected override string GetMethodName(int interfaceId, int methodId)
            {
                return UnitImplMethodInvoker.GetMethodName(interfaceId, methodId);
            }
            
            System.Threading.Tasks.Task<string> Server.IUnitImpl.UnitCall()
            {

                return base.InvokeMethodAsync<System.String>(1519937893, null );
            }
            
            System.Threading.Tasks.Task<string> Server.IObjectImpl.VirtualCall()
            {

                return base.InvokeMethodAsync<System.String>(911766124, null );
            }
            
            System.Threading.Tasks.Task<string> Server.IObjectImpl.ObjectCall()
            {

                return base.InvokeMethodAsync<System.String>(-509390599, null );
            }
            
            System.Threading.Tasks.Task Server.IObjectImpl.Save()
            {

                return base.InvokeMethodAsync<object>(-1038277770, null );
            }
            
            System.Threading.Tasks.Task<Shared.ObjectGUID> Server.IObjectImpl.GetGUID()
            {

                return base.InvokeMethodAsync<Shared.ObjectGUID>(-1893154936, null );
            }
            
            System.Threading.Tasks.Task<byte> Server.IObjectImpl.GetByte(int @field, int @index)
            {

                return base.InvokeMethodAsync<System.Byte>(194300607, new object[] {@field, @index} );
            }
            
            System.Threading.Tasks.Task<uint> Server.IObjectImpl.GetUInt32(int @field)
            {

                return base.InvokeMethodAsync<System.UInt32>(-1305326038, new object[] {@field} );
            }
            
            System.Threading.Tasks.Task<float> Server.IObjectImpl.GetFloat(uint @field)
            {

                return base.InvokeMethodAsync<System.Single>(-1053963025, new object[] {@field} );
            }
            
            System.Threading.Tasks.Task Server.IObjectImpl.SetByte(int @field, int @index, byte @val)
            {

                return base.InvokeMethodAsync<object>(-1778927808, new object[] {@field, @index, @val} );
            }
            
            System.Threading.Tasks.Task Server.IObjectImpl.SetUInt32(int @field, uint @val)
            {

                return base.InvokeMethodAsync<object>(-890930237, new object[] {@field, @val} );
            }
            
            System.Threading.Tasks.Task Server.IObjectImpl.SetInt32(int @field, int @val)
            {

                return base.InvokeMethodAsync<object>(-1920519729, new object[] {@field, @val} );
            }
            
            System.Threading.Tasks.Task Server.IObjectImpl.SetFloat(int @field, float @val)
            {

                return base.InvokeMethodAsync<object>(1703182622, new object[] {@field, @val} );
            }
            
            System.Threading.Tasks.Task Server.IObjectImpl.SetUInt64(int @field, ulong @val)
            {

                return base.InvokeMethodAsync<object>(-2061902484, new object[] {@field, @val} );
            }
            
            System.Threading.Tasks.Task Server.IObjectImpl.SetGUID(int @field, Shared.ObjectGUID @val)
            {

                return base.InvokeMethodAsync<object>(-140687627, new object[] {@field, @val} );
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.MethodInvokerAttribute("Server.IUnitImpl", -459325194)]
    internal class UnitImplMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        
        int global::Orleans.CodeGeneration.IGrainMethodInvoker.InterfaceId
        {
            get
            {
                return -459325194;
            }
        }
        
        global::System.Threading.Tasks.Task<object> global::Orleans.CodeGeneration.IGrainMethodInvoker.Invoke(global::Orleans.Runtime.IAddressable grain, int interfaceId, int methodId, object[] arguments)
        {

            try
            {                    if (grain == null) throw new System.ArgumentNullException("grain");
                switch (interfaceId)
                {
                    case -459325194:  // IUnitImpl
                        switch (methodId)
                        {
                            case 1519937893: 
                                return ((IUnitImpl)grain).UnitCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 911766124: 
                                return ((IUnitImpl)grain).VirtualCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -509390599: 
                                return ((IUnitImpl)grain).ObjectCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1038277770: 
                                return ((IUnitImpl)grain).Save().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -1893154936: 
                                return ((IUnitImpl)grain).GetGUID().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 194300607: 
                                return ((IUnitImpl)grain).GetByte((Int32)arguments[0], (Int32)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1305326038: 
                                return ((IUnitImpl)grain).GetUInt32((Int32)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1053963025: 
                                return ((IUnitImpl)grain).GetFloat((UInt32)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1778927808: 
                                return ((IUnitImpl)grain).SetByte((Int32)arguments[0], (Int32)arguments[1], (Byte)arguments[2]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -890930237: 
                                return ((IUnitImpl)grain).SetUInt32((Int32)arguments[0], (UInt32)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -1920519729: 
                                return ((IUnitImpl)grain).SetInt32((Int32)arguments[0], (Int32)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 1703182622: 
                                return ((IUnitImpl)grain).SetFloat((Int32)arguments[0], (Single)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -2061902484: 
                                return ((IUnitImpl)grain).SetUInt64((Int32)arguments[0], (UInt64)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -140687627: 
                                return ((IUnitImpl)grain).SetGUID((Int32)arguments[0], (ObjectGUID)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }case 1962518542:  // IObjectImpl
                        switch (methodId)
                        {
                            case 911766124: 
                                return ((IObjectImpl)grain).VirtualCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -509390599: 
                                return ((IObjectImpl)grain).ObjectCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1038277770: 
                                return ((IObjectImpl)grain).Save().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -1893154936: 
                                return ((IObjectImpl)grain).GetGUID().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 194300607: 
                                return ((IObjectImpl)grain).GetByte((Int32)arguments[0], (Int32)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1305326038: 
                                return ((IObjectImpl)grain).GetUInt32((Int32)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1053963025: 
                                return ((IObjectImpl)grain).GetFloat((UInt32)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1778927808: 
                                return ((IObjectImpl)grain).SetByte((Int32)arguments[0], (Int32)arguments[1], (Byte)arguments[2]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -890930237: 
                                return ((IObjectImpl)grain).SetUInt32((Int32)arguments[0], (UInt32)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -1920519729: 
                                return ((IObjectImpl)grain).SetInt32((Int32)arguments[0], (Int32)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 1703182622: 
                                return ((IObjectImpl)grain).SetFloat((Int32)arguments[0], (Single)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -2061902484: 
                                return ((IObjectImpl)grain).SetUInt64((Int32)arguments[0], (UInt64)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -140687627: 
                                return ((IObjectImpl)grain).SetGUID((Int32)arguments[0], (ObjectGUID)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }case 436426678:  // IBaseObjectImpl
                        switch (methodId)
                        {
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }
                    default:
                        throw new System.InvalidCastException("interfaceId="+interfaceId);
                }
            }
            catch(Exception ex)
            {
                var t = new System.Threading.Tasks.TaskCompletionSource<object>();
                t.SetException(ex);
                return t.Task;
            }
        }
        
        public static string GetMethodName(int interfaceId, int methodId)
        {

            switch (interfaceId)
            {
                
                case -459325194:  // IUnitImpl
                    switch (methodId)
                    {
                        case 1519937893:
                            return "UnitCall";
                    case 911766124:
                            return "VirtualCall";
                    case -509390599:
                            return "ObjectCall";
                    case -1038277770:
                            return "Save";
                    case -1893154936:
                            return "GetGUID";
                    case 194300607:
                            return "GetByte";
                    case -1305326038:
                            return "GetUInt32";
                    case -1053963025:
                            return "GetFloat";
                    case -1778927808:
                            return "SetByte";
                    case -890930237:
                            return "SetUInt32";
                    case -1920519729:
                            return "SetInt32";
                    case 1703182622:
                            return "SetFloat";
                    case -2061902484:
                            return "SetUInt64";
                    case -140687627:
                            return "SetGUID";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }
                case 1962518542:  // IObjectImpl
                    switch (methodId)
                    {
                        case 911766124:
                            return "VirtualCall";
                    case -509390599:
                            return "ObjectCall";
                    case -1038277770:
                            return "Save";
                    case -1893154936:
                            return "GetGUID";
                    case 194300607:
                            return "GetByte";
                    case -1305326038:
                            return "GetUInt32";
                    case -1053963025:
                            return "GetFloat";
                    case -1778927808:
                            return "SetByte";
                    case -890930237:
                            return "SetUInt32";
                    case -1920519729:
                            return "SetInt32";
                    case 1703182622:
                            return "SetFloat";
                    case -2061902484:
                            return "SetUInt64";
                    case -140687627:
                            return "SetGUID";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }
                case 436426678:  // IBaseObjectImpl
                    switch (methodId)
                    {
                        
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }

                default:
                    throw new System.InvalidCastException("interfaceId="+interfaceId);
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class PlayerImplFactory
    {
        

                        [System.Obsolete("This method has been deprecated. Please use GrainFactory.GetGrain<IPlayerImpl> instead.")]
                        public static IPlayerImpl GetGrain(long primaryKey)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(IPlayerImpl), primaryKey));
                        }

                        [System.Obsolete("This method has been deprecated. Please use GrainFactory.GetGrain<IPlayerImpl> instead.")]
                        public static IPlayerImpl GetGrain(long primaryKey, string grainClassNamePrefix)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(IPlayerImpl), primaryKey, grainClassNamePrefix));
                        }

            public static IPlayerImpl Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return PlayerImplReference.Cast(grainRef);
            }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
        [System.SerializableAttribute()]
        [global::Orleans.CodeGeneration.GrainReferenceAttribute("Server.IPlayerImpl")]
        internal class PlayerImplReference : global::Orleans.Runtime.GrainReference, global::Orleans.Runtime.IAddressable, Server.IPlayerImpl
        {
            

            public static IPlayerImpl Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return (IPlayerImpl) global::Orleans.Runtime.GrainReference.CastInternal(typeof(IPlayerImpl), (global::Orleans.Runtime.GrainReference gr) => { return new PlayerImplReference(gr);}, grainRef, 1374563470);
            }
            
            protected internal PlayerImplReference(global::Orleans.Runtime.GrainReference reference) : 
                    base(reference)
            {
            }
            
            protected internal PlayerImplReference(SerializationInfo info, StreamingContext context) : 
                    base(info, context)
            {
            }
            
            protected override int InterfaceId
            {
                get
                {
                    return 1374563470;
                }
            }
            
            public override string InterfaceName
            {
                get
                {
                    return "Server.IPlayerImpl";
                }
            }
            
            [global::Orleans.CodeGeneration.CopierMethodAttribute()]
            public static object _Copier(object original)
            {
                PlayerImplReference input = ((PlayerImplReference)(original));
                return ((PlayerImplReference)(global::Orleans.Runtime.GrainReference.CopyGrainReference(input)));
            }
            
            [global::Orleans.CodeGeneration.SerializerMethodAttribute()]
            public static void _Serializer(object original, global::Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
            {
                PlayerImplReference input = ((PlayerImplReference)(original));
                global::Orleans.Runtime.GrainReference.SerializeGrainReference(input, stream, expected);
            }
            
            [global::Orleans.CodeGeneration.DeserializerMethodAttribute()]
            public static object _Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
            {
                return PlayerImplReference.Cast(((global::Orleans.Runtime.GrainReference)(global::Orleans.Runtime.GrainReference.DeserializeGrainReference(expected, stream))));
            }
            
            public override bool IsCompatible(int interfaceId)
            {
                return ((((interfaceId == this.InterfaceId) 
                            || (interfaceId == -459325194)) 
                            || (interfaceId == 1962518542)) 
                            || (interfaceId == 436426678));
            }
            
            protected override string GetMethodName(int interfaceId, int methodId)
            {
                return PlayerImplMethodInvoker.GetMethodName(interfaceId, methodId);
            }
            
            System.Threading.Tasks.Task<string> Server.IPlayerImpl.PlayerCall()
            {

                return base.InvokeMethodAsync<System.String>(-851262471, null );
            }
            
            System.Threading.Tasks.Task Server.IPlayerImpl.Create(Shared.CMSG_CHAR_CREATE @creationData)
            {

                return base.InvokeMethodAsync<object>(-1038877739, new object[] {@creationData} );
            }
            
            System.Threading.Tasks.Task<string> Server.IUnitImpl.UnitCall()
            {

                return base.InvokeMethodAsync<System.String>(1519937893, null );
            }
            
            System.Threading.Tasks.Task<string> Server.IObjectImpl.VirtualCall()
            {

                return base.InvokeMethodAsync<System.String>(911766124, null );
            }
            
            System.Threading.Tasks.Task<string> Server.IObjectImpl.ObjectCall()
            {

                return base.InvokeMethodAsync<System.String>(-509390599, null );
            }
            
            System.Threading.Tasks.Task Server.IObjectImpl.Save()
            {

                return base.InvokeMethodAsync<object>(-1038277770, null );
            }
            
            System.Threading.Tasks.Task<Shared.ObjectGUID> Server.IObjectImpl.GetGUID()
            {

                return base.InvokeMethodAsync<Shared.ObjectGUID>(-1893154936, null );
            }
            
            System.Threading.Tasks.Task<byte> Server.IObjectImpl.GetByte(int @field, int @index)
            {

                return base.InvokeMethodAsync<System.Byte>(194300607, new object[] {@field, @index} );
            }
            
            System.Threading.Tasks.Task<uint> Server.IObjectImpl.GetUInt32(int @field)
            {

                return base.InvokeMethodAsync<System.UInt32>(-1305326038, new object[] {@field} );
            }
            
            System.Threading.Tasks.Task<float> Server.IObjectImpl.GetFloat(uint @field)
            {

                return base.InvokeMethodAsync<System.Single>(-1053963025, new object[] {@field} );
            }
            
            System.Threading.Tasks.Task Server.IObjectImpl.SetByte(int @field, int @index, byte @val)
            {

                return base.InvokeMethodAsync<object>(-1778927808, new object[] {@field, @index, @val} );
            }
            
            System.Threading.Tasks.Task Server.IObjectImpl.SetUInt32(int @field, uint @val)
            {

                return base.InvokeMethodAsync<object>(-890930237, new object[] {@field, @val} );
            }
            
            System.Threading.Tasks.Task Server.IObjectImpl.SetInt32(int @field, int @val)
            {

                return base.InvokeMethodAsync<object>(-1920519729, new object[] {@field, @val} );
            }
            
            System.Threading.Tasks.Task Server.IObjectImpl.SetFloat(int @field, float @val)
            {

                return base.InvokeMethodAsync<object>(1703182622, new object[] {@field, @val} );
            }
            
            System.Threading.Tasks.Task Server.IObjectImpl.SetUInt64(int @field, ulong @val)
            {

                return base.InvokeMethodAsync<object>(-2061902484, new object[] {@field, @val} );
            }
            
            System.Threading.Tasks.Task Server.IObjectImpl.SetGUID(int @field, Shared.ObjectGUID @val)
            {

                return base.InvokeMethodAsync<object>(-140687627, new object[] {@field, @val} );
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.MethodInvokerAttribute("Server.IPlayerImpl", 1374563470)]
    internal class PlayerImplMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        
        int global::Orleans.CodeGeneration.IGrainMethodInvoker.InterfaceId
        {
            get
            {
                return 1374563470;
            }
        }
        
        global::System.Threading.Tasks.Task<object> global::Orleans.CodeGeneration.IGrainMethodInvoker.Invoke(global::Orleans.Runtime.IAddressable grain, int interfaceId, int methodId, object[] arguments)
        {

            try
            {                    if (grain == null) throw new System.ArgumentNullException("grain");
                switch (interfaceId)
                {
                    case 1374563470:  // IPlayerImpl
                        switch (methodId)
                        {
                            case -851262471: 
                                return ((IPlayerImpl)grain).PlayerCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1038877739: 
                                return ((IPlayerImpl)grain).Create((CMSG_CHAR_CREATE)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 1519937893: 
                                return ((IPlayerImpl)grain).UnitCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 911766124: 
                                return ((IPlayerImpl)grain).VirtualCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -509390599: 
                                return ((IPlayerImpl)grain).ObjectCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1038277770: 
                                return ((IPlayerImpl)grain).Save().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -1893154936: 
                                return ((IPlayerImpl)grain).GetGUID().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 194300607: 
                                return ((IPlayerImpl)grain).GetByte((Int32)arguments[0], (Int32)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1305326038: 
                                return ((IPlayerImpl)grain).GetUInt32((Int32)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1053963025: 
                                return ((IPlayerImpl)grain).GetFloat((UInt32)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1778927808: 
                                return ((IPlayerImpl)grain).SetByte((Int32)arguments[0], (Int32)arguments[1], (Byte)arguments[2]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -890930237: 
                                return ((IPlayerImpl)grain).SetUInt32((Int32)arguments[0], (UInt32)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -1920519729: 
                                return ((IPlayerImpl)grain).SetInt32((Int32)arguments[0], (Int32)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 1703182622: 
                                return ((IPlayerImpl)grain).SetFloat((Int32)arguments[0], (Single)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -2061902484: 
                                return ((IPlayerImpl)grain).SetUInt64((Int32)arguments[0], (UInt64)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -140687627: 
                                return ((IPlayerImpl)grain).SetGUID((Int32)arguments[0], (ObjectGUID)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }case -459325194:  // IUnitImpl
                        switch (methodId)
                        {
                            case 1519937893: 
                                return ((IUnitImpl)grain).UnitCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 911766124: 
                                return ((IUnitImpl)grain).VirtualCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -509390599: 
                                return ((IUnitImpl)grain).ObjectCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1038277770: 
                                return ((IUnitImpl)grain).Save().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -1893154936: 
                                return ((IUnitImpl)grain).GetGUID().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 194300607: 
                                return ((IUnitImpl)grain).GetByte((Int32)arguments[0], (Int32)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1305326038: 
                                return ((IUnitImpl)grain).GetUInt32((Int32)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1053963025: 
                                return ((IUnitImpl)grain).GetFloat((UInt32)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1778927808: 
                                return ((IUnitImpl)grain).SetByte((Int32)arguments[0], (Int32)arguments[1], (Byte)arguments[2]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -890930237: 
                                return ((IUnitImpl)grain).SetUInt32((Int32)arguments[0], (UInt32)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -1920519729: 
                                return ((IUnitImpl)grain).SetInt32((Int32)arguments[0], (Int32)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 1703182622: 
                                return ((IUnitImpl)grain).SetFloat((Int32)arguments[0], (Single)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -2061902484: 
                                return ((IUnitImpl)grain).SetUInt64((Int32)arguments[0], (UInt64)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -140687627: 
                                return ((IUnitImpl)grain).SetGUID((Int32)arguments[0], (ObjectGUID)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }case 1962518542:  // IObjectImpl
                        switch (methodId)
                        {
                            case 911766124: 
                                return ((IObjectImpl)grain).VirtualCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -509390599: 
                                return ((IObjectImpl)grain).ObjectCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1038277770: 
                                return ((IObjectImpl)grain).Save().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -1893154936: 
                                return ((IObjectImpl)grain).GetGUID().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 194300607: 
                                return ((IObjectImpl)grain).GetByte((Int32)arguments[0], (Int32)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1305326038: 
                                return ((IObjectImpl)grain).GetUInt32((Int32)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1053963025: 
                                return ((IObjectImpl)grain).GetFloat((UInt32)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1778927808: 
                                return ((IObjectImpl)grain).SetByte((Int32)arguments[0], (Int32)arguments[1], (Byte)arguments[2]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -890930237: 
                                return ((IObjectImpl)grain).SetUInt32((Int32)arguments[0], (UInt32)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -1920519729: 
                                return ((IObjectImpl)grain).SetInt32((Int32)arguments[0], (Int32)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 1703182622: 
                                return ((IObjectImpl)grain).SetFloat((Int32)arguments[0], (Single)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -2061902484: 
                                return ((IObjectImpl)grain).SetUInt64((Int32)arguments[0], (UInt64)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -140687627: 
                                return ((IObjectImpl)grain).SetGUID((Int32)arguments[0], (ObjectGUID)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }case 436426678:  // IBaseObjectImpl
                        switch (methodId)
                        {
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }
                    default:
                        throw new System.InvalidCastException("interfaceId="+interfaceId);
                }
            }
            catch(Exception ex)
            {
                var t = new System.Threading.Tasks.TaskCompletionSource<object>();
                t.SetException(ex);
                return t.Task;
            }
        }
        
        public static string GetMethodName(int interfaceId, int methodId)
        {

            switch (interfaceId)
            {
                
                case 1374563470:  // IPlayerImpl
                    switch (methodId)
                    {
                        case -851262471:
                            return "PlayerCall";
                    case -1038877739:
                            return "Create";
                    case 1519937893:
                            return "UnitCall";
                    case 911766124:
                            return "VirtualCall";
                    case -509390599:
                            return "ObjectCall";
                    case -1038277770:
                            return "Save";
                    case -1893154936:
                            return "GetGUID";
                    case 194300607:
                            return "GetByte";
                    case -1305326038:
                            return "GetUInt32";
                    case -1053963025:
                            return "GetFloat";
                    case -1778927808:
                            return "SetByte";
                    case -890930237:
                            return "SetUInt32";
                    case -1920519729:
                            return "SetInt32";
                    case 1703182622:
                            return "SetFloat";
                    case -2061902484:
                            return "SetUInt64";
                    case -140687627:
                            return "SetGUID";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }
                case -459325194:  // IUnitImpl
                    switch (methodId)
                    {
                        case 1519937893:
                            return "UnitCall";
                    case 911766124:
                            return "VirtualCall";
                    case -509390599:
                            return "ObjectCall";
                    case -1038277770:
                            return "Save";
                    case -1893154936:
                            return "GetGUID";
                    case 194300607:
                            return "GetByte";
                    case -1305326038:
                            return "GetUInt32";
                    case -1053963025:
                            return "GetFloat";
                    case -1778927808:
                            return "SetByte";
                    case -890930237:
                            return "SetUInt32";
                    case -1920519729:
                            return "SetInt32";
                    case 1703182622:
                            return "SetFloat";
                    case -2061902484:
                            return "SetUInt64";
                    case -140687627:
                            return "SetGUID";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }
                case 1962518542:  // IObjectImpl
                    switch (methodId)
                    {
                        case 911766124:
                            return "VirtualCall";
                    case -509390599:
                            return "ObjectCall";
                    case -1038277770:
                            return "Save";
                    case -1893154936:
                            return "GetGUID";
                    case 194300607:
                            return "GetByte";
                    case -1305326038:
                            return "GetUInt32";
                    case -1053963025:
                            return "GetFloat";
                    case -1778927808:
                            return "SetByte";
                    case -890930237:
                            return "SetUInt32";
                    case -1920519729:
                            return "SetInt32";
                    case 1703182622:
                            return "SetFloat";
                    case -2061902484:
                            return "SetUInt64";
                    case -140687627:
                            return "SetGUID";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }
                case 436426678:  // IBaseObjectImpl
                    switch (methodId)
                    {
                        
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }

                default:
                    throw new System.InvalidCastException("interfaceId="+interfaceId);
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class PlayerFactory
    {
        

                        [System.Obsolete("This method has been deprecated. Please use GrainFactory.GetGrain<IPlayer> instead.")]
                        public static IPlayer GetGrain(long primaryKey)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(IPlayer), primaryKey));
                        }

                        [System.Obsolete("This method has been deprecated. Please use GrainFactory.GetGrain<IPlayer> instead.")]
                        public static IPlayer GetGrain(long primaryKey, string grainClassNamePrefix)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(IPlayer), primaryKey, grainClassNamePrefix));
                        }

            public static IPlayer Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return PlayerReference.Cast(grainRef);
            }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
        [System.SerializableAttribute()]
        [global::Orleans.CodeGeneration.GrainReferenceAttribute("Server.IPlayer")]
        internal class PlayerReference : global::Orleans.Runtime.GrainReference, global::Orleans.Runtime.IAddressable, Server.IPlayer
        {
            

            public static IPlayer Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return (IPlayer) global::Orleans.Runtime.GrainReference.CastInternal(typeof(IPlayer), (global::Orleans.Runtime.GrainReference gr) => { return new PlayerReference(gr);}, grainRef, -1840646871);
            }
            
            protected internal PlayerReference(global::Orleans.Runtime.GrainReference reference) : 
                    base(reference)
            {
            }
            
            protected internal PlayerReference(SerializationInfo info, StreamingContext context) : 
                    base(info, context)
            {
            }
            
            protected override int InterfaceId
            {
                get
                {
                    return -1840646871;
                }
            }
            
            public override string InterfaceName
            {
                get
                {
                    return "Server.IPlayer";
                }
            }
            
            [global::Orleans.CodeGeneration.CopierMethodAttribute()]
            public static object _Copier(object original)
            {
                PlayerReference input = ((PlayerReference)(original));
                return ((PlayerReference)(global::Orleans.Runtime.GrainReference.CopyGrainReference(input)));
            }
            
            [global::Orleans.CodeGeneration.SerializerMethodAttribute()]
            public static void _Serializer(object original, global::Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
            {
                PlayerReference input = ((PlayerReference)(original));
                global::Orleans.Runtime.GrainReference.SerializeGrainReference(input, stream, expected);
            }
            
            [global::Orleans.CodeGeneration.DeserializerMethodAttribute()]
            public static object _Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
            {
                return PlayerReference.Cast(((global::Orleans.Runtime.GrainReference)(global::Orleans.Runtime.GrainReference.DeserializeGrainReference(expected, stream))));
            }
            
            public override bool IsCompatible(int interfaceId)
            {
                return (((((interfaceId == this.InterfaceId) 
                            || (interfaceId == 1374563470)) 
                            || (interfaceId == -459325194)) 
                            || (interfaceId == 1962518542)) 
                            || (interfaceId == 436426678));
            }
            
            protected override string GetMethodName(int interfaceId, int methodId)
            {
                return PlayerMethodInvoker.GetMethodName(interfaceId, methodId);
            }
            
            System.Threading.Tasks.Task<string> Server.IPlayerImpl.PlayerCall()
            {

                return base.InvokeMethodAsync<System.String>(-851262471, null );
            }
            
            System.Threading.Tasks.Task Server.IPlayerImpl.Create(Shared.CMSG_CHAR_CREATE @creationData)
            {

                return base.InvokeMethodAsync<object>(-1038877739, new object[] {@creationData} );
            }
            
            System.Threading.Tasks.Task<string> Server.IUnitImpl.UnitCall()
            {

                return base.InvokeMethodAsync<System.String>(1519937893, null );
            }
            
            System.Threading.Tasks.Task<string> Server.IObjectImpl.VirtualCall()
            {

                return base.InvokeMethodAsync<System.String>(911766124, null );
            }
            
            System.Threading.Tasks.Task<string> Server.IObjectImpl.ObjectCall()
            {

                return base.InvokeMethodAsync<System.String>(-509390599, null );
            }
            
            System.Threading.Tasks.Task Server.IObjectImpl.Save()
            {

                return base.InvokeMethodAsync<object>(-1038277770, null );
            }
            
            System.Threading.Tasks.Task<Shared.ObjectGUID> Server.IObjectImpl.GetGUID()
            {

                return base.InvokeMethodAsync<Shared.ObjectGUID>(-1893154936, null );
            }
            
            System.Threading.Tasks.Task<byte> Server.IObjectImpl.GetByte(int @field, int @index)
            {

                return base.InvokeMethodAsync<System.Byte>(194300607, new object[] {@field, @index} );
            }
            
            System.Threading.Tasks.Task<uint> Server.IObjectImpl.GetUInt32(int @field)
            {

                return base.InvokeMethodAsync<System.UInt32>(-1305326038, new object[] {@field} );
            }
            
            System.Threading.Tasks.Task<float> Server.IObjectImpl.GetFloat(uint @field)
            {

                return base.InvokeMethodAsync<System.Single>(-1053963025, new object[] {@field} );
            }
            
            System.Threading.Tasks.Task Server.IObjectImpl.SetByte(int @field, int @index, byte @val)
            {

                return base.InvokeMethodAsync<object>(-1778927808, new object[] {@field, @index, @val} );
            }
            
            System.Threading.Tasks.Task Server.IObjectImpl.SetUInt32(int @field, uint @val)
            {

                return base.InvokeMethodAsync<object>(-890930237, new object[] {@field, @val} );
            }
            
            System.Threading.Tasks.Task Server.IObjectImpl.SetInt32(int @field, int @val)
            {

                return base.InvokeMethodAsync<object>(-1920519729, new object[] {@field, @val} );
            }
            
            System.Threading.Tasks.Task Server.IObjectImpl.SetFloat(int @field, float @val)
            {

                return base.InvokeMethodAsync<object>(1703182622, new object[] {@field, @val} );
            }
            
            System.Threading.Tasks.Task Server.IObjectImpl.SetUInt64(int @field, ulong @val)
            {

                return base.InvokeMethodAsync<object>(-2061902484, new object[] {@field, @val} );
            }
            
            System.Threading.Tasks.Task Server.IObjectImpl.SetGUID(int @field, Shared.ObjectGUID @val)
            {

                return base.InvokeMethodAsync<object>(-140687627, new object[] {@field, @val} );
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.MethodInvokerAttribute("Server.IPlayer", -1840646871)]
    internal class PlayerMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        
        int global::Orleans.CodeGeneration.IGrainMethodInvoker.InterfaceId
        {
            get
            {
                return -1840646871;
            }
        }
        
        global::System.Threading.Tasks.Task<object> global::Orleans.CodeGeneration.IGrainMethodInvoker.Invoke(global::Orleans.Runtime.IAddressable grain, int interfaceId, int methodId, object[] arguments)
        {

            try
            {                    if (grain == null) throw new System.ArgumentNullException("grain");
                switch (interfaceId)
                {
                    case -1840646871:  // IPlayer
                        switch (methodId)
                        {
                            case -851262471: 
                                return ((IPlayer)grain).PlayerCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1038877739: 
                                return ((IPlayer)grain).Create((CMSG_CHAR_CREATE)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 1519937893: 
                                return ((IPlayer)grain).UnitCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 911766124: 
                                return ((IPlayer)grain).VirtualCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -509390599: 
                                return ((IPlayer)grain).ObjectCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1038277770: 
                                return ((IPlayer)grain).Save().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -1893154936: 
                                return ((IPlayer)grain).GetGUID().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 194300607: 
                                return ((IPlayer)grain).GetByte((Int32)arguments[0], (Int32)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1305326038: 
                                return ((IPlayer)grain).GetUInt32((Int32)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1053963025: 
                                return ((IPlayer)grain).GetFloat((UInt32)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1778927808: 
                                return ((IPlayer)grain).SetByte((Int32)arguments[0], (Int32)arguments[1], (Byte)arguments[2]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -890930237: 
                                return ((IPlayer)grain).SetUInt32((Int32)arguments[0], (UInt32)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -1920519729: 
                                return ((IPlayer)grain).SetInt32((Int32)arguments[0], (Int32)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 1703182622: 
                                return ((IPlayer)grain).SetFloat((Int32)arguments[0], (Single)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -2061902484: 
                                return ((IPlayer)grain).SetUInt64((Int32)arguments[0], (UInt64)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -140687627: 
                                return ((IPlayer)grain).SetGUID((Int32)arguments[0], (ObjectGUID)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }case 1374563470:  // IPlayerImpl
                        switch (methodId)
                        {
                            case -851262471: 
                                return ((IPlayerImpl)grain).PlayerCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1038877739: 
                                return ((IPlayerImpl)grain).Create((CMSG_CHAR_CREATE)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 1519937893: 
                                return ((IPlayerImpl)grain).UnitCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 911766124: 
                                return ((IPlayerImpl)grain).VirtualCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -509390599: 
                                return ((IPlayerImpl)grain).ObjectCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1038277770: 
                                return ((IPlayerImpl)grain).Save().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -1893154936: 
                                return ((IPlayerImpl)grain).GetGUID().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 194300607: 
                                return ((IPlayerImpl)grain).GetByte((Int32)arguments[0], (Int32)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1305326038: 
                                return ((IPlayerImpl)grain).GetUInt32((Int32)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1053963025: 
                                return ((IPlayerImpl)grain).GetFloat((UInt32)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1778927808: 
                                return ((IPlayerImpl)grain).SetByte((Int32)arguments[0], (Int32)arguments[1], (Byte)arguments[2]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -890930237: 
                                return ((IPlayerImpl)grain).SetUInt32((Int32)arguments[0], (UInt32)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -1920519729: 
                                return ((IPlayerImpl)grain).SetInt32((Int32)arguments[0], (Int32)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 1703182622: 
                                return ((IPlayerImpl)grain).SetFloat((Int32)arguments[0], (Single)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -2061902484: 
                                return ((IPlayerImpl)grain).SetUInt64((Int32)arguments[0], (UInt64)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -140687627: 
                                return ((IPlayerImpl)grain).SetGUID((Int32)arguments[0], (ObjectGUID)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }case -459325194:  // IUnitImpl
                        switch (methodId)
                        {
                            case 1519937893: 
                                return ((IUnitImpl)grain).UnitCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 911766124: 
                                return ((IUnitImpl)grain).VirtualCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -509390599: 
                                return ((IUnitImpl)grain).ObjectCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1038277770: 
                                return ((IUnitImpl)grain).Save().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -1893154936: 
                                return ((IUnitImpl)grain).GetGUID().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 194300607: 
                                return ((IUnitImpl)grain).GetByte((Int32)arguments[0], (Int32)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1305326038: 
                                return ((IUnitImpl)grain).GetUInt32((Int32)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1053963025: 
                                return ((IUnitImpl)grain).GetFloat((UInt32)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1778927808: 
                                return ((IUnitImpl)grain).SetByte((Int32)arguments[0], (Int32)arguments[1], (Byte)arguments[2]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -890930237: 
                                return ((IUnitImpl)grain).SetUInt32((Int32)arguments[0], (UInt32)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -1920519729: 
                                return ((IUnitImpl)grain).SetInt32((Int32)arguments[0], (Int32)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 1703182622: 
                                return ((IUnitImpl)grain).SetFloat((Int32)arguments[0], (Single)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -2061902484: 
                                return ((IUnitImpl)grain).SetUInt64((Int32)arguments[0], (UInt64)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -140687627: 
                                return ((IUnitImpl)grain).SetGUID((Int32)arguments[0], (ObjectGUID)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }case 1962518542:  // IObjectImpl
                        switch (methodId)
                        {
                            case 911766124: 
                                return ((IObjectImpl)grain).VirtualCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -509390599: 
                                return ((IObjectImpl)grain).ObjectCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1038277770: 
                                return ((IObjectImpl)grain).Save().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -1893154936: 
                                return ((IObjectImpl)grain).GetGUID().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 194300607: 
                                return ((IObjectImpl)grain).GetByte((Int32)arguments[0], (Int32)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1305326038: 
                                return ((IObjectImpl)grain).GetUInt32((Int32)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1053963025: 
                                return ((IObjectImpl)grain).GetFloat((UInt32)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1778927808: 
                                return ((IObjectImpl)grain).SetByte((Int32)arguments[0], (Int32)arguments[1], (Byte)arguments[2]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -890930237: 
                                return ((IObjectImpl)grain).SetUInt32((Int32)arguments[0], (UInt32)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -1920519729: 
                                return ((IObjectImpl)grain).SetInt32((Int32)arguments[0], (Int32)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 1703182622: 
                                return ((IObjectImpl)grain).SetFloat((Int32)arguments[0], (Single)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -2061902484: 
                                return ((IObjectImpl)grain).SetUInt64((Int32)arguments[0], (UInt64)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -140687627: 
                                return ((IObjectImpl)grain).SetGUID((Int32)arguments[0], (ObjectGUID)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }case 436426678:  // IBaseObjectImpl
                        switch (methodId)
                        {
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }
                    default:
                        throw new System.InvalidCastException("interfaceId="+interfaceId);
                }
            }
            catch(Exception ex)
            {
                var t = new System.Threading.Tasks.TaskCompletionSource<object>();
                t.SetException(ex);
                return t.Task;
            }
        }
        
        public static string GetMethodName(int interfaceId, int methodId)
        {

            switch (interfaceId)
            {
                
                case -1840646871:  // IPlayer
                    switch (methodId)
                    {
                        case -851262471:
                            return "PlayerCall";
                    case -1038877739:
                            return "Create";
                    case 1519937893:
                            return "UnitCall";
                    case 911766124:
                            return "VirtualCall";
                    case -509390599:
                            return "ObjectCall";
                    case -1038277770:
                            return "Save";
                    case -1893154936:
                            return "GetGUID";
                    case 194300607:
                            return "GetByte";
                    case -1305326038:
                            return "GetUInt32";
                    case -1053963025:
                            return "GetFloat";
                    case -1778927808:
                            return "SetByte";
                    case -890930237:
                            return "SetUInt32";
                    case -1920519729:
                            return "SetInt32";
                    case 1703182622:
                            return "SetFloat";
                    case -2061902484:
                            return "SetUInt64";
                    case -140687627:
                            return "SetGUID";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }
                case 1374563470:  // IPlayerImpl
                    switch (methodId)
                    {
                        case -851262471:
                            return "PlayerCall";
                    case -1038877739:
                            return "Create";
                    case 1519937893:
                            return "UnitCall";
                    case 911766124:
                            return "VirtualCall";
                    case -509390599:
                            return "ObjectCall";
                    case -1038277770:
                            return "Save";
                    case -1893154936:
                            return "GetGUID";
                    case 194300607:
                            return "GetByte";
                    case -1305326038:
                            return "GetUInt32";
                    case -1053963025:
                            return "GetFloat";
                    case -1778927808:
                            return "SetByte";
                    case -890930237:
                            return "SetUInt32";
                    case -1920519729:
                            return "SetInt32";
                    case 1703182622:
                            return "SetFloat";
                    case -2061902484:
                            return "SetUInt64";
                    case -140687627:
                            return "SetGUID";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }
                case -459325194:  // IUnitImpl
                    switch (methodId)
                    {
                        case 1519937893:
                            return "UnitCall";
                    case 911766124:
                            return "VirtualCall";
                    case -509390599:
                            return "ObjectCall";
                    case -1038277770:
                            return "Save";
                    case -1893154936:
                            return "GetGUID";
                    case 194300607:
                            return "GetByte";
                    case -1305326038:
                            return "GetUInt32";
                    case -1053963025:
                            return "GetFloat";
                    case -1778927808:
                            return "SetByte";
                    case -890930237:
                            return "SetUInt32";
                    case -1920519729:
                            return "SetInt32";
                    case 1703182622:
                            return "SetFloat";
                    case -2061902484:
                            return "SetUInt64";
                    case -140687627:
                            return "SetGUID";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }
                case 1962518542:  // IObjectImpl
                    switch (methodId)
                    {
                        case 911766124:
                            return "VirtualCall";
                    case -509390599:
                            return "ObjectCall";
                    case -1038277770:
                            return "Save";
                    case -1893154936:
                            return "GetGUID";
                    case 194300607:
                            return "GetByte";
                    case -1305326038:
                            return "GetUInt32";
                    case -1053963025:
                            return "GetFloat";
                    case -1778927808:
                            return "SetByte";
                    case -890930237:
                            return "SetUInt32";
                    case -1920519729:
                            return "SetInt32";
                    case 1703182622:
                            return "SetFloat";
                    case -2061902484:
                            return "SetUInt64";
                    case -140687627:
                            return "SetGUID";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }
                case 436426678:  // IBaseObjectImpl
                    switch (methodId)
                    {
                        
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }

                default:
                    throw new System.InvalidCastException("interfaceId="+interfaceId);
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class ObjectFactory
    {
        

                        [System.Obsolete("This method has been deprecated. Please use GrainFactory.GetGrain<IObject> instead.")]
                        public static IObject GetGrain(long primaryKey)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(IObject), primaryKey));
                        }

                        [System.Obsolete("This method has been deprecated. Please use GrainFactory.GetGrain<IObject> instead.")]
                        public static IObject GetGrain(long primaryKey, string grainClassNamePrefix)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(IObject), primaryKey, grainClassNamePrefix));
                        }

            public static IObject Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return ObjectReference.Cast(grainRef);
            }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
        [System.SerializableAttribute()]
        [global::Orleans.CodeGeneration.GrainReferenceAttribute("Server.IObject")]
        internal class ObjectReference : global::Orleans.Runtime.GrainReference, global::Orleans.Runtime.IAddressable, Server.IObject
        {
            

            public static IObject Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return (IObject) global::Orleans.Runtime.GrainReference.CastInternal(typeof(IObject), (global::Orleans.Runtime.GrainReference gr) => { return new ObjectReference(gr);}, grainRef, -167405501);
            }
            
            protected internal ObjectReference(global::Orleans.Runtime.GrainReference reference) : 
                    base(reference)
            {
            }
            
            protected internal ObjectReference(SerializationInfo info, StreamingContext context) : 
                    base(info, context)
            {
            }
            
            protected override int InterfaceId
            {
                get
                {
                    return -167405501;
                }
            }
            
            public override string InterfaceName
            {
                get
                {
                    return "Server.IObject";
                }
            }
            
            [global::Orleans.CodeGeneration.CopierMethodAttribute()]
            public static object _Copier(object original)
            {
                ObjectReference input = ((ObjectReference)(original));
                return ((ObjectReference)(global::Orleans.Runtime.GrainReference.CopyGrainReference(input)));
            }
            
            [global::Orleans.CodeGeneration.SerializerMethodAttribute()]
            public static void _Serializer(object original, global::Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
            {
                ObjectReference input = ((ObjectReference)(original));
                global::Orleans.Runtime.GrainReference.SerializeGrainReference(input, stream, expected);
            }
            
            [global::Orleans.CodeGeneration.DeserializerMethodAttribute()]
            public static object _Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
            {
                return ObjectReference.Cast(((global::Orleans.Runtime.GrainReference)(global::Orleans.Runtime.GrainReference.DeserializeGrainReference(expected, stream))));
            }
            
            public override bool IsCompatible(int interfaceId)
            {
                return (((interfaceId == this.InterfaceId) 
                            || (interfaceId == 1962518542)) 
                            || (interfaceId == 436426678));
            }
            
            protected override string GetMethodName(int interfaceId, int methodId)
            {
                return ObjectMethodInvoker.GetMethodName(interfaceId, methodId);
            }
            
            System.Threading.Tasks.Task<string> Server.IObjectImpl.VirtualCall()
            {

                return base.InvokeMethodAsync<System.String>(911766124, null );
            }
            
            System.Threading.Tasks.Task<string> Server.IObjectImpl.ObjectCall()
            {

                return base.InvokeMethodAsync<System.String>(-509390599, null );
            }
            
            System.Threading.Tasks.Task Server.IObjectImpl.Save()
            {

                return base.InvokeMethodAsync<object>(-1038277770, null );
            }
            
            System.Threading.Tasks.Task<Shared.ObjectGUID> Server.IObjectImpl.GetGUID()
            {

                return base.InvokeMethodAsync<Shared.ObjectGUID>(-1893154936, null );
            }
            
            System.Threading.Tasks.Task<byte> Server.IObjectImpl.GetByte(int @field, int @index)
            {

                return base.InvokeMethodAsync<System.Byte>(194300607, new object[] {@field, @index} );
            }
            
            System.Threading.Tasks.Task<uint> Server.IObjectImpl.GetUInt32(int @field)
            {

                return base.InvokeMethodAsync<System.UInt32>(-1305326038, new object[] {@field} );
            }
            
            System.Threading.Tasks.Task<float> Server.IObjectImpl.GetFloat(uint @field)
            {

                return base.InvokeMethodAsync<System.Single>(-1053963025, new object[] {@field} );
            }
            
            System.Threading.Tasks.Task Server.IObjectImpl.SetByte(int @field, int @index, byte @val)
            {

                return base.InvokeMethodAsync<object>(-1778927808, new object[] {@field, @index, @val} );
            }
            
            System.Threading.Tasks.Task Server.IObjectImpl.SetUInt32(int @field, uint @val)
            {

                return base.InvokeMethodAsync<object>(-890930237, new object[] {@field, @val} );
            }
            
            System.Threading.Tasks.Task Server.IObjectImpl.SetInt32(int @field, int @val)
            {

                return base.InvokeMethodAsync<object>(-1920519729, new object[] {@field, @val} );
            }
            
            System.Threading.Tasks.Task Server.IObjectImpl.SetFloat(int @field, float @val)
            {

                return base.InvokeMethodAsync<object>(1703182622, new object[] {@field, @val} );
            }
            
            System.Threading.Tasks.Task Server.IObjectImpl.SetUInt64(int @field, ulong @val)
            {

                return base.InvokeMethodAsync<object>(-2061902484, new object[] {@field, @val} );
            }
            
            System.Threading.Tasks.Task Server.IObjectImpl.SetGUID(int @field, Shared.ObjectGUID @val)
            {

                return base.InvokeMethodAsync<object>(-140687627, new object[] {@field, @val} );
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.MethodInvokerAttribute("Server.IObject", -167405501)]
    internal class ObjectMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        
        int global::Orleans.CodeGeneration.IGrainMethodInvoker.InterfaceId
        {
            get
            {
                return -167405501;
            }
        }
        
        global::System.Threading.Tasks.Task<object> global::Orleans.CodeGeneration.IGrainMethodInvoker.Invoke(global::Orleans.Runtime.IAddressable grain, int interfaceId, int methodId, object[] arguments)
        {

            try
            {                    if (grain == null) throw new System.ArgumentNullException("grain");
                switch (interfaceId)
                {
                    case -167405501:  // IObject
                        switch (methodId)
                        {
                            case 911766124: 
                                return ((IObject)grain).VirtualCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -509390599: 
                                return ((IObject)grain).ObjectCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1038277770: 
                                return ((IObject)grain).Save().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -1893154936: 
                                return ((IObject)grain).GetGUID().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 194300607: 
                                return ((IObject)grain).GetByte((Int32)arguments[0], (Int32)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1305326038: 
                                return ((IObject)grain).GetUInt32((Int32)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1053963025: 
                                return ((IObject)grain).GetFloat((UInt32)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1778927808: 
                                return ((IObject)grain).SetByte((Int32)arguments[0], (Int32)arguments[1], (Byte)arguments[2]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -890930237: 
                                return ((IObject)grain).SetUInt32((Int32)arguments[0], (UInt32)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -1920519729: 
                                return ((IObject)grain).SetInt32((Int32)arguments[0], (Int32)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 1703182622: 
                                return ((IObject)grain).SetFloat((Int32)arguments[0], (Single)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -2061902484: 
                                return ((IObject)grain).SetUInt64((Int32)arguments[0], (UInt64)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -140687627: 
                                return ((IObject)grain).SetGUID((Int32)arguments[0], (ObjectGUID)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }case 1962518542:  // IObjectImpl
                        switch (methodId)
                        {
                            case 911766124: 
                                return ((IObjectImpl)grain).VirtualCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -509390599: 
                                return ((IObjectImpl)grain).ObjectCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1038277770: 
                                return ((IObjectImpl)grain).Save().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -1893154936: 
                                return ((IObjectImpl)grain).GetGUID().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 194300607: 
                                return ((IObjectImpl)grain).GetByte((Int32)arguments[0], (Int32)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1305326038: 
                                return ((IObjectImpl)grain).GetUInt32((Int32)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1053963025: 
                                return ((IObjectImpl)grain).GetFloat((UInt32)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1778927808: 
                                return ((IObjectImpl)grain).SetByte((Int32)arguments[0], (Int32)arguments[1], (Byte)arguments[2]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -890930237: 
                                return ((IObjectImpl)grain).SetUInt32((Int32)arguments[0], (UInt32)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -1920519729: 
                                return ((IObjectImpl)grain).SetInt32((Int32)arguments[0], (Int32)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 1703182622: 
                                return ((IObjectImpl)grain).SetFloat((Int32)arguments[0], (Single)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -2061902484: 
                                return ((IObjectImpl)grain).SetUInt64((Int32)arguments[0], (UInt64)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -140687627: 
                                return ((IObjectImpl)grain).SetGUID((Int32)arguments[0], (ObjectGUID)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }case 436426678:  // IBaseObjectImpl
                        switch (methodId)
                        {
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }
                    default:
                        throw new System.InvalidCastException("interfaceId="+interfaceId);
                }
            }
            catch(Exception ex)
            {
                var t = new System.Threading.Tasks.TaskCompletionSource<object>();
                t.SetException(ex);
                return t.Task;
            }
        }
        
        public static string GetMethodName(int interfaceId, int methodId)
        {

            switch (interfaceId)
            {
                
                case -167405501:  // IObject
                    switch (methodId)
                    {
                        case 911766124:
                            return "VirtualCall";
                    case -509390599:
                            return "ObjectCall";
                    case -1038277770:
                            return "Save";
                    case -1893154936:
                            return "GetGUID";
                    case 194300607:
                            return "GetByte";
                    case -1305326038:
                            return "GetUInt32";
                    case -1053963025:
                            return "GetFloat";
                    case -1778927808:
                            return "SetByte";
                    case -890930237:
                            return "SetUInt32";
                    case -1920519729:
                            return "SetInt32";
                    case 1703182622:
                            return "SetFloat";
                    case -2061902484:
                            return "SetUInt64";
                    case -140687627:
                            return "SetGUID";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }
                case 1962518542:  // IObjectImpl
                    switch (methodId)
                    {
                        case 911766124:
                            return "VirtualCall";
                    case -509390599:
                            return "ObjectCall";
                    case -1038277770:
                            return "Save";
                    case -1893154936:
                            return "GetGUID";
                    case 194300607:
                            return "GetByte";
                    case -1305326038:
                            return "GetUInt32";
                    case -1053963025:
                            return "GetFloat";
                    case -1778927808:
                            return "SetByte";
                    case -890930237:
                            return "SetUInt32";
                    case -1920519729:
                            return "SetInt32";
                    case 1703182622:
                            return "SetFloat";
                    case -2061902484:
                            return "SetUInt64";
                    case -140687627:
                            return "SetGUID";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }
                case 436426678:  // IBaseObjectImpl
                    switch (methodId)
                    {
                        
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }

                default:
                    throw new System.InvalidCastException("interfaceId="+interfaceId);
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class UnitFactory
    {
        

                        [System.Obsolete("This method has been deprecated. Please use GrainFactory.GetGrain<IUnit> instead.")]
                        public static IUnit GetGrain(long primaryKey)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(IUnit), primaryKey));
                        }

                        [System.Obsolete("This method has been deprecated. Please use GrainFactory.GetGrain<IUnit> instead.")]
                        public static IUnit GetGrain(long primaryKey, string grainClassNamePrefix)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(IUnit), primaryKey, grainClassNamePrefix));
                        }

            public static IUnit Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return UnitReference.Cast(grainRef);
            }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
        [System.SerializableAttribute()]
        [global::Orleans.CodeGeneration.GrainReferenceAttribute("Server.IUnit")]
        internal class UnitReference : global::Orleans.Runtime.GrainReference, global::Orleans.Runtime.IAddressable, Server.IUnit
        {
            

            public static IUnit Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return (IUnit) global::Orleans.Runtime.GrainReference.CastInternal(typeof(IUnit), (global::Orleans.Runtime.GrainReference gr) => { return new UnitReference(gr);}, grainRef, 1237625140);
            }
            
            protected internal UnitReference(global::Orleans.Runtime.GrainReference reference) : 
                    base(reference)
            {
            }
            
            protected internal UnitReference(SerializationInfo info, StreamingContext context) : 
                    base(info, context)
            {
            }
            
            protected override int InterfaceId
            {
                get
                {
                    return 1237625140;
                }
            }
            
            public override string InterfaceName
            {
                get
                {
                    return "Server.IUnit";
                }
            }
            
            [global::Orleans.CodeGeneration.CopierMethodAttribute()]
            public static object _Copier(object original)
            {
                UnitReference input = ((UnitReference)(original));
                return ((UnitReference)(global::Orleans.Runtime.GrainReference.CopyGrainReference(input)));
            }
            
            [global::Orleans.CodeGeneration.SerializerMethodAttribute()]
            public static void _Serializer(object original, global::Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
            {
                UnitReference input = ((UnitReference)(original));
                global::Orleans.Runtime.GrainReference.SerializeGrainReference(input, stream, expected);
            }
            
            [global::Orleans.CodeGeneration.DeserializerMethodAttribute()]
            public static object _Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
            {
                return UnitReference.Cast(((global::Orleans.Runtime.GrainReference)(global::Orleans.Runtime.GrainReference.DeserializeGrainReference(expected, stream))));
            }
            
            public override bool IsCompatible(int interfaceId)
            {
                return ((((interfaceId == this.InterfaceId) 
                            || (interfaceId == -459325194)) 
                            || (interfaceId == 1962518542)) 
                            || (interfaceId == 436426678));
            }
            
            protected override string GetMethodName(int interfaceId, int methodId)
            {
                return UnitMethodInvoker.GetMethodName(interfaceId, methodId);
            }
            
            System.Threading.Tasks.Task<string> Server.IUnitImpl.UnitCall()
            {

                return base.InvokeMethodAsync<System.String>(1519937893, null );
            }
            
            System.Threading.Tasks.Task<string> Server.IObjectImpl.VirtualCall()
            {

                return base.InvokeMethodAsync<System.String>(911766124, null );
            }
            
            System.Threading.Tasks.Task<string> Server.IObjectImpl.ObjectCall()
            {

                return base.InvokeMethodAsync<System.String>(-509390599, null );
            }
            
            System.Threading.Tasks.Task Server.IObjectImpl.Save()
            {

                return base.InvokeMethodAsync<object>(-1038277770, null );
            }
            
            System.Threading.Tasks.Task<Shared.ObjectGUID> Server.IObjectImpl.GetGUID()
            {

                return base.InvokeMethodAsync<Shared.ObjectGUID>(-1893154936, null );
            }
            
            System.Threading.Tasks.Task<byte> Server.IObjectImpl.GetByte(int @field, int @index)
            {

                return base.InvokeMethodAsync<System.Byte>(194300607, new object[] {@field, @index} );
            }
            
            System.Threading.Tasks.Task<uint> Server.IObjectImpl.GetUInt32(int @field)
            {

                return base.InvokeMethodAsync<System.UInt32>(-1305326038, new object[] {@field} );
            }
            
            System.Threading.Tasks.Task<float> Server.IObjectImpl.GetFloat(uint @field)
            {

                return base.InvokeMethodAsync<System.Single>(-1053963025, new object[] {@field} );
            }
            
            System.Threading.Tasks.Task Server.IObjectImpl.SetByte(int @field, int @index, byte @val)
            {

                return base.InvokeMethodAsync<object>(-1778927808, new object[] {@field, @index, @val} );
            }
            
            System.Threading.Tasks.Task Server.IObjectImpl.SetUInt32(int @field, uint @val)
            {

                return base.InvokeMethodAsync<object>(-890930237, new object[] {@field, @val} );
            }
            
            System.Threading.Tasks.Task Server.IObjectImpl.SetInt32(int @field, int @val)
            {

                return base.InvokeMethodAsync<object>(-1920519729, new object[] {@field, @val} );
            }
            
            System.Threading.Tasks.Task Server.IObjectImpl.SetFloat(int @field, float @val)
            {

                return base.InvokeMethodAsync<object>(1703182622, new object[] {@field, @val} );
            }
            
            System.Threading.Tasks.Task Server.IObjectImpl.SetUInt64(int @field, ulong @val)
            {

                return base.InvokeMethodAsync<object>(-2061902484, new object[] {@field, @val} );
            }
            
            System.Threading.Tasks.Task Server.IObjectImpl.SetGUID(int @field, Shared.ObjectGUID @val)
            {

                return base.InvokeMethodAsync<object>(-140687627, new object[] {@field, @val} );
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.MethodInvokerAttribute("Server.IUnit", 1237625140)]
    internal class UnitMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        
        int global::Orleans.CodeGeneration.IGrainMethodInvoker.InterfaceId
        {
            get
            {
                return 1237625140;
            }
        }
        
        global::System.Threading.Tasks.Task<object> global::Orleans.CodeGeneration.IGrainMethodInvoker.Invoke(global::Orleans.Runtime.IAddressable grain, int interfaceId, int methodId, object[] arguments)
        {

            try
            {                    if (grain == null) throw new System.ArgumentNullException("grain");
                switch (interfaceId)
                {
                    case 1237625140:  // IUnit
                        switch (methodId)
                        {
                            case 1519937893: 
                                return ((IUnit)grain).UnitCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 911766124: 
                                return ((IUnit)grain).VirtualCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -509390599: 
                                return ((IUnit)grain).ObjectCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1038277770: 
                                return ((IUnit)grain).Save().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -1893154936: 
                                return ((IUnit)grain).GetGUID().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 194300607: 
                                return ((IUnit)grain).GetByte((Int32)arguments[0], (Int32)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1305326038: 
                                return ((IUnit)grain).GetUInt32((Int32)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1053963025: 
                                return ((IUnit)grain).GetFloat((UInt32)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1778927808: 
                                return ((IUnit)grain).SetByte((Int32)arguments[0], (Int32)arguments[1], (Byte)arguments[2]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -890930237: 
                                return ((IUnit)grain).SetUInt32((Int32)arguments[0], (UInt32)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -1920519729: 
                                return ((IUnit)grain).SetInt32((Int32)arguments[0], (Int32)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 1703182622: 
                                return ((IUnit)grain).SetFloat((Int32)arguments[0], (Single)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -2061902484: 
                                return ((IUnit)grain).SetUInt64((Int32)arguments[0], (UInt64)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -140687627: 
                                return ((IUnit)grain).SetGUID((Int32)arguments[0], (ObjectGUID)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }case -459325194:  // IUnitImpl
                        switch (methodId)
                        {
                            case 1519937893: 
                                return ((IUnitImpl)grain).UnitCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 911766124: 
                                return ((IUnitImpl)grain).VirtualCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -509390599: 
                                return ((IUnitImpl)grain).ObjectCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1038277770: 
                                return ((IUnitImpl)grain).Save().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -1893154936: 
                                return ((IUnitImpl)grain).GetGUID().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 194300607: 
                                return ((IUnitImpl)grain).GetByte((Int32)arguments[0], (Int32)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1305326038: 
                                return ((IUnitImpl)grain).GetUInt32((Int32)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1053963025: 
                                return ((IUnitImpl)grain).GetFloat((UInt32)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1778927808: 
                                return ((IUnitImpl)grain).SetByte((Int32)arguments[0], (Int32)arguments[1], (Byte)arguments[2]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -890930237: 
                                return ((IUnitImpl)grain).SetUInt32((Int32)arguments[0], (UInt32)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -1920519729: 
                                return ((IUnitImpl)grain).SetInt32((Int32)arguments[0], (Int32)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 1703182622: 
                                return ((IUnitImpl)grain).SetFloat((Int32)arguments[0], (Single)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -2061902484: 
                                return ((IUnitImpl)grain).SetUInt64((Int32)arguments[0], (UInt64)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -140687627: 
                                return ((IUnitImpl)grain).SetGUID((Int32)arguments[0], (ObjectGUID)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }case 1962518542:  // IObjectImpl
                        switch (methodId)
                        {
                            case 911766124: 
                                return ((IObjectImpl)grain).VirtualCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -509390599: 
                                return ((IObjectImpl)grain).ObjectCall().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1038277770: 
                                return ((IObjectImpl)grain).Save().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -1893154936: 
                                return ((IObjectImpl)grain).GetGUID().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 194300607: 
                                return ((IObjectImpl)grain).GetByte((Int32)arguments[0], (Int32)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1305326038: 
                                return ((IObjectImpl)grain).GetUInt32((Int32)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1053963025: 
                                return ((IObjectImpl)grain).GetFloat((UInt32)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1778927808: 
                                return ((IObjectImpl)grain).SetByte((Int32)arguments[0], (Int32)arguments[1], (Byte)arguments[2]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -890930237: 
                                return ((IObjectImpl)grain).SetUInt32((Int32)arguments[0], (UInt32)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -1920519729: 
                                return ((IObjectImpl)grain).SetInt32((Int32)arguments[0], (Int32)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 1703182622: 
                                return ((IObjectImpl)grain).SetFloat((Int32)arguments[0], (Single)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -2061902484: 
                                return ((IObjectImpl)grain).SetUInt64((Int32)arguments[0], (UInt64)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -140687627: 
                                return ((IObjectImpl)grain).SetGUID((Int32)arguments[0], (ObjectGUID)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }case 436426678:  // IBaseObjectImpl
                        switch (methodId)
                        {
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }
                    default:
                        throw new System.InvalidCastException("interfaceId="+interfaceId);
                }
            }
            catch(Exception ex)
            {
                var t = new System.Threading.Tasks.TaskCompletionSource<object>();
                t.SetException(ex);
                return t.Task;
            }
        }
        
        public static string GetMethodName(int interfaceId, int methodId)
        {

            switch (interfaceId)
            {
                
                case 1237625140:  // IUnit
                    switch (methodId)
                    {
                        case 1519937893:
                            return "UnitCall";
                    case 911766124:
                            return "VirtualCall";
                    case -509390599:
                            return "ObjectCall";
                    case -1038277770:
                            return "Save";
                    case -1893154936:
                            return "GetGUID";
                    case 194300607:
                            return "GetByte";
                    case -1305326038:
                            return "GetUInt32";
                    case -1053963025:
                            return "GetFloat";
                    case -1778927808:
                            return "SetByte";
                    case -890930237:
                            return "SetUInt32";
                    case -1920519729:
                            return "SetInt32";
                    case 1703182622:
                            return "SetFloat";
                    case -2061902484:
                            return "SetUInt64";
                    case -140687627:
                            return "SetGUID";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }
                case -459325194:  // IUnitImpl
                    switch (methodId)
                    {
                        case 1519937893:
                            return "UnitCall";
                    case 911766124:
                            return "VirtualCall";
                    case -509390599:
                            return "ObjectCall";
                    case -1038277770:
                            return "Save";
                    case -1893154936:
                            return "GetGUID";
                    case 194300607:
                            return "GetByte";
                    case -1305326038:
                            return "GetUInt32";
                    case -1053963025:
                            return "GetFloat";
                    case -1778927808:
                            return "SetByte";
                    case -890930237:
                            return "SetUInt32";
                    case -1920519729:
                            return "SetInt32";
                    case 1703182622:
                            return "SetFloat";
                    case -2061902484:
                            return "SetUInt64";
                    case -140687627:
                            return "SetGUID";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }
                case 1962518542:  // IObjectImpl
                    switch (methodId)
                    {
                        case 911766124:
                            return "VirtualCall";
                    case -509390599:
                            return "ObjectCall";
                    case -1038277770:
                            return "Save";
                    case -1893154936:
                            return "GetGUID";
                    case 194300607:
                            return "GetByte";
                    case -1305326038:
                            return "GetUInt32";
                    case -1053963025:
                            return "GetFloat";
                    case -1778927808:
                            return "SetByte";
                    case -890930237:
                            return "SetUInt32";
                    case -1920519729:
                            return "SetInt32";
                    case 1703182622:
                            return "SetFloat";
                    case -2061902484:
                            return "SetUInt64";
                    case -140687627:
                            return "SetGUID";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }
                case 436426678:  // IBaseObjectImpl
                    switch (methodId)
                    {
                        
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }

                default:
                    throw new System.InvalidCastException("interfaceId="+interfaceId);
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class RealmManagerFactory
    {
        

                        [System.Obsolete("This method has been deprecated. Please use GrainFactory.GetGrain<IRealmManager> instead.")]
                        public static IRealmManager GetGrain(long primaryKey)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(IRealmManager), primaryKey));
                        }

                        [System.Obsolete("This method has been deprecated. Please use GrainFactory.GetGrain<IRealmManager> instead.")]
                        public static IRealmManager GetGrain(long primaryKey, string grainClassNamePrefix)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(IRealmManager), primaryKey, grainClassNamePrefix));
                        }

            public static IRealmManager Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return RealmManagerReference.Cast(grainRef);
            }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
        [System.SerializableAttribute()]
        [global::Orleans.CodeGeneration.GrainReferenceAttribute("Server.IRealmManager")]
        internal class RealmManagerReference : global::Orleans.Runtime.GrainReference, global::Orleans.Runtime.IAddressable, Server.IRealmManager
        {
            

            public static IRealmManager Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return (IRealmManager) global::Orleans.Runtime.GrainReference.CastInternal(typeof(IRealmManager), (global::Orleans.Runtime.GrainReference gr) => { return new RealmManagerReference(gr);}, grainRef, 742203874);
            }
            
            protected internal RealmManagerReference(global::Orleans.Runtime.GrainReference reference) : 
                    base(reference)
            {
            }
            
            protected internal RealmManagerReference(SerializationInfo info, StreamingContext context) : 
                    base(info, context)
            {
            }
            
            protected override int InterfaceId
            {
                get
                {
                    return 742203874;
                }
            }
            
            public override string InterfaceName
            {
                get
                {
                    return "Server.IRealmManager";
                }
            }
            
            [global::Orleans.CodeGeneration.CopierMethodAttribute()]
            public static object _Copier(object original)
            {
                RealmManagerReference input = ((RealmManagerReference)(original));
                return ((RealmManagerReference)(global::Orleans.Runtime.GrainReference.CopyGrainReference(input)));
            }
            
            [global::Orleans.CodeGeneration.SerializerMethodAttribute()]
            public static void _Serializer(object original, global::Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
            {
                RealmManagerReference input = ((RealmManagerReference)(original));
                global::Orleans.Runtime.GrainReference.SerializeGrainReference(input, stream, expected);
            }
            
            [global::Orleans.CodeGeneration.DeserializerMethodAttribute()]
            public static object _Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
            {
                return RealmManagerReference.Cast(((global::Orleans.Runtime.GrainReference)(global::Orleans.Runtime.GrainReference.DeserializeGrainReference(expected, stream))));
            }
            
            public override bool IsCompatible(int interfaceId)
            {
                return (interfaceId == this.InterfaceId);
            }
            
            protected override string GetMethodName(int interfaceId, int methodId)
            {
                return RealmManagerMethodInvoker.GetMethodName(interfaceId, methodId);
            }
            
            System.Threading.Tasks.Task<Shared.Realm> Server.IRealmManager.GetRealm(int @id)
            {

                return base.InvokeMethodAsync<Shared.Realm>(-637421897, new object[] {@id} );
            }
            
            System.Threading.Tasks.Task Server.IRealmManager.RemoveRealm(int @id)
            {

                return base.InvokeMethodAsync<object>(-1749235508, new object[] {@id} );
            }
            
            System.Threading.Tasks.Task Server.IRealmManager.AddRealm(Shared.RealmSettings @r)
            {

                return base.InvokeMethodAsync<object>(-130435026, new object[] {@r} );
            }
            
            System.Threading.Tasks.Task<Shared.Realm[]> Server.IRealmManager.GetRealms(int @AccountLevel)
            {

                return base.InvokeMethodAsync<Shared.Realm[]>(170842919, new object[] {@AccountLevel} );
            }
            
            System.Threading.Tasks.Task Server.IRealmManager.PingRealm(int @id)
            {

                return base.InvokeMethodAsync<object>(574707288, new object[] {@id} );
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.MethodInvokerAttribute("Server.IRealmManager", 742203874)]
    internal class RealmManagerMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        
        int global::Orleans.CodeGeneration.IGrainMethodInvoker.InterfaceId
        {
            get
            {
                return 742203874;
            }
        }
        
        global::System.Threading.Tasks.Task<object> global::Orleans.CodeGeneration.IGrainMethodInvoker.Invoke(global::Orleans.Runtime.IAddressable grain, int interfaceId, int methodId, object[] arguments)
        {

            try
            {                    if (grain == null) throw new System.ArgumentNullException("grain");
                switch (interfaceId)
                {
                    case 742203874:  // IRealmManager
                        switch (methodId)
                        {
                            case -637421897: 
                                return ((IRealmManager)grain).GetRealm((Int32)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1749235508: 
                                return ((IRealmManager)grain).RemoveRealm((Int32)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -130435026: 
                                return ((IRealmManager)grain).AddRealm((RealmSettings)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 170842919: 
                                return ((IRealmManager)grain).GetRealms((Int32)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 574707288: 
                                return ((IRealmManager)grain).PingRealm((Int32)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }
                    default:
                        throw new System.InvalidCastException("interfaceId="+interfaceId);
                }
            }
            catch(Exception ex)
            {
                var t = new System.Threading.Tasks.TaskCompletionSource<object>();
                t.SetException(ex);
                return t.Task;
            }
        }
        
        public static string GetMethodName(int interfaceId, int methodId)
        {

            switch (interfaceId)
            {
                
                case 742203874:  // IRealmManager
                    switch (methodId)
                    {
                        case -637421897:
                            return "GetRealm";
                    case -1749235508:
                            return "RemoveRealm";
                    case -130435026:
                            return "AddRealm";
                    case 170842919:
                            return "GetRealms";
                    case 574707288:
                            return "PingRealm";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }

                default:
                    throw new System.InvalidCastException("interfaceId="+interfaceId);
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class ObjectCreatorFactory
    {
        

                        [System.Obsolete("This method has been deprecated. Please use GrainFactory.GetGrain<IObjectCreator> instead.")]
                        public static IObjectCreator GetGrain(long primaryKey)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(IObjectCreator), primaryKey));
                        }

                        [System.Obsolete("This method has been deprecated. Please use GrainFactory.GetGrain<IObjectCreator> instead.")]
                        public static IObjectCreator GetGrain(long primaryKey, string grainClassNamePrefix)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(IObjectCreator), primaryKey, grainClassNamePrefix));
                        }

            public static IObjectCreator Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return ObjectCreatorReference.Cast(grainRef);
            }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
        [System.SerializableAttribute()]
        [global::Orleans.CodeGeneration.GrainReferenceAttribute("Server.IObjectCreator")]
        internal class ObjectCreatorReference : global::Orleans.Runtime.GrainReference, global::Orleans.Runtime.IAddressable, Server.IObjectCreator
        {
            

            public static IObjectCreator Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return (IObjectCreator) global::Orleans.Runtime.GrainReference.CastInternal(typeof(IObjectCreator), (global::Orleans.Runtime.GrainReference gr) => { return new ObjectCreatorReference(gr);}, grainRef, 628373308);
            }
            
            protected internal ObjectCreatorReference(global::Orleans.Runtime.GrainReference reference) : 
                    base(reference)
            {
            }
            
            protected internal ObjectCreatorReference(SerializationInfo info, StreamingContext context) : 
                    base(info, context)
            {
            }
            
            protected override int InterfaceId
            {
                get
                {
                    return 628373308;
                }
            }
            
            public override string InterfaceName
            {
                get
                {
                    return "Server.IObjectCreator";
                }
            }
            
            [global::Orleans.CodeGeneration.CopierMethodAttribute()]
            public static object _Copier(object original)
            {
                ObjectCreatorReference input = ((ObjectCreatorReference)(original));
                return ((ObjectCreatorReference)(global::Orleans.Runtime.GrainReference.CopyGrainReference(input)));
            }
            
            [global::Orleans.CodeGeneration.SerializerMethodAttribute()]
            public static void _Serializer(object original, global::Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
            {
                ObjectCreatorReference input = ((ObjectCreatorReference)(original));
                global::Orleans.Runtime.GrainReference.SerializeGrainReference(input, stream, expected);
            }
            
            [global::Orleans.CodeGeneration.DeserializerMethodAttribute()]
            public static object _Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
            {
                return ObjectCreatorReference.Cast(((global::Orleans.Runtime.GrainReference)(global::Orleans.Runtime.GrainReference.DeserializeGrainReference(expected, stream))));
            }
            
            public override bool IsCompatible(int interfaceId)
            {
                return (interfaceId == this.InterfaceId);
            }
            
            protected override string GetMethodName(int interfaceId, int methodId)
            {
                return ObjectCreatorMethodInvoker.GetMethodName(interfaceId, methodId);
            }
            
            System.Threading.Tasks.Task<Shared.ObjectGUID> Server.IObjectCreator.GenerateGUID(Shared.ObjectType @objectType)
            {

                return base.InvokeMethodAsync<Shared.ObjectGUID>(962302109, new object[] {@objectType} );
            }
            
            System.Threading.Tasks.Task<Server.IPlayer> Server.IObjectCreator.CreatePlayer(Shared.CMSG_CHAR_CREATE @creationData)
            {

                return base.InvokeMethodAsync<Server.IPlayer>(-549773541, new object[] {@creationData} );
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.MethodInvokerAttribute("Server.IObjectCreator", 628373308)]
    internal class ObjectCreatorMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        
        int global::Orleans.CodeGeneration.IGrainMethodInvoker.InterfaceId
        {
            get
            {
                return 628373308;
            }
        }
        
        global::System.Threading.Tasks.Task<object> global::Orleans.CodeGeneration.IGrainMethodInvoker.Invoke(global::Orleans.Runtime.IAddressable grain, int interfaceId, int methodId, object[] arguments)
        {

            try
            {                    if (grain == null) throw new System.ArgumentNullException("grain");
                switch (interfaceId)
                {
                    case 628373308:  // IObjectCreator
                        switch (methodId)
                        {
                            case 962302109: 
                                return ((IObjectCreator)grain).GenerateGUID((ObjectType)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -549773541: 
                                return ((IObjectCreator)grain).CreatePlayer((CMSG_CHAR_CREATE)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }
                    default:
                        throw new System.InvalidCastException("interfaceId="+interfaceId);
                }
            }
            catch(Exception ex)
            {
                var t = new System.Threading.Tasks.TaskCompletionSource<object>();
                t.SetException(ex);
                return t.Task;
            }
        }
        
        public static string GetMethodName(int interfaceId, int methodId)
        {

            switch (interfaceId)
            {
                
                case 628373308:  // IObjectCreator
                    switch (methodId)
                    {
                        case 962302109:
                            return "GenerateGUID";
                    case -549773541:
                            return "CreatePlayer";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }

                default:
                    throw new System.InvalidCastException("interfaceId="+interfaceId);
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class AccountGrainFactory
    {
        

                        [System.Obsolete("This method has been deprecated. Please use GrainFactory.GetGrain<IAccountGrain> instead.")]
                        public static IAccountGrain GetGrain(System.String primaryKey)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(IAccountGrain), primaryKey));
                        }

                        [System.Obsolete("This method has been deprecated. Please use GrainFactory.GetGrain<IAccountGrain> instead.")]
                        public static IAccountGrain GetGrain(System.String primaryKey, string grainClassNamePrefix)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(IAccountGrain), primaryKey, grainClassNamePrefix));
                        }

            public static IAccountGrain Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return AccountGrainReference.Cast(grainRef);
            }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
        [System.SerializableAttribute()]
        [global::Orleans.CodeGeneration.GrainReferenceAttribute("Server.IAccountGrain")]
        internal class AccountGrainReference : global::Orleans.Runtime.GrainReference, global::Orleans.Runtime.IAddressable, Server.IAccountGrain
        {
            

            public static IAccountGrain Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return (IAccountGrain) global::Orleans.Runtime.GrainReference.CastInternal(typeof(IAccountGrain), (global::Orleans.Runtime.GrainReference gr) => { return new AccountGrainReference(gr);}, grainRef, -774752436);
            }
            
            protected internal AccountGrainReference(global::Orleans.Runtime.GrainReference reference) : 
                    base(reference)
            {
            }
            
            protected internal AccountGrainReference(SerializationInfo info, StreamingContext context) : 
                    base(info, context)
            {
            }
            
            protected override int InterfaceId
            {
                get
                {
                    return -774752436;
                }
            }
            
            public override string InterfaceName
            {
                get
                {
                    return "Server.IAccountGrain";
                }
            }
            
            [global::Orleans.CodeGeneration.CopierMethodAttribute()]
            public static object _Copier(object original)
            {
                AccountGrainReference input = ((AccountGrainReference)(original));
                return ((AccountGrainReference)(global::Orleans.Runtime.GrainReference.CopyGrainReference(input)));
            }
            
            [global::Orleans.CodeGeneration.SerializerMethodAttribute()]
            public static void _Serializer(object original, global::Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
            {
                AccountGrainReference input = ((AccountGrainReference)(original));
                global::Orleans.Runtime.GrainReference.SerializeGrainReference(input, stream, expected);
            }
            
            [global::Orleans.CodeGeneration.DeserializerMethodAttribute()]
            public static object _Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
            {
                return AccountGrainReference.Cast(((global::Orleans.Runtime.GrainReference)(global::Orleans.Runtime.GrainReference.DeserializeGrainReference(expected, stream))));
            }
            
            public override bool IsCompatible(int interfaceId)
            {
                return ((interfaceId == this.InterfaceId) 
                            || (interfaceId == -1277021679));
            }
            
            protected override string GetMethodName(int interfaceId, int methodId)
            {
                return AccountGrainMethodInvoker.GetMethodName(interfaceId, methodId);
            }
            
            System.Threading.Tasks.Task Server.IAccountGrain.Destroy()
            {

                return base.InvokeMethodAsync<object>(-1041284210, null );
            }
            
            System.Threading.Tasks.Task<Server.AccountAuthResponse> Server.IAccountGrain.Authenticate(string @password)
            {

                return base.InvokeMethodAsync<Server.AccountAuthResponse>(1391356785, new object[] {@password} );
            }
            
            System.Threading.Tasks.Task<Server.AccountCreateResponse> Server.IAccountGrain.CreateAccount(string @password)
            {

                return base.InvokeMethodAsync<Server.AccountCreateResponse>(-2074345984, new object[] {@password} );
            }
            
            System.Threading.Tasks.Task Server.IAccountGrain.SetPassword(string @password)
            {

                return base.InvokeMethodAsync<object>(-555567538, new object[] {@password} );
            }
            
            System.Threading.Tasks.Task<string> Server.IAccountGrain.GetPassword()
            {

                return base.InvokeMethodAsync<System.String>(-1288502433, null );
            }
            
            System.Threading.Tasks.Task<string> Server.IAccountGrain.GetPasswordPlain()
            {

                return base.InvokeMethodAsync<System.String>(-752136790, null );
            }
            
            System.Threading.Tasks.Task<bool> Server.IAccountGrain.IsValid()
            {

                return base.InvokeMethodAsync<System.Boolean>(-663875885, null );
            }
            
            System.Threading.Tasks.Task Server.IAccountGrain.AddSession(Server.ISession @s)
            {

                return base.InvokeMethodAsync<object>(309252343, new object[] {@s is global::Orleans.Grain ? @s.AsReference<Server.ISession>() : @s} );
            }
            
            System.Threading.Tasks.Task Server.IAccountGrain.RemoveSession(Server.ISession @s, bool @disconnect)
            {

                return base.InvokeMethodAsync<object>(-1423570004, new object[] {@s is global::Orleans.Grain ? @s.AsReference<Server.ISession>() : @s, @disconnect} );
            }
            
            System.Threading.Tasks.Task<Server.ISession> Server.IAccountGrain.GetAuthSession()
            {

                return base.InvokeMethodAsync<Server.ISession>(1371286109, null );
            }
            
            System.Threading.Tasks.Task<Server.ISession> Server.IAccountGrain.GetRealmSession()
            {

                return base.InvokeMethodAsync<Server.ISession>(-1106931492, null );
            }
            
            System.Threading.Tasks.Task Server.IAccountGrain.SendPacketRealm(Shared.PacketOut @p)
            {

                return base.InvokeMethodAsync<object>(-1007635377, new object[] {@p} );
            }
            
            System.Threading.Tasks.Task Server.IAccountGrain.SendPacketAuth(Shared.PacketOut @p)
            {

                return base.InvokeMethodAsync<object>(862002919, new object[] {@p} );
            }
            
            System.Threading.Tasks.Task Server.IAccountGrain.SendAccountDataTimes(uint @mask)
            {

                return base.InvokeMethodAsync<object>(12719627, new object[] {@mask} );
            }
            
            System.Threading.Tasks.Task Server.IAccountGrain.UpdateAccountData(uint @id, uint @time, uint @size, byte[] @data)
            {

                return base.InvokeMethodAsync<object>(2060811694, new object[] {@id, @time, @size, @data} );
            }
            
            System.Threading.Tasks.Task Server.IAccountGrain.SendAccountData(uint @id)
            {

                return base.InvokeMethodAsync<object>(833613103, new object[] {@id} );
            }
            
            System.Threading.Tasks.Task Server.IAccountGrain.SendCharEnum(int @RealmID)
            {

                return base.InvokeMethodAsync<object>(1560354665, new object[] {@RealmID} );
            }
            
            System.Threading.Tasks.Task Server.IAccountGrain.CreatePlayer(Shared.CMSG_CHAR_CREATE @create)
            {

                return base.InvokeMethodAsync<object>(-549773541, new object[] {@create} );
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.MethodInvokerAttribute("Server.IAccountGrain", -774752436)]
    internal class AccountGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        
        int global::Orleans.CodeGeneration.IGrainMethodInvoker.InterfaceId
        {
            get
            {
                return -774752436;
            }
        }
        
        global::System.Threading.Tasks.Task<object> global::Orleans.CodeGeneration.IGrainMethodInvoker.Invoke(global::Orleans.Runtime.IAddressable grain, int interfaceId, int methodId, object[] arguments)
        {

            try
            {                    if (grain == null) throw new System.ArgumentNullException("grain");
                switch (interfaceId)
                {
                    case -774752436:  // IAccountGrain
                        switch (methodId)
                        {
                            case -1041284210: 
                                return ((IAccountGrain)grain).Destroy().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 1391356785: 
                                return ((IAccountGrain)grain).Authenticate((String)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -2074345984: 
                                return ((IAccountGrain)grain).CreateAccount((String)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -555567538: 
                                return ((IAccountGrain)grain).SetPassword((String)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -1288502433: 
                                return ((IAccountGrain)grain).GetPassword().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -752136790: 
                                return ((IAccountGrain)grain).GetPasswordPlain().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -663875885: 
                                return ((IAccountGrain)grain).IsValid().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 309252343: 
                                return ((IAccountGrain)grain).AddSession((ISession)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -1423570004: 
                                return ((IAccountGrain)grain).RemoveSession((ISession)arguments[0], (Boolean)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 1371286109: 
                                return ((IAccountGrain)grain).GetAuthSession().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1106931492: 
                                return ((IAccountGrain)grain).GetRealmSession().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1007635377: 
                                return ((IAccountGrain)grain).SendPacketRealm((PacketOut)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 862002919: 
                                return ((IAccountGrain)grain).SendPacketAuth((PacketOut)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 12719627: 
                                return ((IAccountGrain)grain).SendAccountDataTimes((UInt32)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 2060811694: 
                                return ((IAccountGrain)grain).UpdateAccountData((UInt32)arguments[0], (UInt32)arguments[1], (UInt32)arguments[2], (Byte[])arguments[3]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 833613103: 
                                return ((IAccountGrain)grain).SendAccountData((UInt32)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 1560354665: 
                                return ((IAccountGrain)grain).SendCharEnum((Int32)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -549773541: 
                                return ((IAccountGrain)grain).CreatePlayer((CMSG_CHAR_CREATE)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }case -1277021679:  // IGrainWithStringKey
                        switch (methodId)
                        {
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }
                    default:
                        throw new System.InvalidCastException("interfaceId="+interfaceId);
                }
            }
            catch(Exception ex)
            {
                var t = new System.Threading.Tasks.TaskCompletionSource<object>();
                t.SetException(ex);
                return t.Task;
            }
        }
        
        public static string GetMethodName(int interfaceId, int methodId)
        {

            switch (interfaceId)
            {
                
                case -774752436:  // IAccountGrain
                    switch (methodId)
                    {
                        case -1041284210:
                            return "Destroy";
                    case 1391356785:
                            return "Authenticate";
                    case -2074345984:
                            return "CreateAccount";
                    case -555567538:
                            return "SetPassword";
                    case -1288502433:
                            return "GetPassword";
                    case -752136790:
                            return "GetPasswordPlain";
                    case -663875885:
                            return "IsValid";
                    case 309252343:
                            return "AddSession";
                    case -1423570004:
                            return "RemoveSession";
                    case 1371286109:
                            return "GetAuthSession";
                    case -1106931492:
                            return "GetRealmSession";
                    case -1007635377:
                            return "SendPacketRealm";
                    case 862002919:
                            return "SendPacketAuth";
                    case 12719627:
                            return "SendAccountDataTimes";
                    case 2060811694:
                            return "UpdateAccountData";
                    case 833613103:
                            return "SendAccountData";
                    case 1560354665:
                            return "SendCharEnum";
                    case -549773541:
                            return "CreatePlayer";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }
                case -1277021679:  // IGrainWithStringKey
                    switch (methodId)
                    {
                        
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }

                default:
                    throw new System.InvalidCastException("interfaceId="+interfaceId);
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class SessionFactory
    {
        

                        [System.Obsolete("This method has been deprecated. Please use GrainFactory.GetGrain<ISession> instead.")]
                        public static ISession GetGrain(System.Guid primaryKey)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(ISession), primaryKey));
                        }

                        [System.Obsolete("This method has been deprecated. Please use GrainFactory.GetGrain<ISession> instead.")]
                        public static ISession GetGrain(System.Guid primaryKey, string grainClassNamePrefix)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(ISession), primaryKey, grainClassNamePrefix));
                        }

            public static ISession Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return SessionReference.Cast(grainRef);
            }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
        [System.SerializableAttribute()]
        [global::Orleans.CodeGeneration.GrainReferenceAttribute("Server.ISession")]
        internal class SessionReference : global::Orleans.Runtime.GrainReference, global::Orleans.Runtime.IAddressable, Server.ISession
        {
            

            public static ISession Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return (ISession) global::Orleans.Runtime.GrainReference.CastInternal(typeof(ISession), (global::Orleans.Runtime.GrainReference gr) => { return new SessionReference(gr);}, grainRef, 130958639);
            }
            
            protected internal SessionReference(global::Orleans.Runtime.GrainReference reference) : 
                    base(reference)
            {
            }
            
            protected internal SessionReference(SerializationInfo info, StreamingContext context) : 
                    base(info, context)
            {
            }
            
            protected override int InterfaceId
            {
                get
                {
                    return 130958639;
                }
            }
            
            public override string InterfaceName
            {
                get
                {
                    return "Server.ISession";
                }
            }
            
            [global::Orleans.CodeGeneration.CopierMethodAttribute()]
            public static object _Copier(object original)
            {
                SessionReference input = ((SessionReference)(original));
                return ((SessionReference)(global::Orleans.Runtime.GrainReference.CopyGrainReference(input)));
            }
            
            [global::Orleans.CodeGeneration.SerializerMethodAttribute()]
            public static void _Serializer(object original, global::Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
            {
                SessionReference input = ((SessionReference)(original));
                global::Orleans.Runtime.GrainReference.SerializeGrainReference(input, stream, expected);
            }
            
            [global::Orleans.CodeGeneration.DeserializerMethodAttribute()]
            public static object _Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
            {
                return SessionReference.Cast(((global::Orleans.Runtime.GrainReference)(global::Orleans.Runtime.GrainReference.DeserializeGrainReference(expected, stream))));
            }
            
            public override bool IsCompatible(int interfaceId)
            {
                return (interfaceId == this.InterfaceId);
            }
            
            protected override string GetMethodName(int interfaceId, int methodId)
            {
                return SessionMethodInvoker.GetMethodName(interfaceId, methodId);
            }
            
            System.Threading.Tasks.Task Server.ISession.OnLogonChallenge(Shared.AuthLogonChallenge @challenge)
            {

                return base.InvokeMethodAsync<object>(715203915, new object[] {@challenge} );
            }
            
            System.Threading.Tasks.Task Server.ISession.OnLogonProof(Shared.AuthLogonProof @proof)
            {

                return base.InvokeMethodAsync<object>(-174724446, new object[] {@proof} );
            }
            
            System.Threading.Tasks.Task Server.ISession.OnRealmList()
            {

                return base.InvokeMethodAsync<object>(105167316, null );
            }
            
            System.Threading.Tasks.Task Server.ISession.SetSessionType(Shared.SessionType @type)
            {

                return base.InvokeMethodAsync<object>(1161933625, new object[] {@type} );
            }
            
            System.Threading.Tasks.Task<Shared.SessionType> Server.ISession.GetSessionType()
            {

                return base.InvokeMethodAsync<Shared.SessionType>(343949440, null );
            }
            
            System.Threading.Tasks.Task Server.ISession.Disconnect()
            {

                return base.InvokeMethodAsync<object>(-1836674149, null );
            }
            
            System.Threading.Tasks.Task<Shared.BigInteger> Server.ISession.GetSessionKey()
            {

                return base.InvokeMethodAsync<Shared.BigInteger>(1465496855, null );
            }
            
            System.Threading.Tasks.Task Server.ISession.HandleAuthSession(Shared.CMSG_AUTH_SESSION @auth, uint @ServerSeed)
            {

                return base.InvokeMethodAsync<object>(522799231, new object[] {@auth, @ServerSeed} );
            }
            
            System.Threading.Tasks.Task Server.ISession.OnSocketDisconnect()
            {

                return base.InvokeMethodAsync<object>(-963939677, null );
            }
            
            System.Threading.Tasks.Task Server.ISession.GetSessionKeyFromAuthAccount(string @AccountName)
            {

                return base.InvokeMethodAsync<object>(-1036537128, new object[] {@AccountName} );
            }
            
            System.Threading.Tasks.Task Server.ISession.SetRealmInfo(Shared.RealmSettings @settings)
            {

                return base.InvokeMethodAsync<object>(10551987, new object[] {@settings} );
            }
            
            System.Threading.Tasks.Task<int> Server.ISession.GetRealmID()
            {

                return base.InvokeMethodAsync<System.Int32>(-200604686, null );
            }
            
            System.Threading.Tasks.Task Server.ISession.SendPacket(Shared.PacketOut @p)
            {

                return base.InvokeMethodAsync<object>(820464294, new object[] {@p} );
            }
            
            System.Threading.Tasks.Task Server.ISession.HandleReadyForAccountDataTimes()
            {

                return base.InvokeMethodAsync<object>(1136236795, null );
            }
            
            System.Threading.Tasks.Task Server.ISession.HandleUpdateAccountData(uint @type, uint @time, uint @size, byte[] @data)
            {

                return base.InvokeMethodAsync<object>(857067198, new object[] {@type, @time, @size, @data} );
            }
            
            System.Threading.Tasks.Task Server.ISession.HandleRequestAccountData(uint @type)
            {

                return base.InvokeMethodAsync<object>(-1656015275, new object[] {@type} );
            }
            
            System.Threading.Tasks.Task Server.ISession.HandleCharEnum()
            {

                return base.InvokeMethodAsync<object>(-1842798826, null );
            }
            
            System.Threading.Tasks.Task Server.ISession.HandleCharCreate(Shared.CMSG_CHAR_CREATE @create)
            {

                return base.InvokeMethodAsync<object>(-2128356724, new object[] {@create} );
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.MethodInvokerAttribute("Server.ISession", 130958639)]
    internal class SessionMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        
        int global::Orleans.CodeGeneration.IGrainMethodInvoker.InterfaceId
        {
            get
            {
                return 130958639;
            }
        }
        
        global::System.Threading.Tasks.Task<object> global::Orleans.CodeGeneration.IGrainMethodInvoker.Invoke(global::Orleans.Runtime.IAddressable grain, int interfaceId, int methodId, object[] arguments)
        {

            try
            {                    if (grain == null) throw new System.ArgumentNullException("grain");
                switch (interfaceId)
                {
                    case 130958639:  // ISession
                        switch (methodId)
                        {
                            case 715203915: 
                                return ((ISession)grain).OnLogonChallenge((AuthLogonChallenge)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -174724446: 
                                return ((ISession)grain).OnLogonProof((AuthLogonProof)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 105167316: 
                                return ((ISession)grain).OnRealmList().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 1161933625: 
                                return ((ISession)grain).SetSessionType((SessionType)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 343949440: 
                                return ((ISession)grain).GetSessionType().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1836674149: 
                                return ((ISession)grain).Disconnect().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 1465496855: 
                                return ((ISession)grain).GetSessionKey().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 522799231: 
                                return ((ISession)grain).HandleAuthSession((CMSG_AUTH_SESSION)arguments[0], (UInt32)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -963939677: 
                                return ((ISession)grain).OnSocketDisconnect().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -1036537128: 
                                return ((ISession)grain).GetSessionKeyFromAuthAccount((String)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 10551987: 
                                return ((ISession)grain).SetRealmInfo((RealmSettings)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -200604686: 
                                return ((ISession)grain).GetRealmID().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 820464294: 
                                return ((ISession)grain).SendPacket((PacketOut)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 1136236795: 
                                return ((ISession)grain).HandleReadyForAccountDataTimes().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 857067198: 
                                return ((ISession)grain).HandleUpdateAccountData((UInt32)arguments[0], (UInt32)arguments[1], (UInt32)arguments[2], (Byte[])arguments[3]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -1656015275: 
                                return ((ISession)grain).HandleRequestAccountData((UInt32)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -1842798826: 
                                return ((ISession)grain).HandleCharEnum().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -2128356724: 
                                return ((ISession)grain).HandleCharCreate((CMSG_CHAR_CREATE)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }
                    default:
                        throw new System.InvalidCastException("interfaceId="+interfaceId);
                }
            }
            catch(Exception ex)
            {
                var t = new System.Threading.Tasks.TaskCompletionSource<object>();
                t.SetException(ex);
                return t.Task;
            }
        }
        
        public static string GetMethodName(int interfaceId, int methodId)
        {

            switch (interfaceId)
            {
                
                case 130958639:  // ISession
                    switch (methodId)
                    {
                        case 715203915:
                            return "OnLogonChallenge";
                    case -174724446:
                            return "OnLogonProof";
                    case 105167316:
                            return "OnRealmList";
                    case 1161933625:
                            return "SetSessionType";
                    case 343949440:
                            return "GetSessionType";
                    case -1836674149:
                            return "Disconnect";
                    case 1465496855:
                            return "GetSessionKey";
                    case 522799231:
                            return "HandleAuthSession";
                    case -963939677:
                            return "OnSocketDisconnect";
                    case -1036537128:
                            return "GetSessionKeyFromAuthAccount";
                    case 10551987:
                            return "SetRealmInfo";
                    case -200604686:
                            return "GetRealmID";
                    case 820464294:
                            return "SendPacket";
                    case 1136236795:
                            return "HandleReadyForAccountDataTimes";
                    case 857067198:
                            return "HandleUpdateAccountData";
                    case -1656015275:
                            return "HandleRequestAccountData";
                    case -1842798826:
                            return "HandleCharEnum";
                    case -2128356724:
                            return "HandleCharCreate";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }

                default:
                    throw new System.InvalidCastException("interfaceId="+interfaceId);
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.RegisterSerializerAttribute()]
    internal class Server_ChrClassesSerialization
    {
        
        private static System.Reflection.FieldInfo fieldInfo8;
        
        private static System.Reflection.FieldInfo fieldInfo9;
        
        private static System.Reflection.FieldInfo fieldInfo10;
        
        private static System.Reflection.FieldInfo fieldInfo11;
        
        static Server_ChrClassesSerialization()
        {
            Register();
        }
        
        public static object DeepCopier(object original)
        {
            Server.ChrClasses input = ((Server.ChrClasses)(original));
            Server.ChrClasses result = new Server.ChrClasses();
            Orleans.Serialization.SerializationContext.Current.RecordObject(original, result);
            result.CinematicSequence = input.CinematicSequence;
            result.Class = input.Class;
            result.ExpansionRequired = input.ExpansionRequired;
            result.FemaleName = ((string[])(Orleans.Serialization.SerializationManager.DeepCopyInner(input.FemaleName)));
            result.Flags = input.Flags;
            result.Name = ((string[])(Orleans.Serialization.SerializationManager.DeepCopyInner(input.Name)));
            result.NeutralName = ((string[])(Orleans.Serialization.SerializationManager.DeepCopyInner(input.NeutralName)));
            object objResult = ((object)(result));
            object temp8 = ((byte[])(Orleans.Serialization.SerializationManager.DeepCopyInner(fieldInfo8.GetValue(input))));
            fieldInfo8.SetValue(objResult, temp8);
            object temp9 = input.SpellFamily;
            fieldInfo9.SetValue(objResult, temp9);
            object temp10 = ((byte[])(Orleans.Serialization.SerializationManager.DeepCopyInner(fieldInfo10.GetValue(input))));
            fieldInfo10.SetValue(objResult, temp10);
            object temp11 = input.powerType;
            fieldInfo11.SetValue(objResult, temp11);
            return objResult;
        }
        
        public static void Serializer(object untypedInput, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            Server.ChrClasses input = ((Server.ChrClasses)(untypedInput));
            Orleans.Serialization.SerializationManager.SerializeInner(input.CinematicSequence, stream, typeof(uint));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Class, stream, typeof(uint));
            Orleans.Serialization.SerializationManager.SerializeInner(input.ExpansionRequired, stream, typeof(uint));
            Orleans.Serialization.SerializationManager.SerializeInner(input.FemaleName, stream, typeof(string[]));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Flags, stream, typeof(uint));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Name, stream, typeof(string[]));
            Orleans.Serialization.SerializationManager.SerializeInner(input.NeutralName, stream, typeof(string[]));
            Orleans.Serialization.SerializationManager.SerializeInner(fieldInfo8.GetValue(input), stream, typeof(byte[]));
            Orleans.Serialization.SerializationManager.SerializeInner(input.SpellFamily, stream, typeof(uint));
            Orleans.Serialization.SerializationManager.SerializeInner(fieldInfo10.GetValue(input), stream, typeof(byte[]));
            Orleans.Serialization.SerializationManager.SerializeInner(input.powerType, stream, typeof(uint));
        }
        
        public static object Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            Server.ChrClasses result = new Server.ChrClasses();
            result.CinematicSequence = ((uint)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(uint), stream)));
            result.Class = ((uint)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(uint), stream)));
            result.ExpansionRequired = ((uint)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(uint), stream)));
            result.FemaleName = ((string[])(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(string[]), stream)));
            result.Flags = ((uint)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(uint), stream)));
            result.Name = ((string[])(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(string[]), stream)));
            result.NeutralName = ((string[])(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(string[]), stream)));
            object objResult = ((object)(result));
            object temp8 = ((byte[])(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(byte[]), stream)));
            fieldInfo8.SetValue(objResult, temp8);
            object temp9 = ((uint)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(uint), stream)));
            fieldInfo9.SetValue(objResult, temp9);
            object temp10 = ((byte[])(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(byte[]), stream)));
            fieldInfo10.SetValue(objResult, temp10);
            object temp11 = ((uint)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(uint), stream)));
            fieldInfo11.SetValue(objResult, temp11);
            return objResult;
        }
        
        public static void Register()
        {
            global::Orleans.Serialization.SerializationManager.Register(typeof(Server.ChrClasses), DeepCopier, Serializer, Deserializer);
            fieldInfo8 = typeof(Server.DBCRecordBase).GetField("RecordData", (System.Reflection.BindingFlags.Instance 
                            | (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)));
            fieldInfo9 = typeof(Server.ChrClasses).GetField("SpellFamily", (System.Reflection.BindingFlags.Instance 
                            | (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)));
            fieldInfo10 = typeof(Server.DBCRecordBase).GetField("StringData", (System.Reflection.BindingFlags.Instance 
                            | (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)));
            fieldInfo11 = typeof(Server.ChrClasses).GetField("powerType", (System.Reflection.BindingFlags.Instance 
                            | (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.RegisterSerializerAttribute()]
    internal class Server_ChrRacesSerialization
    {
        
        private static System.Reflection.FieldInfo fieldInfo12;
        
        private static System.Reflection.FieldInfo fieldInfo13;
        
        private static System.Reflection.FieldInfo fieldInfo14;
        
        private static System.Reflection.FieldInfo fieldInfo15;
        
        static Server_ChrRacesSerialization()
        {
            Register();
        }
        
        public static object DeepCopier(object original)
        {
            Server.ChrRaces input = ((Server.ChrRaces)(original));
            Server.ChrRaces result = new Server.ChrRaces();
            Orleans.Serialization.SerializationContext.Current.RecordObject(original, result);
            result.CinematicSequence = input.CinematicSequence;
            result.ExpensionRequired = input.ExpensionRequired;
            result.ExplorationData = input.ExplorationData;
            result.Faction = input.Faction;
            result.FemaleName = ((string[])(Orleans.Serialization.SerializationManager.DeepCopyInner(input.FemaleName)));
            result.Flags = input.Flags;
            result.ModelFemale = input.ModelFemale;
            result.ModelMale = input.ModelMale;
            result.Name = ((string[])(Orleans.Serialization.SerializationManager.DeepCopyInner(input.Name)));
            result.NeutralName = ((string[])(Orleans.Serialization.SerializationManager.DeepCopyInner(input.NeutralName)));
            result.Race = input.Race;
            object objResult = ((object)(result));
            object temp12 = ((byte[])(Orleans.Serialization.SerializationManager.DeepCopyInner(fieldInfo12.GetValue(input))));
            fieldInfo12.SetValue(objResult, temp12);
            object temp13 = input.ShortName;
            fieldInfo13.SetValue(objResult, temp13);
            object temp14 = ((byte[])(Orleans.Serialization.SerializationManager.DeepCopyInner(fieldInfo14.GetValue(input))));
            fieldInfo14.SetValue(objResult, temp14);
            object temp15 = input.Team;
            fieldInfo15.SetValue(objResult, temp15);
            return objResult;
        }
        
        public static void Serializer(object untypedInput, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            Server.ChrRaces input = ((Server.ChrRaces)(untypedInput));
            Orleans.Serialization.SerializationManager.SerializeInner(input.CinematicSequence, stream, typeof(uint));
            Orleans.Serialization.SerializationManager.SerializeInner(input.ExpensionRequired, stream, typeof(uint));
            Orleans.Serialization.SerializationManager.SerializeInner(input.ExplorationData, stream, typeof(uint));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Faction, stream, typeof(uint));
            Orleans.Serialization.SerializationManager.SerializeInner(input.FemaleName, stream, typeof(string[]));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Flags, stream, typeof(uint));
            Orleans.Serialization.SerializationManager.SerializeInner(input.ModelFemale, stream, typeof(uint));
            Orleans.Serialization.SerializationManager.SerializeInner(input.ModelMale, stream, typeof(uint));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Name, stream, typeof(string[]));
            Orleans.Serialization.SerializationManager.SerializeInner(input.NeutralName, stream, typeof(string[]));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Race, stream, typeof(uint));
            Orleans.Serialization.SerializationManager.SerializeInner(fieldInfo12.GetValue(input), stream, typeof(byte[]));
            Orleans.Serialization.SerializationManager.SerializeInner(input.ShortName, stream, typeof(string));
            Orleans.Serialization.SerializationManager.SerializeInner(fieldInfo14.GetValue(input), stream, typeof(byte[]));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Team, stream, typeof(uint));
        }
        
        public static object Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            Server.ChrRaces result = new Server.ChrRaces();
            result.CinematicSequence = ((uint)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(uint), stream)));
            result.ExpensionRequired = ((uint)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(uint), stream)));
            result.ExplorationData = ((uint)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(uint), stream)));
            result.Faction = ((uint)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(uint), stream)));
            result.FemaleName = ((string[])(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(string[]), stream)));
            result.Flags = ((uint)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(uint), stream)));
            result.ModelFemale = ((uint)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(uint), stream)));
            result.ModelMale = ((uint)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(uint), stream)));
            result.Name = ((string[])(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(string[]), stream)));
            result.NeutralName = ((string[])(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(string[]), stream)));
            result.Race = ((uint)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(uint), stream)));
            object objResult = ((object)(result));
            object temp12 = ((byte[])(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(byte[]), stream)));
            fieldInfo12.SetValue(objResult, temp12);
            object temp13 = ((string)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(string), stream)));
            fieldInfo13.SetValue(objResult, temp13);
            object temp14 = ((byte[])(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(byte[]), stream)));
            fieldInfo14.SetValue(objResult, temp14);
            object temp15 = ((uint)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(uint), stream)));
            fieldInfo15.SetValue(objResult, temp15);
            return objResult;
        }
        
        public static void Register()
        {
            global::Orleans.Serialization.SerializationManager.Register(typeof(Server.ChrRaces), DeepCopier, Serializer, Deserializer);
            fieldInfo12 = typeof(Server.DBCRecordBase).GetField("RecordData", (System.Reflection.BindingFlags.Instance 
                            | (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)));
            fieldInfo13 = typeof(Server.ChrRaces).GetField("ShortName", (System.Reflection.BindingFlags.Instance 
                            | (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)));
            fieldInfo14 = typeof(Server.DBCRecordBase).GetField("StringData", (System.Reflection.BindingFlags.Instance 
                            | (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)));
            fieldInfo15 = typeof(Server.ChrRaces).GetField("Team", (System.Reflection.BindingFlags.Instance 
                            | (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)));
        }
    }
}
namespace InterfacesSerializers
{
    using System;
    using System.Collections.Generic;
    using System.Reflection;
    using Orleans.Serialization;
    using Shared;
    using System.IO;
    using System.Net;
    using System.Runtime.Serialization;
    using System.Collections;
    using System.Runtime.InteropServices;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.RegisterSerializerAttribute()]
    internal class Shared_PlayerCreateInfoSerialization
    {
        
        static Shared_PlayerCreateInfoSerialization()
        {
            Register();
        }
        
        public static object DeepCopier(object original)
        {
            Shared.PlayerCreateInfo input = ((Shared.PlayerCreateInfo)(original));
            Shared.PlayerCreateInfo result = new Shared.PlayerCreateInfo();
            Orleans.Serialization.SerializationContext.Current.RecordObject(original, result);
            result.@class = input.@class;
            result.map = input.map;
            result.orientation = input.orientation;
            result.position_x = input.position_x;
            result.position_y = input.position_y;
            result.position_z = input.position_z;
            result.race = input.race;
            result.zone = input.zone;
            return result;
        }
        
        public static void Serializer(object untypedInput, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            Shared.PlayerCreateInfo input = ((Shared.PlayerCreateInfo)(untypedInput));
            Orleans.Serialization.SerializationManager.SerializeInner(input.@class, stream, typeof(uint));
            Orleans.Serialization.SerializationManager.SerializeInner(input.map, stream, typeof(uint));
            Orleans.Serialization.SerializationManager.SerializeInner(input.orientation, stream, typeof(float));
            Orleans.Serialization.SerializationManager.SerializeInner(input.position_x, stream, typeof(float));
            Orleans.Serialization.SerializationManager.SerializeInner(input.position_y, stream, typeof(float));
            Orleans.Serialization.SerializationManager.SerializeInner(input.position_z, stream, typeof(float));
            Orleans.Serialization.SerializationManager.SerializeInner(input.race, stream, typeof(uint));
            Orleans.Serialization.SerializationManager.SerializeInner(input.zone, stream, typeof(uint));
        }
        
        public static object Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            Shared.PlayerCreateInfo result = new Shared.PlayerCreateInfo();
            result.@class = ((uint)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(uint), stream)));
            result.map = ((uint)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(uint), stream)));
            result.orientation = ((float)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(float), stream)));
            result.position_x = ((float)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(float), stream)));
            result.position_y = ((float)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(float), stream)));
            result.position_z = ((float)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(float), stream)));
            result.race = ((uint)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(uint), stream)));
            result.zone = ((uint)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(uint), stream)));
            return result;
        }
        
        public static void Register()
        {
            global::Orleans.Serialization.SerializationManager.Register(typeof(Shared.PlayerCreateInfo), DeepCopier, Serializer, Deserializer);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.RegisterSerializerAttribute()]
    internal class Shared_ObjectGUIDSerialization
    {
        
        private static System.Reflection.FieldInfo fieldInfo1;
        
        static Shared_ObjectGUIDSerialization()
        {
            Register();
        }
        
        public static object DeepCopier(object original)
        {
            Shared.ObjectGUID input = ((Shared.ObjectGUID)(original));
            Shared.ObjectGUID result = ((Shared.ObjectGUID)(System.Runtime.Serialization.FormatterServices.GetUninitializedObject(typeof(Shared.ObjectGUID))));
            Orleans.Serialization.SerializationContext.Current.RecordObject(original, result);
            object objResult = ((object)(result));
            object temp1 = fieldInfo1.GetValue(input);
            fieldInfo1.SetValue(objResult, temp1);
            return objResult;
        }
        
        public static void Serializer(object untypedInput, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            Shared.ObjectGUID input = ((Shared.ObjectGUID)(untypedInput));
            Orleans.Serialization.SerializationManager.SerializeInner(fieldInfo1.GetValue(input), stream, typeof(ulong));
        }
        
        public static object Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            Shared.ObjectGUID result = ((Shared.ObjectGUID)(System.Runtime.Serialization.FormatterServices.GetUninitializedObject(typeof(Shared.ObjectGUID))));
            object objResult = ((object)(result));
            object temp1 = ((ulong)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(ulong), stream)));
            fieldInfo1.SetValue(objResult, temp1);
            return objResult;
        }
        
        public static void Register()
        {
            global::Orleans.Serialization.SerializationManager.Register(typeof(Shared.ObjectGUID), DeepCopier, Serializer, Deserializer);
            fieldInfo1 = typeof(Shared.ObjectGUID).GetField("_value", (System.Reflection.BindingFlags.Instance 
                            | (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.RegisterSerializerAttribute()]
    internal class Shared_CMSG_CHAR_CREATESerialization
    {
        
        static Shared_CMSG_CHAR_CREATESerialization()
        {
            Register();
        }
        
        public static object DeepCopier(object original)
        {
            return original;
        }
        
        public static void Serializer(object untypedInput, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            Shared.CMSG_CHAR_CREATE input = ((Shared.CMSG_CHAR_CREATE)(untypedInput));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Class, stream, typeof(byte));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Face, stream, typeof(byte));
            Orleans.Serialization.SerializationManager.SerializeInner(input.FacialHair, stream, typeof(byte));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Gender, stream, typeof(byte));
            Orleans.Serialization.SerializationManager.SerializeInner(input.HairColor, stream, typeof(byte));
            Orleans.Serialization.SerializationManager.SerializeInner(input.HairStyle, stream, typeof(byte));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Name, stream, typeof(string));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Outfit, stream, typeof(byte));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Race, stream, typeof(byte));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Skin, stream, typeof(byte));
        }
        
        public static object Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            Shared.CMSG_CHAR_CREATE result = default(Shared.CMSG_CHAR_CREATE);
            result.Class = ((byte)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(byte), stream)));
            result.Face = ((byte)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(byte), stream)));
            result.FacialHair = ((byte)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(byte), stream)));
            result.Gender = ((byte)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(byte), stream)));
            result.HairColor = ((byte)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(byte), stream)));
            result.HairStyle = ((byte)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(byte), stream)));
            result.Name = ((string)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(string), stream)));
            result.Outfit = ((byte)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(byte), stream)));
            result.Race = ((byte)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(byte), stream)));
            result.Skin = ((byte)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(byte), stream)));
            return result;
        }
        
        public static void Register()
        {
            global::Orleans.Serialization.SerializationManager.Register(typeof(Shared.CMSG_CHAR_CREATE), DeepCopier, Serializer, Deserializer);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.RegisterSerializerAttribute()]
    internal class Shared_RealmSerialization
    {
        
        static Shared_RealmSerialization()
        {
            Register();
        }
        
        public static object DeepCopier(object original)
        {
            Shared.Realm input = ((Shared.Realm)(original));
            Shared.Realm result = new Shared.Realm();
            Orleans.Serialization.SerializationContext.Current.RecordObject(original, result);
            result.RealmSettings = ((Shared.RealmSettings)(Orleans.Serialization.SerializationManager.DeepCopyInner(input.RealmSettings)));
            result.RealmStatus = ((Shared.RealmStatus)(Orleans.Serialization.SerializationManager.DeepCopyInner(input.RealmStatus)));
            return result;
        }
        
        public static void Serializer(object untypedInput, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            Shared.Realm input = ((Shared.Realm)(untypedInput));
            Orleans.Serialization.SerializationManager.SerializeInner(input.RealmSettings, stream, typeof(Shared.RealmSettings));
            Orleans.Serialization.SerializationManager.SerializeInner(input.RealmStatus, stream, typeof(Shared.RealmStatus));
        }
        
        public static object Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            Shared.Realm result = new Shared.Realm();
            result.RealmSettings = ((Shared.RealmSettings)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(Shared.RealmSettings), stream)));
            result.RealmStatus = ((Shared.RealmStatus)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(Shared.RealmStatus), stream)));
            return result;
        }
        
        public static void Register()
        {
            global::Orleans.Serialization.SerializationManager.Register(typeof(Shared.Realm), DeepCopier, Serializer, Deserializer);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.RegisterSerializerAttribute()]
    internal class Shared_RealmStatusSerialization
    {
        
        private static System.Reflection.FieldInfo fieldInfo2;
        
        static Shared_RealmStatusSerialization()
        {
            Register();
        }
        
        public static object DeepCopier(object original)
        {
            Shared.RealmStatus input = ((Shared.RealmStatus)(original));
            Shared.RealmStatus result = new Shared.RealmStatus();
            Orleans.Serialization.SerializationContext.Current.RecordObject(original, result);
            result.CurrentPlayers = input.CurrentPlayers;
            object objResult = ((object)(result));
            object temp2 = fieldInfo2.GetValue(input);
            fieldInfo2.SetValue(objResult, temp2);
            return objResult;
        }
        
        public static void Serializer(object untypedInput, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            Shared.RealmStatus input = ((Shared.RealmStatus)(untypedInput));
            Orleans.Serialization.SerializationManager.SerializeInner(input.CurrentPlayers, stream, typeof(int));
            Orleans.Serialization.SerializationManager.SerializeInner(fieldInfo2.GetValue(input), stream, typeof(System.DateTime));
        }
        
        public static object Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            Shared.RealmStatus result = new Shared.RealmStatus();
            result.CurrentPlayers = ((int)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(int), stream)));
            object objResult = ((object)(result));
            object temp2 = ((System.DateTime)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(System.DateTime), stream)));
            fieldInfo2.SetValue(objResult, temp2);
            return objResult;
        }
        
        public static void Register()
        {
            global::Orleans.Serialization.SerializationManager.Register(typeof(Shared.RealmStatus), DeepCopier, Serializer, Deserializer);
            fieldInfo2 = typeof(Shared.RealmStatus).GetField("LastPing", (System.Reflection.BindingFlags.Instance 
                            | (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.RegisterSerializerAttribute()]
    internal class Shared_RealmSettingsSerialization
    {
        
        static Shared_RealmSettingsSerialization()
        {
            Register();
        }
        
        public static object DeepCopier(object original)
        {
            Shared.RealmSettings input = ((Shared.RealmSettings)(original));
            Shared.RealmSettings result = new Shared.RealmSettings();
            Orleans.Serialization.SerializationContext.Current.RecordObject(original, result);
            result.Address = input.Address;
            result.Cat = input.Cat;
            result.ID = input.ID;
            result.Lol = input.Lol;
            result.MaxPlayers = input.MaxPlayers;
            result.Name = input.Name;
            result.Port = input.Port;
            result.RealmID = input.RealmID;
            result.RequiredAccountLevel = input.RequiredAccountLevel;
            return result;
        }
        
        public static void Serializer(object untypedInput, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            Shared.RealmSettings input = ((Shared.RealmSettings)(untypedInput));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Address, stream, typeof(string));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Cat, stream, typeof(int));
            Orleans.Serialization.SerializationManager.SerializeInner(input.ID, stream, typeof(int));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Lol, stream, typeof(string));
            Orleans.Serialization.SerializationManager.SerializeInner(input.MaxPlayers, stream, typeof(int));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Name, stream, typeof(string));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Port, stream, typeof(ushort));
            Orleans.Serialization.SerializationManager.SerializeInner(input.RealmID, stream, typeof(int));
            Orleans.Serialization.SerializationManager.SerializeInner(input.RequiredAccountLevel, stream, typeof(int));
        }
        
        public static object Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            Shared.RealmSettings result = new Shared.RealmSettings();
            result.Address = ((string)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(string), stream)));
            result.Cat = ((int)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(int), stream)));
            result.ID = ((int)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(int), stream)));
            result.Lol = ((string)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(string), stream)));
            result.MaxPlayers = ((int)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(int), stream)));
            result.Name = ((string)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(string), stream)));
            result.Port = ((ushort)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(ushort), stream)));
            result.RealmID = ((int)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(int), stream)));
            result.RequiredAccountLevel = ((int)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(int), stream)));
            return result;
        }
        
        public static void Register()
        {
            global::Orleans.Serialization.SerializationManager.Register(typeof(Shared.RealmSettings), DeepCopier, Serializer, Deserializer);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.RegisterSerializerAttribute()]
    internal class Shared_PacketOutSerialization
    {
        
        private static System.Reflection.FieldInfo fieldInfo1;
        
        private static System.Reflection.FieldInfo fieldInfo2;
        
        static Shared_PacketOutSerialization()
        {
            Register();
        }
        
        public static object DeepCopier(object original)
        {
            Shared.PacketOut input = ((Shared.PacketOut)(original));
            Shared.PacketOut result = new Shared.PacketOut();
            Orleans.Serialization.SerializationContext.Current.RecordObject(original, result);
            object objResult = ((object)(result));
            object temp1 = ((System.IO.MemoryStream)(Orleans.Serialization.SerializationManager.DeepCopyInner(fieldInfo1.GetValue(input))));
            fieldInfo1.SetValue(objResult, temp1);
            object temp2 = fieldInfo2.GetValue(input);
            fieldInfo2.SetValue(objResult, temp2);
            return objResult;
        }
        
        public static void Serializer(object untypedInput, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            Shared.PacketOut input = ((Shared.PacketOut)(untypedInput));
            Orleans.Serialization.SerializationManager.SerializeInner(fieldInfo1.GetValue(input), stream, typeof(System.IO.MemoryStream));
            Orleans.Serialization.SerializationManager.SerializeInner(fieldInfo2.GetValue(input), stream, typeof(Shared.PacketType));
        }
        
        public static object Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            Shared.PacketOut result = new Shared.PacketOut();
            object objResult = ((object)(result));
            object temp1 = ((System.IO.MemoryStream)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(System.IO.MemoryStream), stream)));
            fieldInfo1.SetValue(objResult, temp1);
            object temp2 = ((Shared.PacketType)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(Shared.PacketType), stream)));
            fieldInfo2.SetValue(objResult, temp2);
            return objResult;
        }
        
        public static void Register()
        {
            global::Orleans.Serialization.SerializationManager.Register(typeof(Shared.PacketOut), DeepCopier, Serializer, Deserializer);
            fieldInfo1 = typeof(Shared.PacketOut).GetField("_strm", (System.Reflection.BindingFlags.Instance 
                            | (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)));
            fieldInfo2 = typeof(Shared.PacketOut).GetField("type", (System.Reflection.BindingFlags.Instance 
                            | (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.RegisterSerializerAttribute()]
    internal class Shared_AuthLogonChallengeSerialization
    {
        
        static Shared_AuthLogonChallengeSerialization()
        {
            Register();
        }
        
        public static object DeepCopier(object original)
        {
            Shared.AuthLogonChallenge input = ((Shared.AuthLogonChallenge)(original));
            Shared.AuthLogonChallenge result = default(Shared.AuthLogonChallenge);
            Orleans.Serialization.SerializationContext.Current.RecordObject(original, result);
            result.account = input.account;
            result.category = input.category;
            result.client = input.client;
            result.client_build = input.client_build;
            result.client_major = input.client_major;
            result.client_minor = input.client_minor;
            result.client_revision = input.client_revision;
            result.ipaddr = ((System.Net.IPAddress)(Orleans.Serialization.SerializationManager.DeepCopyInner(input.ipaddr)));
            result.locale = input.locale;
            result.os = input.os;
            result.processor = input.processor;
            return result;
        }
        
        public static void Serializer(object untypedInput, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            Shared.AuthLogonChallenge input = ((Shared.AuthLogonChallenge)(untypedInput));
            Orleans.Serialization.SerializationManager.SerializeInner(input.account, stream, typeof(string));
            Orleans.Serialization.SerializationManager.SerializeInner(input.category, stream, typeof(int));
            Orleans.Serialization.SerializationManager.SerializeInner(input.client, stream, typeof(string));
            Orleans.Serialization.SerializationManager.SerializeInner(input.client_build, stream, typeof(ushort));
            Orleans.Serialization.SerializationManager.SerializeInner(input.client_major, stream, typeof(byte));
            Orleans.Serialization.SerializationManager.SerializeInner(input.client_minor, stream, typeof(byte));
            Orleans.Serialization.SerializationManager.SerializeInner(input.client_revision, stream, typeof(byte));
            Orleans.Serialization.SerializationManager.SerializeInner(input.ipaddr, stream, typeof(System.Net.IPAddress));
            Orleans.Serialization.SerializationManager.SerializeInner(input.locale, stream, typeof(string));
            Orleans.Serialization.SerializationManager.SerializeInner(input.os, stream, typeof(string));
            Orleans.Serialization.SerializationManager.SerializeInner(input.processor, stream, typeof(string));
        }
        
        public static object Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            Shared.AuthLogonChallenge result = default(Shared.AuthLogonChallenge);
            result.account = ((string)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(string), stream)));
            result.category = ((int)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(int), stream)));
            result.client = ((string)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(string), stream)));
            result.client_build = ((ushort)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(ushort), stream)));
            result.client_major = ((byte)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(byte), stream)));
            result.client_minor = ((byte)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(byte), stream)));
            result.client_revision = ((byte)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(byte), stream)));
            result.ipaddr = ((System.Net.IPAddress)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(System.Net.IPAddress), stream)));
            result.locale = ((string)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(string), stream)));
            result.os = ((string)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(string), stream)));
            result.processor = ((string)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(string), stream)));
            return result;
        }
        
        public static void Register()
        {
            global::Orleans.Serialization.SerializationManager.Register(typeof(Shared.AuthLogonChallenge), DeepCopier, Serializer, Deserializer);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.RegisterSerializerAttribute()]
    internal class Shared_AuthLogonProofSerialization
    {
        
        static Shared_AuthLogonProofSerialization()
        {
            Register();
        }
        
        public static object DeepCopier(object original)
        {
            Shared.AuthLogonProof input = ((Shared.AuthLogonProof)(original));
            Shared.AuthLogonProof result = default(Shared.AuthLogonProof);
            Orleans.Serialization.SerializationContext.Current.RecordObject(original, result);
            result.A = ((byte[])(Orleans.Serialization.SerializationManager.DeepCopyInner(input.A)));
            result.M1 = ((byte[])(Orleans.Serialization.SerializationManager.DeepCopyInner(input.M1)));
            result.crchash = ((byte[])(Orleans.Serialization.SerializationManager.DeepCopyInner(input.crchash)));
            result.number_of_keys = input.number_of_keys;
            result.unk = input.unk;
            return result;
        }
        
        public static void Serializer(object untypedInput, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            Shared.AuthLogonProof input = ((Shared.AuthLogonProof)(untypedInput));
            Orleans.Serialization.SerializationManager.SerializeInner(input.A, stream, typeof(byte[]));
            Orleans.Serialization.SerializationManager.SerializeInner(input.M1, stream, typeof(byte[]));
            Orleans.Serialization.SerializationManager.SerializeInner(input.crchash, stream, typeof(byte[]));
            Orleans.Serialization.SerializationManager.SerializeInner(input.number_of_keys, stream, typeof(byte));
            Orleans.Serialization.SerializationManager.SerializeInner(input.unk, stream, typeof(byte));
        }
        
        public static object Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            Shared.AuthLogonProof result = default(Shared.AuthLogonProof);
            result.A = ((byte[])(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(byte[]), stream)));
            result.M1 = ((byte[])(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(byte[]), stream)));
            result.crchash = ((byte[])(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(byte[]), stream)));
            result.number_of_keys = ((byte)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(byte), stream)));
            result.unk = ((byte)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(byte), stream)));
            return result;
        }
        
        public static void Register()
        {
            global::Orleans.Serialization.SerializationManager.Register(typeof(Shared.AuthLogonProof), DeepCopier, Serializer, Deserializer);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.RegisterSerializerAttribute()]
    internal class Shared_BigIntegerSerialization
    {
        
        private static System.Reflection.FieldInfo fieldInfo1;
        
        private static System.Reflection.FieldInfo fieldInfo2;
        
        private static System.Reflection.FieldInfo fieldInfo3;
        
        static Shared_BigIntegerSerialization()
        {
            Register();
        }
        
        public static object DeepCopier(object original)
        {
            Shared.BigInteger input = ((Shared.BigInteger)(original));
            Shared.BigInteger result = new Shared.BigInteger();
            Orleans.Serialization.SerializationContext.Current.RecordObject(original, result);
            object objResult = ((object)(result));
            object temp1 = ((uint[])(Orleans.Serialization.SerializationManager.DeepCopyInner(fieldInfo1.GetValue(input))));
            fieldInfo1.SetValue(objResult, temp1);
            object temp2 = input.dataLength;
            fieldInfo2.SetValue(objResult, temp2);
            object temp3 = ((System.Runtime.Serialization.SerializationInfo)(Orleans.Serialization.SerializationManager.DeepCopyInner(fieldInfo3.GetValue(input))));
            fieldInfo3.SetValue(objResult, temp3);
            return objResult;
        }
        
        public static void Serializer(object untypedInput, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            Shared.BigInteger input = ((Shared.BigInteger)(untypedInput));
            Orleans.Serialization.SerializationManager.SerializeInner(fieldInfo1.GetValue(input), stream, typeof(uint[]));
            Orleans.Serialization.SerializationManager.SerializeInner(input.dataLength, stream, typeof(int));
            Orleans.Serialization.SerializationManager.SerializeInner(fieldInfo3.GetValue(input), stream, typeof(System.Runtime.Serialization.SerializationInfo));
        }
        
        public static object Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            Shared.BigInteger result = new Shared.BigInteger();
            object objResult = ((object)(result));
            object temp1 = ((uint[])(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(uint[]), stream)));
            fieldInfo1.SetValue(objResult, temp1);
            object temp2 = ((int)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(int), stream)));
            fieldInfo2.SetValue(objResult, temp2);
            object temp3 = ((System.Runtime.Serialization.SerializationInfo)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(System.Runtime.Serialization.SerializationInfo), stream)));
            fieldInfo3.SetValue(objResult, temp3);
            return objResult;
        }
        
        public static void Register()
        {
            global::Orleans.Serialization.SerializationManager.Register(typeof(Shared.BigInteger), DeepCopier, Serializer, Deserializer);
            fieldInfo1 = typeof(Shared.BigInteger).GetField("data", (System.Reflection.BindingFlags.Instance 
                            | (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)));
            fieldInfo2 = typeof(Shared.BigInteger).GetField("dataLength", (System.Reflection.BindingFlags.Instance 
                            | (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)));
            fieldInfo3 = typeof(Shared.BigInteger).GetField("info", (System.Reflection.BindingFlags.Instance 
                            | (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.9.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.RegisterSerializerAttribute()]
    internal class Shared_CMSG_AUTH_SESSIONSerialization
    {
        
        static Shared_CMSG_AUTH_SESSIONSerialization()
        {
            Register();
        }
        
        public static object DeepCopier(object original)
        {
            Shared.CMSG_AUTH_SESSION input = ((Shared.CMSG_AUTH_SESSION)(original));
            Shared.CMSG_AUTH_SESSION result = default(Shared.CMSG_AUTH_SESSION);
            Orleans.Serialization.SerializationContext.Current.RecordObject(original, result);
            result.Account = input.Account;
            result.AddonData = ((byte[])(Orleans.Serialization.SerializationManager.DeepCopyInner(input.AddonData)));
            result.Build = input.Build;
            result.Digest = ((Shared.BigInteger)(Orleans.Serialization.SerializationManager.DeepCopyInner(input.Digest)));
            result.Seed = input.Seed;
            return result;
        }
        
        public static void Serializer(object untypedInput, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            Shared.CMSG_AUTH_SESSION input = ((Shared.CMSG_AUTH_SESSION)(untypedInput));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Account, stream, typeof(string));
            Orleans.Serialization.SerializationManager.SerializeInner(input.AddonData, stream, typeof(byte[]));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Build, stream, typeof(uint));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Digest, stream, typeof(Shared.BigInteger));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Seed, stream, typeof(uint));
        }
        
        public static object Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            Shared.CMSG_AUTH_SESSION result = default(Shared.CMSG_AUTH_SESSION);
            result.Account = ((string)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(string), stream)));
            result.AddonData = ((byte[])(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(byte[]), stream)));
            result.Build = ((uint)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(uint), stream)));
            result.Digest = ((Shared.BigInteger)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(Shared.BigInteger), stream)));
            result.Seed = ((uint)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(uint), stream)));
            return result;
        }
        
        public static void Register()
        {
            global::Orleans.Serialization.SerializationManager.Register(typeof(Shared.CMSG_AUTH_SESSION), DeepCopier, Serializer, Deserializer);
        }
    }
}
#pragma warning restore 162
#pragma warning restore 219
#pragma warning restore 414
#pragma warning restore 649
#pragma warning restore 693
#pragma warning restore 1591
#pragma warning restore 1998
#endif
